using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using CRM.DataAccess.FIT;
using CRM.DataAccess.Account;
using System.Data;
using System.Data.Common;
using System.Collections;
using Telerik.Web.UI;
using System.Data.SqlClient;
using System.Data.Sql;
using System.Configuration;
using System.Web.Configuration;
using System.Net.Mail;
using System.Net;
using System.IO;
using Microsoft.Reporting.WebForms;
using CRM.WebApp.WebHelper;
using CRM.DataAccess.AdministratorEntity;
using CRM.Model.AdministrationModel;
using CRM.DataAccess;
using System.Globalization;
using CRM.DataAccess.SecurityDAL;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using System.Net;
using System.Text;
using System.Web.UI.HtmlControls;
using System.Text.RegularExpressions;



namespace CRM.WebApp.Views.FIT
{
    public partial class AdminHotels : System.Web.UI.Page
    {
        CRM.DataAccess.FIT.FitQuotes objfitquote = new CRM.DataAccess.FIT.FitQuotes();
        HotelsStoreProcedure objHotelStoreProcedure = new HotelsStoreProcedure();
        AuthorizationDal objAuthorizationDal = new AuthorizationDal();
        BookingFitStoreProcedure objBookingFitStoreProcedure = new BookingFitStoreProcedure();

        CancellationStoredProcedure objCancellationStoredProcedure = new CancellationStoredProcedure();
        FITPaymentStoreProcedure objFITPaymentStoreProcedure = new FITPaymentStoreProcedure();

        VouchersStoredProcedure objVouchersStoredProcedure = new VouchersStoredProcedure();


        #region allvariable

        bool room_flag_conflict = true;
        bool fly_land = true;
        #region Sight Variables
        string setchk;
        string setchk2;
        string setchk3;
        string setchk4;
        string setchk5;
        string setchk6;
        string setchk7;
        string setchk8;
        string setchk9;
        string setchk10;
        #endregion

        #region  VARIABLE

        string noof_roomslbl;

        int quote_id;

        string usrid;
        string tourid;
        string quoteid;
        int Quote_Id = 0;

        int package_id;
        string cityname;
        public int ipr = 0;

        int transferpackgeid;
        int hotel_cart_id = 0;
        int service_cart_id = 0;

        string sightid;

        int srno = 0;
        // HOTELS INSERT VARIABLES
        int hotelcartid;
        string cityid;
        string hotelid;
        string fromdate;
        string todate;
        int noofroms;
        string orderstatus;
        int userid;
        int roomtype;
        string roomtypeid;
        string startdate;
        string enddate;

        //SIGHT AND TRANSFER INSERT VARIABLES
        int serivcecartid;
        int packageid;
        string packageflag;
        string date;
        string time;
        string pack_name;
        // string orderstatus;
        //  int userid;
        bool bkkflag = true;
        bool ptyflag = true;
        bool phuflag = true;

        // Bangkok Flags
        bool bkkin = true;
        bool bkkin1 = true;
        bool bkkout = true;
        bool bkkout1 = true;
        bool bkkout2 = true;
        bool d1 = true;
        // Pattaya Flags
        bool ptyin = true;
        bool ptyin1 = true;
        bool ptyout = true;
        bool ptyout1 = true;
        bool ptyout2 = true;
        bool d2 = true;
        // Phuket Flags
        bool phuin = true;
        bool phuin1 = true;
        bool phuout = true;
        bool phuout1 = true;
        bool phuout2 = true;
        bool d3 = true;
        // bkv Flags
        bool bkvin = true;
        bool bkvin1 = true;
        bool bkvout = true;
        bool bkvout1 = true;
        bool bkvout2 = true;
        bool d4 = true;

        // USM Flags
        bool usmin = true;
        bool usmin1 = true;
        bool usmout = true;
        bool usmout1 = true;
        bool usmout2 = true;
        bool d5 = true;

        // CNX Flags
        bool cnxin = true;
        bool cnxin1 = true;
        bool cnxout = true;
        bool cnxout1 = true;
        bool cnxout2 = true;
        bool d6 = true;

        // ETC Flags
        bool etcin = true;
        bool etcin1 = true;
        bool etcout = true;
        bool etcout1 = true;
        bool etcout2 = true;
        bool d7 = true;

        // SS Flags
        bool ssin = true;
        bool ssin1 = true;
        bool ssout = true;
        bool ssout1 = true;
        bool ssout2 = true;
        bool d8 = true;

        // SPS Flags
        bool spsin = true;
        bool spsin1 = true;
        bool spsout = true;
        bool spsout1 = true;
        bool spsout2 = true;
        bool d9 = true;

        // ZZ Flags
        bool zzin = true;
        bool zzin1 = true;
        bool zzout = true;
        bool zzout1 = true;
        bool zzout2 = true;
        bool d10 = true;

        // SIGHT SEE

        //Bangkok Site
        bool bkkss = true;
        bool bkkss1 = true;

        //Pattaya Site
        bool ptyss = true;
        bool ptyss1 = true;

        //Phuket Site
        bool phuss = true;
        bool phuss1 = true;

        //bkv Site
        bool bkvss = true;
        bool bkvss1 = true;

        //usm Site
        bool usmss = true;
        bool usmss1 = true;

        //cnx Site
        bool cnxss = true;
        bool cnxss1 = true;

        //etc Site
        bool etcss = true;
        bool etcss1 = true;

        //ss Site
        bool ssss = true;
        bool ssss1 = true;

        //sps Site
        bool spsss = true;
        bool spsss1 = true;

        //zz Site
        bool zzss = true;
        bool zzss1 = true;

        bool tpdate = true;

        string viewstate;
        int tour_id = 0;
        int quots_id = 0;

        // TRANSFER VALIDATION VARIABLE
        string tpid;
        string instpid;

        int countcity;
        string countryname;

        // DATE FOR SITE SEE // 30/01/2012
        bool dateformat_flag = true;
        bool ssdateflag = true;

        bool flag_popup = true;

        // FIT SELECTION PACKAGES FALGS
        bool all_falg = false;

        bool h_flag = false;
        bool t_flag = false;
        bool s_flag = false;

        bool ht_flag = false;
        bool hs_flag = false;

        bool ts_flag = false;

        int service_id = 0;
        #endregion

        #region GloabalDeclaration
        //string quote_id;

        string AgentName;
        string Tourname;

        #endregion

        #region Book Email Variables
        // EMAIL VARIABLE
        string supplier_email;
        string supplier_emailupdate;
        string single_rooms;
        string double_rooms;
        string tripal_rooms;
        string room_type;
        string hotel_name;
        string check_in_date;
        string check_out_date;
        string single_rooms1;
        string double_rooms1;
        string tripal_rooms1;
        string room_type1;
        string hotel_name1;
        string check_in_date1;
        string check_out_date1;
        string pessanger_name;
        string pessanger_name1;

        string adults;
        string adults1;

        string cwb;
        string cwb1;

        string cnb;
        string cnb1;

        string infant;
        string infant1;
        //string smtpemail = "kushal@flamingotravels.co.in";
        //string smtppass = "dadashri";
        //string smtphost = "smtpcorp.com";
        //string fromemail = "sudhir@travelzunlimited.com";

        string str = ConfigurationManager.ConnectionStrings["CRM"].ToString();

        string supplier_id;
        string hotelsupplier_id;
        string hotelsupplier_idupdate;
        string supplier_idupdate;
        #endregion

        bool room_flag = true;
        #endregion


        #region multickeckdropdown

        bool dropdown_flag = true;

        public MulticheckDropdown DDC1
        {
            get
            {
                return this.DDL1;
            }
        }

        public MulticheckDropdown DDC2
        {
            get
            {
                return this.DDL2;
            }
        }

        public MulticheckDropdown DDC3
        {
            get
            {
                return this.DDL3;
            }
        }

        public MulticheckDropdown DDC4
        {
            get
            {
                return this.DDL4;
            }
        }

        public MulticheckDropdown DDC5
        {
            get
            {
                return this.DDL5;
            }
        }

        public MulticheckDropdown DDC6
        {
            get
            {
                return this.DDL6;
            }
        }

        public MulticheckDropdown DDC7
        {
            get
            {
                return this.DDL7;
            }
        }

        public MulticheckDropdown DDC8
        {
            get
            {
                return this.DDL8;
            }
        }

        public MulticheckDropdown DDC9
        {
            get
            {
                return this.DDL9;
            }
        }

        public MulticheckDropdown DDC10
        {
            get
            {
                return this.DDL10;
            }
        }

        #endregion

        protected void Page_PreInit(object sender, EventArgs e)
        {
            if (Session["usersid"] == null)
            {
                Response.Redirect("~/Login.aspx");
            }

            //Check Page Authorization
            String CompId, DeptId, RoleId;
            CompId = Session["CompanyId"].ToString();
            DeptId = Session["DeptId"].ToString();
            RoleId = Session["RoleId"].ToString();

            DataTable dt = objAuthorizationDal.GetPageRights(Convert.ToInt32(CompId), Convert.ToInt32(DeptId), Convert.ToInt32(RoleId), 241);

            if (dt.Rows.Count <= 0 || Convert.ToBoolean(dt.Rows[0]["READ_ACCESS"]) == false)
            {
                Response.Redirect("~/Views/InvalidAccess.aspx");
            }
        }


        #region pageload
        protected void Page_Load(object sender, EventArgs e)
        {

            string s = Session["rel_sr_no"].ToString();
            DataTable DTQW = objHotelStoreProcedure.fetchuserid("FETCH_USER_ID_FROM_CUST_REL", s);
            usrid = DTQW.Rows[0]["USERSID"].ToString();
            DataTable dtad = objHotelStoreProcedure.objfetchusername("FETCH_USER_NAME_FOR_MAIL", Session["rel_sr_no"].ToString());
            Session["email"] = dtad.Rows[0]["CUST_REL_EMAIL"].ToString();
            Session["adminuserid"] = DTQW.Rows[0]["USERSID"].ToString();
            package_id = int.Parse(Session["packageid"].ToString());
            if (!IsPostBack)
            {
                if (Request["TOURID"] != null && !string.IsNullOrEmpty(Request["TOURID"].ToString()) && Request["QUOTEID"] != null && !string.IsNullOrEmpty(Request["QUOTEID"].ToString()))
                {
                    Session["updateid"] = Request.QueryString["QUOTEID"].ToString();
                    tourid = Request.QueryString["TOURID"].ToString();
                    quoteid = Request.QueryString["QUOTEID"].ToString();
                    quots_id = int.Parse(Request.QueryString["QUOTEID"].ToString());
                    Session["updateid"] = quots_id;
                    Session["tour"] = Request.QueryString["TOURID"].ToString();
                    tour_id = int.Parse(Request.QueryString["TOURID"].ToString());

                   // DataSet dscurrency = objfitquote.Get_Currency_quotewise(quoteid);
                    //DataSet dscurrency = objfitquote.Get_Currency_quotewise("GET_CURRENCY_QUOTEWISE", quoteid);
                    //if (dscurrency.Tables[0].Rows.Count > 0)
                    //{
                    //    bool curn = false;
                    //    if (dscurrency.Tables[0].Rows[0]["IS_THB_QUOTE"] != null && Convert.ToString(dscurrency.Tables[0].Rows[0]["IS_THB_QUOTE"]) != "")
                    //    {
                    //        curn = Convert.ToBoolean(dscurrency.Tables[0].Rows[0]["IS_THB_QUOTE"]);
                    //        if (curn == true)
                    //        {
                    //            rbtnTHB.Checked = true;
                    //            rbtnUSD.Checked = false;
                    //        }
                    //        else
                    //        {
                    //            rbtnTHB.Checked = false;
                    //            rbtnUSD.Checked = true;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        rbtnTHB.Checked = false;
                    //        rbtnUSD.Checked = true;
                    //    }
                    //}

                    FillAllDetails();

                    DataSet ds_tour_date = objHotelStoreProcedure.fetch_tour_Dates("GET_TOUR_DATE", tour_id);

                    if ((DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(ds_tour_date.Tables[0].Rows[0]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(ds_tour_date.Tables[0].Rows[0]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                    {
                        ViewState["date_change"] = null;
                    }

                    else
                    {
                        ViewState["date_change"] = "y";

                    }


                    DataSet ds = objHotelStoreProcedure.FetchForFitHotelEdit("FETCH_ALL_DATA_FOR_HOTEL", quoteid);



                    DataTable dt1 = new DataTable();
                    if (ds.Tables[0].Rows.Count != 0)
                    {
                        dt1 = ds.Tables[0];
                    }
                    DataTable DTORDER = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "12");
                    DataTable DTORDER1 = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "15");
                    if (Session["RoleId"].ToString() == "18" && Session["editorderstatus"].ToString() == DTORDER1.Rows[0]["ORDER_STATUS_NAME"].ToString())
                    {
                        btnapproved.Attributes.Add("style", "display");
                        btndisapproved.Attributes.Add("style", "display");

                    }
                    DataTable dt = objHotelStoreProcedure.fetchpacageid(package_id);

                    if (Session["editorderstatus"].ToString() == "Quoted" && ViewState["date_change"] == null)
                    {
                        btnBook.Attributes.Add("style", "display");
                        btnBook.Visible = true;
                    }

                    lnkbtn.Attributes.Add("style", "display");
                    Button2.Visible = false;
                    btnback.Visible = true;
                    UpdatePanel1.Update();
                    string str1 = cityname;
                    string[] words = str1.Split(',');
                    string empflag = Session["FLAG"].ToString();
                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                    {
                        Button5.Attributes.Add("style", "display");
                        Button7.Attributes.Add("style", "display");
                        btnGetQuote.Visible = false;
                        
                        Button2.Visible = false;

                    }
                    btnUpdate.Attributes.Add("style", "display");
                    foreach (string word in words)
                    {
                        /****************************************************** BANGKOK ***************************************************************/
                        if (word == "Bangkok")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusBKK.Visible = true;
                                lblStatusBkk.Visible = true;

                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked" && ViewState["date_change"] == null)
                            {
                                Td2.Attributes.Add("style", "display:none");
                                Td4.Attributes.Add("style", "display:none");
                              
                            }
                          
                            int temp = 0;
                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    if (dt1.Rows[i]["CHAIN_NAME"].ToString() != "")
                                    {
                                        ddrbkk_HotelName.Text = dt1.Rows[i]["CHAIN_NAME"].ToString();
                                        ddrbkk_RoomType.Text = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();
                                    }
                                    
                                    if (package_id == 6)
                                    {
                                        if (Session["fromdate"].ToString() == dt1.Rows[i]["FROM_DATE"].ToString())
                                        {
                                            txtbkk_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                            txtbkk_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                        }
                                        else
                                        {
                                            ViewState["date_change"] = "y";
                                        }
                                    }
                                    else
                                    {
                                        if (ViewState["date_change"] == null || ViewState["date_change"] != null)
                                        {
                                            txtbkk_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                            txtbkk_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                        }
                                        else
                                        {

                                        }
                                    }
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusBkk.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        lblStatusBkk.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusBkk.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;

                                        }

                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeesbkk.Visible = true;
                                        txtfeesbkk.Visible = true;
                                    }
                                    temp = i;
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox2.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && ViewState["date_change"] == null && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {
                                        rbtnbkkconfirm.Visible = true;
                                        lblselect.Visible = true;
                                    }
                                    //Reconfirm....
                                    else
                                    {

                                        rbtnbkkconfirm.Visible = false;
                                        lblselect.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[temp]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddrbkk_RoomType, dsbkk);

                                }
                            }

                            if (dt1.Rows.Count != 0)
                            {
                               
                            }


                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);


                            foreach (GridViewRow item in GridView1.Rows)
                            {
                                if (package_id == 6 || package_id == 9)
                                {
                                    DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                                    DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtbkk_CheckIn.Text, txtbkk_CheckOut.Text);
                                    ListItemCollection listbkk = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                        listbkk.Add(listitem);

                                    }
                                    DDC1.DDList.DataSource = listbkk;
                                    DDC1.DDList.DataTextField = "Text";
                                    DDC1.DDList.DataValueField = "Value";
                                    DDC1.DDList.DataBind();
                                    upSSbkk.Update();

                                }
                                Label meal = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Bangkok")
                                        {

                                            CheckBox chk = (CheckBox)item.FindControl("cb_bkk_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtssbkkfees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView1.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_Bkkdate");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString() && ViewState["date_change"] == null)
                                            {
                                                GridView1.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtbkkssdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                          
                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Bangkok");

                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString() != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drpbkk = (DropDownList)item.FindControl("DropDownList1");
                                            drpbkk.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_Bkk_noofMeals");
                                            txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                            DDL1 = (MulticheckDropdown)item.FindControl("DDL1");

                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Bangkok")
                                                        {
                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk = setchk + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                            }
                                                            
                                                        }
                                                       
                                                    }
                                                    setchk = setchk.Substring(1);
                                                    DDC1.SetCheckBoxValues(setchk);
                                                    setchk = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {

                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Bangkok")
                                            {

                                                CheckBox chk = (CheckBox)item.FindControl("cb_bkk_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtssbkkfees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView1.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView1.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtbkkssdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_Bkkdate");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Bangkok");

                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString() != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drpbkk = (DropDownList)item.FindControl("DropDownList1");
                                                drpbkk.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_Bkk_noofMeals");
                                                txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                                DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Bangkok")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk = setchk + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                }
                                                                
                                                            }
                                                           
                                                        }
                                                        setchk = setchk.Substring(1);
                                                        DDC1.SetCheckBoxValues(setchk);
                                                        setchk = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /****************************************************** PATTAYA ***************************************************************/

                        if (word == "Pattaya")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusPTY.Visible = true;
                                lblStatusPty.Visible = true;
                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked" && ViewState["date_change"] == null)
                            {
                                Td1.Attributes.Add("style", "display:none");
                                Td3.Attributes.Add("style", "display:none");
                              
                            }
                            
                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    if (dt1.Rows[i]["CHAIN_NAME"].ToString() != "")
                                    {
                                        ddrpty_HotelName.SelectedValue = dt1.Rows[i]["CHAIN_NAME"].ToString();
                                        ddrpty_RoomType.SelectedValue = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();
                                    }
                                    if (ViewState["date_change"] == null || ViewState["date_change"] != null )
                                    {
                                        txtpty_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                        txtpty_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                    }
                                   
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusPty.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        /* To Be Reconfirm */
                                        lblStatusPty.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusPty.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;
                                        }
                                      
                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeespty.Visible = true;
                                        txtfeespty.Visible = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox1.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && ViewState["date_change"] == null && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {
                                        Labelpty.Visible = true;
                                        Rbtnconfirmpty.Visible = true;
                                    }
                                    /* Reconfirm */
                                    else
                                    {
                                        Labelpty.Visible = false;
                                        Rbtnconfirmpty.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[i]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddrpty_RoomType, dsbkk);


                                }
                            }
                            if (dt1.Rows.Count != 0)
                            {
                               
                            }

                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);


                            foreach (GridViewRow item in GV_Result.Rows)
                            {
                                if (package_id == 6 || package_id == 9)
                                {
                                    DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtpty_CheckIn.Text, txtpty_CheckOut.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC2.DDList.DataSource = list;
                                    DDC2.DDList.DataTextField = "Text";
                                    DDC2.DDList.DataValueField = "Value";
                                    DDC2.DDList.DataBind();
                                    upSSPty.Update();

                                }
                                Label meal = (Label)item.FindControl("lblSS_PtypackageDetails");
                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Pattaya")
                                        {
                                            CheckBox chk = (CheckBox)item.FindControl("cb_pty_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtssptyfees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GV_Result.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString() && ViewState["date_change"] == null)
                                            {
                                                GV_Result.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtptyssdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_Ptydate");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");

                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Pattaya");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drppty = (DropDownList)item.FindControl("DropDownList2");
                                            drppty.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_PtynoofMeals");
                                            txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                            DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Pattaya")
                                                        {

                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk2 = setchk2 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                            }

                                                        }
                                                     
                                                    }
                                                    setchk2 = setchk2.Substring(1);
                                                    DDC2.SetCheckBoxValues(setchk2);
                                                    setchk2 = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Pattaya")
                                            {
                                                CheckBox chk = (CheckBox)item.FindControl("cb_pty_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtssptyfees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GV_Result.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString() && ViewState["date_change"] == null)
                                                {
                                                    GV_Result.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtptyssdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_Ptydate");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");

                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Pattaya");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drppty = (DropDownList)item.FindControl("DropDownList2");
                                                drppty.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_PtynoofMeals");
                                                txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                                DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Pattaya")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk2 = setchk2 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                }
                                                              
                                                            }
                                                      
                                                        }
                                                        setchk2 = setchk2.Substring(1);
                                                        DDC2.SetCheckBoxValues(setchk2);
                                                        setchk2 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /****************************************************** PHUKET ***************************************************************/

                        if (word == "Phuket")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusPHU.Visible = true;
                                lblStatusPhu.Visible = true;
                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked")
                            {
                            }

                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    if (dt1.Rows[i]["CHAIN_NAME"].ToString() != "")
                                    {
                                        ddrphu_HotelName.SelectedValue = dt1.Rows[i]["CHAIN_NAME"].ToString();
                                        ddrphu_RoomType.SelectedValue = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();
                                    }
                                    if (ViewState["date_change"] == null || ViewState["date_change"] != null)
                                    {
                                        txtphu_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                        txtphu_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                    }
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusPhu.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        lblStatusPhu.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusPhu.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;
                                        }

                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeesphu.Visible = true;
                                        txtfeesphu.Visible = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox3.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {
                                        Labelphu.Visible = true;
                                        rbtnconfirmphu.Visible = true;
                                    }
                                    /* To Be Reconfirm */
                                    else
                                    {
                                        Labelphu.Visible = false;
                                        rbtnconfirmphu.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[i]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddrphu_RoomType, dsbkk);
                                }
                            }
                            if (dt1.Rows.Count != 0)
                            {

                            }
                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);


                            foreach (GridViewRow item in GridView2.Rows)
                            {
                                DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                                DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtphu_CheckIn.Text, txtphu_CheckOut.Text);
                                ListItemCollection listbkk = new ListItemCollection();
                                for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                                {
                                    ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                    listbkk.Add(listitem);

                                }
                                DDC3.DDList.DataSource = listbkk;
                                DDC3.DDList.DataTextField = "Text";
                                DDC3.DDList.DataValueField = "Value";
                                DDC3.DDList.DataBind();
                                upSSbkk.Update();

                                Label meal = (Label)item.FindControl("lblSS_phuketpackageDetails");

                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Phuket")
                                        {
                                            CheckBox chk = (CheckBox)item.FindControl("cb_phu_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtssphufees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView2.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView2.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtphussdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_phuketdate");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Phuket");

                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drpphu = (DropDownList)item.FindControl("DropDownList3");
                                            drpphu.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");
                                            txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                            DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Phuket")
                                                        {
                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk3 = setchk3 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                            }
                                                         
                                                        }

                                                    }
                                                    setchk3 = setchk3.Substring(1);
                                                    DDC3.SetCheckBoxValues(setchk3);
                                                    setchk3 = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Phuket")
                                            {
                                                CheckBox chk = (CheckBox)item.FindControl("cb_phu_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtssphufees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView2.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView2.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtphussdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_phuketdate");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Phuket");

                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drpphu = (DropDownList)item.FindControl("DropDownList3");
                                                drpphu.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");
                                                txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                                DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Phuket")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk3 = setchk3 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                }
                                                             
                                                            }

                                                        }
                                                        setchk3 = setchk3.Substring(1);
                                                        DDC3.SetCheckBoxValues(setchk3);
                                                        setchk3 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /****************************************************** KRABI ***************************************************************/

                        if (word == "Krabi")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusKBV.Visible = true;
                                lblStatusKbv.Visible = true;
                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked")
                            {
                            }

                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    if (dt1.Rows[i]["CHAIN_NAME"].ToString() != "")
                                    {
                                        ddrkbv_HotelName.SelectedValue = dt1.Rows[i]["CHAIN_NAME"].ToString();
                                        ddrkbv_RoomType.SelectedValue = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();
                                    }

                                    if (ViewState["date_change"] == null || ViewState["date_change"] != null)

                                    
                                    {
                                        txtkbv_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                        txtkbv_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                    }
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusKbv.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        lblStatusKbv.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusKbv.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;
                                        }
                                     
                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeeskbv.Visible = true;
                                        txtfeeskbv.Visible = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox4.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {

                                        Labelkbv.Visible = true;
                                        rbtnconfirmkbv.Visible = true;
                                    }
                                    /*Reconfirm */
                                    else
                                    {
                                        Labelkbv.Visible = false;
                                        rbtnconfirmkbv.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[i]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddrkbv_RoomType, dsbkk);
                                }
                            }
                            if (dt1.Rows.Count != 0)
                            {

                            }
                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);


                            foreach (GridViewRow item in GridView3.Rows)
                            {

                                DDL4 = (MulticheckDropdown)item.FindControl("DDL4");
                                DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtkbv_CheckIn.Text, txtkbv_CheckOut.Text);
                                ListItemCollection listbkk = new ListItemCollection();
                                for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                                {
                                    ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                    listbkk.Add(listitem);

                                }
                                DDC4.DDList.DataSource = listbkk;
                                DDC4.DDList.DataTextField = "Text";
                                DDC4.DDList.DataValueField = "Value";
                                DDC4.DDList.DataBind();

                                Label meal = (Label)item.FindControl("lblSS_kbv_packageDetails");
                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Krabi")
                                        {
                                            CheckBox chk = (CheckBox)item.FindControl("cb_kbv_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtsskbvfees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView3.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView3.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtkbvssdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_kbv_date");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Krabi");

                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drpkbv = (DropDownList)item.FindControl("DropDownList4");
                                            drpkbv.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");
                                            txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                            DDL4 = (MulticheckDropdown)item.FindControl("DDL4");
                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Krabi")
                                                        {
                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk4 = setchk4 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                               
                                                            }
                                                        }

                                                    }
                                                    setchk4 = setchk4.Substring(1);
                                                    DDC4.SetCheckBoxValues(setchk4);
                                                    setchk4 = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Krabi")
                                            {
                                                CheckBox chk = (CheckBox)item.FindControl("cb_kbv_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtsskbvfees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView3.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView3.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtkbvssdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_kbv_date");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Krabi");

                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drpkbv = (DropDownList)item.FindControl("DropDownList4");
                                                drpkbv.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");
                                                txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                                DDL4 = (MulticheckDropdown)item.FindControl("DDL4");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Krabi")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk4 = setchk4 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                  
                                                                }
                                                            }

                                                        }
                                                        setchk4 = setchk4.Substring(1);
                                                        DDC4.SetCheckBoxValues(setchk4);
                                                        setchk4 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /****************************************************** SAMUI ***************************************************************/

                        if (word == "Samui")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusUSM.Visible = true;
                                lblStatusKbvUsm.Visible = true;
                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked")
                            {
                            }

                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    if (dt1.Rows[i]["CHAIN_NAME"].ToString() != "")
                                    {
                                        ddrusm_HotelName.SelectedValue = dt1.Rows[i]["CHAIN_NAME"].ToString();

                                        ddrusm_RoomType.SelectedValue = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();
                                    }

                                    if (ViewState["date_change"] == null || ViewState["date_change"] != null)
                                   
                                    {
                                        txtusm_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                        txtusm_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                    }
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusKbvUsm.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        lblStatusKbvUsm.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusKbvUsm.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;
                                        }
                                       
                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeesusm.Visible = true;
                                        txtfeesusm.Visible = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox5.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {
                                        Labelusm.Visible = true;
                                        rbtnconfirmusm.Visible = true;
                                    }
                                    else
                                    {
                                        Labelusm.Visible = false;
                                        rbtnconfirmusm.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[i]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddrusm_RoomType, dsbkk);
                                }
                            }
                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);
                            if (dt1.Rows.Count != 0)
                            {
                                
                            }

                            foreach (GridViewRow item in GridView4.Rows)
                            {

                                DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                                DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtusm_CheckIn.Text, txtusm_CheckOut.Text);
                                ListItemCollection listbkk = new ListItemCollection();
                                for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                                {
                                    ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                    listbkk.Add(listitem);

                                }
                                DDC5.DDList.DataSource = listbkk;
                                DDC5.DDList.DataTextField = "Text";
                                DDC5.DDList.DataValueField = "Value";
                                DDC5.DDList.DataBind();

                                Label meal = (Label)item.FindControl("lblSS_usm_packageDetails");
                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Samui")
                                        {
                                            CheckBox chk = (CheckBox)item.FindControl("cb_usm_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtssusmfees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView4.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView4.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtusmssdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_usm_date");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Samui");

                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                               
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drpsamui = (DropDownList)item.FindControl("DropDownList5");
                                            drpsamui.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_usm_noofMeals");
                                            txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                            DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Samui")
                                                        {
                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk5 = setchk5 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                             
                                                            }
                                                        }
                                                    }
                                                    setchk5 = setchk5.Substring(1);
                                                    DDC5.SetCheckBoxValues(setchk5);
                                                    setchk5 = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Samui")
                                            {
                                                CheckBox chk = (CheckBox)item.FindControl("cb_usm_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtssusmfees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView4.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView4.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtusmssdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_usm_date");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Samui");

                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                   
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drpsamui = (DropDownList)item.FindControl("DropDownList5");
                                                drpsamui.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_usm_noofMeals");
                                                txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                                DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Samui")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk5 = setchk5 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                 
                                                                }
                                                            }
                                                        }
                                                        setchk5 = setchk5.Substring(1);
                                                        DDC5.SetCheckBoxValues(setchk5);
                                                        setchk5 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /****************************************************** CHIANGMAI ***************************************************************/

                        if (word == "Chiangmai")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusCNX.Visible = true;
                                lblStatusCnx.Visible = true;
                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked")
                            {
                            }

                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    if (dt1.Rows[i]["CHAIN_NAME"].ToString() != "")
                                    {
                                        ddrcnx_HotelName.SelectedValue = dt1.Rows[i]["CHAIN_NAME"].ToString();

                                        ddrcnx_RoomType.SelectedValue = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();
                                    }

                                    if (ViewState["date_change"] == null || ViewState["date_change"] != null)
                                   
                                    {
                                        txtcnx_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                        txtcnx_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                    }
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusCnx.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        lblStatusCnx.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusCnx.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;
                                        }
                                        Labelcnx.Visible = false;
                                        rbtnconfirmcnx.Visible = false;
                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeescnx.Visible = true;
                                        txtfeescnx.Visible = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox6.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {
                                        Labelcnx.Visible = true;
                                        rbtnconfirmcnx.Visible = true;
                                    }
                                    else
                                    {
                                        Labelcnx.Visible = false;
                                        rbtnconfirmcnx.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[i]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddrcnx_RoomType, dsbkk);
                                }
                            }
                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);
                            if (dt1.Rows.Count != 0)
                            {
                              
                            }

                            foreach (GridViewRow item in GridView5.Rows)
                            {
                                DDL6 = (MulticheckDropdown)item.FindControl("DDL6");
                                DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtcnx_CheckIn.Text, txtcnx_CheckOut.Text);
                                ListItemCollection listbkk = new ListItemCollection();
                                for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                                {
                                    ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                    listbkk.Add(listitem);

                                }
                                DDC6.DDList.DataSource = listbkk;
                                DDC6.DDList.DataTextField = "Text";
                                DDC6.DDList.DataValueField = "Value";
                                DDC6.DDList.DataBind();

                                Label meal = (Label)item.FindControl("lblSS_cnx_packageDetails");
                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Chiangmai")
                                        {
                                            CheckBox chk = (CheckBox)item.FindControl("cb_cnx_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtsscnxfees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView5.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView5.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtcnxssdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_cnx_date");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Chiangmai");

                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drpchin = (DropDownList)item.FindControl("DropDownList6");
                                            drpchin.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
                                            txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                            DDL6 = (MulticheckDropdown)item.FindControl("DDL6");
                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Chiangmai")
                                                        {
                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk6 = setchk6 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                              
                                                            }
                                                        }
                                                    }
                                                    setchk6 = setchk6.Substring(1);
                                                    DDC6.SetCheckBoxValues(setchk6);
                                                    setchk6 = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Chiangmai")
                                            {
                                                CheckBox chk = (CheckBox)item.FindControl("cb_cnx_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtsscnxfees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView5.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView5.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtcnxssdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_cnx_date");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Chiangmai");

                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drpchin = (DropDownList)item.FindControl("DropDownList6");
                                                drpchin.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
                                                txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                                DDL6 = (MulticheckDropdown)item.FindControl("DDL6");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Chiangmai")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk6 = setchk6 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                   
                                                                }
                                                            }
                                                        }
                                                        setchk6 = setchk6.Substring(1);
                                                        DDC6.SetCheckBoxValues(setchk6);
                                                        setchk6 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /****************************************************** HUA HIN ***************************************************************/

                        if (word == "Hua Hin")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusETC.Visible = true;
                                lblStatusEtc.Visible = true;
                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked")
                            {

                            }

                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    if (dt1.Rows[i]["CHAIN_NAME"].ToString() != "")
                                    {
                                        ddretc_HotelName.SelectedValue = dt1.Rows[i]["CHAIN_NAME"].ToString();

                                        ddretc_RoomType.SelectedValue = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();
                                    }

                                    if (ViewState["date_change"] == null || ViewState["date_change"] != null)
                                  
                                    {
                                        txtetc_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                        txtetc_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                    }
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusEtc.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        lblStatusEtc.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusEtc.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;
                                        }
                                        Labeletc.Visible = false;
                                        rbtnconfirmetc.Visible = false;
                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeesetc.Visible = true;
                                        txtfeesetc.Visible = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox7.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {
                                        Labeletc.Visible = true;
                                        rbtnconfirmetc.Visible = true;
                                    }
                                    else
                                    {
                                        Labeletc.Visible = false;
                                        rbtnconfirmetc.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[i]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddretc_RoomType, dsbkk);
                                }
                            }
                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);
                            if (dt1.Rows.Count != 0)
                            {
                               
                            }

                            foreach (GridViewRow item in GridView6.Rows)
                            {

                                DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                                DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtetc_CheckIn.Text, txtetc_CheckOut.Text);
                                ListItemCollection listbkk = new ListItemCollection();
                                for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                                {
                                    ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                    listbkk.Add(listitem);

                                }
                                DDC7.DDList.DataSource = listbkk;
                                DDC7.DDList.DataTextField = "Text";
                                DDC7.DDList.DataValueField = "Value";
                                DDC7.DDList.DataBind();

                                Label meal = (Label)item.FindControl("lblSS_etc_packageDetails");

                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Hua Hin")
                                        {
                                            CheckBox chk = (CheckBox)item.FindControl("cb_etc_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtssetcfees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView6.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView6.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtetcssdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_etc_date");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Hua Hin");

                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drphua = (DropDownList)item.FindControl("DropDownList7");
                                            drphua.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
                                            txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                            DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Hua Hin")
                                                        {
                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk7 = setchk7 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                              
                                                            }
                                                        }

                                                    }
                                                    setchk7 = setchk7.Substring(1);
                                                    DDC7.SetCheckBoxValues(setchk7);
                                                    setchk7 = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Hua Hin")
                                            {
                                                CheckBox chk = (CheckBox)item.FindControl("cb_etc_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtssetcfees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView6.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView6.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtetcssdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_etc_date");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Hua Hin");

                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drphua = (DropDownList)item.FindControl("DropDownList7");
                                                drphua.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
                                                txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                                DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Hua Hin")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk7 = setchk7 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                  
                                                                }
                                                            }

                                                        }
                                                        setchk7 = setchk7.Substring(1);
                                                        DDC7.SetCheckBoxValues(setchk7);
                                                        setchk7 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /****************************************************** KANCHANBURI ***************************************************************/

                        if (word == "Kanchanburi")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusSS.Visible = true;
                                lblStatusSs.Visible = true;
                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked")
                            {

                            }

                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    if (dt1.Rows[i]["CHAIN_NAME"].ToString() != "")
                                    {
                                        ddrss_HotelName.SelectedValue = dt1.Rows[i]["CHAIN_NAME"].ToString();
                                        ddrss_RoomType.SelectedValue = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();
                                    }

                                    if (ViewState["date_change"] == null || ViewState["date_change"] != null)
                                   
                                    {
                                        txtss_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                        txtss_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                    }
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusSs.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        lblStatusSs.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusSs.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;
                                        }
                                        Labelss.Visible = false;
                                        rbtnconfirmss.Visible = false;
                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeesss.Visible = true;
                                        txtfeesss.Visible = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox8.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {
                                        Labelss.Visible = true;
                                        rbtnconfirmss.Visible = true;
                                    }
                                    else
                                    {
                                        Labelss.Visible = false;
                                        rbtnconfirmss.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[i]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddrss_RoomType, dsbkk);
                                }
                            }
                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);
                            if (dt1.Rows.Count != 0)
                            {
                               
                            }

                            foreach (GridViewRow item in GridView7.Rows)
                            {

                                DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                                DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtss_CheckIn.Text, txtss_CheckOut.Text);
                                ListItemCollection listbkk = new ListItemCollection();
                                for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                                {
                                    ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                    listbkk.Add(listitem);

                                }
                                DDC8.DDList.DataSource = listbkk;
                                DDC8.DDList.DataTextField = "Text";
                                DDC8.DDList.DataValueField = "Value";
                                DDC8.DDList.DataBind();

                                Label meal = (Label)item.FindControl("lblSS_s_packageDetails");
                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Kanchanburi")
                                        {
                                            CheckBox chk = (CheckBox)item.FindControl("cb_s_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtssssfees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView7.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView7.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtssssdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_s_date");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Kanchanburi");

                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                              
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drpss = (DropDownList)item.FindControl("DropDownList8");
                                            drpss.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
                                            txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                            DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Kanchanburi")
                                                        {
                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk8 = setchk8 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                               
                                                            }
                                                        }
                                                    }
                                                    setchk8 = setchk8.Substring(1);
                                                    DDC8.SetCheckBoxValues(setchk8);
                                                    setchk8 = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Kanchanburi")
                                            {
                                                CheckBox chk = (CheckBox)item.FindControl("cb_s_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtssssfees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView7.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView7.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtssssdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_s_date");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Kanchanburi");

                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                    
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drpss = (DropDownList)item.FindControl("DropDownList8");
                                                drpss.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
                                                txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                                DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Kanchanburi")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk8 = setchk8 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                  
                                                                }
                                                            }
                                                        }
                                                        setchk8 = setchk8.Substring(1);
                                                        DDC8.SetCheckBoxValues(setchk8);
                                                        setchk8 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /****************************************************** CHIANGRAI ***************************************************************/

                        if (word == "Chingrai")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusSPS.Visible = true;
                                lblStatusSps.Visible = true;
                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked")
                            {

                            }

                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    if (dt1.Rows[i]["CHAIN_NAME"].ToString() != "")
                                    {
                                        ddrsps_HotelName.SelectedValue = dt1.Rows[i]["CHAIN_NAME"].ToString();
                                        ddrsps_RoomType.SelectedValue = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();
                                    }

                                    if (ViewState["date_change"] == null || ViewState["date_change"] != null)
                                   
                                    {
                                        txtsps_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                        txtsps_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                    }
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusSps.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        lblStatusSps.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusSps.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;
                                        }
                                        Labelsps.Visible = false;
                                        rbtnconfirsps.Visible = false;
                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeessps.Visible = true;
                                        txtfeessps.Visible = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox9.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {
                                        Labelsps.Visible = true;
                                        rbtnconfirsps.Visible = true;
                                    }
                                    else
                                    {
                                        Labelsps.Visible = false;
                                        rbtnconfirsps.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[i]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddrsps_RoomType, dsbkk);
                                }
                            }
                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);
                            if (dt1.Rows.Count != 0)
                            {
                               
                            }

                            foreach (GridViewRow item in GridView8.Rows)
                            {
                                DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                                DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtsps_CheckIn.Text, txtsps_CheckOut.Text);
                                ListItemCollection listbkk = new ListItemCollection();
                                for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                                {
                                    ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                    listbkk.Add(listitem);

                                }
                                DDC9.DDList.DataSource = listbkk;
                                DDC9.DDList.DataTextField = "Text";
                                DDC9.DDList.DataValueField = "Value";
                                DDC9.DDList.DataBind();

                                Label meal = (Label)item.FindControl("lblSS_sps_packageDetails");
                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Chingrai")
                                        {
                                            CheckBox chk = (CheckBox)item.FindControl("cb_sps_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtssspsfees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView8.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView8.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtspsssdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_sps_date");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Kanchanburi");

                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drpsps = (DropDownList)item.FindControl("DropDownList9");
                                            drpsps.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
                                            txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                            DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Chingrai")
                                                        {
                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk9 = setchk9 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                              
                                                            }
                                                        }
                                                    }
                                                    setchk9 = setchk9.Substring(1);
                                                    DDC9.SetCheckBoxValues(setchk9);
                                                    setchk9 = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Chingrai")
                                            {
                                                CheckBox chk = (CheckBox)item.FindControl("cb_sps_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtssspsfees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView8.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView8.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtspsssdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_sps_date");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Kanchanburi");

                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drpsps = (DropDownList)item.FindControl("DropDownList9");
                                                drpsps.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();

                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
                                                txtmeal.Text = dtbkk.Rows[i]["NO_OF_MEALS"].ToString();
                                                DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Chingrai")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk9 = setchk9 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                   
                                                                }
                                                            }
                                                        }
                                                        setchk9 = setchk9.Substring(1);
                                                        DDC9.SetCheckBoxValues(setchk9);
                                                        setchk9 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /****************************************************** EXTRA HOTEL  ***************************************************************/

                        if (word == "Phi Phi Island")
                        {
                            if (empflag != "A")
                            {
                                LabelstatusZZ.Visible = true;
                                lblStatusZz.Visible = true;
                            }
                            if (empflag == "E" && Session["editorderstatus"].ToString() == "Booked")
                            {

                            }

                            for (int i = 0; i < dt1.Rows.Count; i++)
                            {
                                if (word == dt1.Rows[i]["CITY_NAME"].ToString())
                                {
                                    ddrzz_HotelName.SelectedValue = dt1.Rows[i]["CHAIN_NAME"].ToString();

                                    ddrzz_RoomType.SelectedValue = dt1.Rows[i]["ROOM_TYPE_NAME"].ToString();

                                    if (ViewState["date_change"] == null || ViewState["date_change"] != null)
                                   
                                    {
                                        txtzz_CheckIn.Text = dt1.Rows[i]["FROM_DATE"].ToString();
                                        txtzz_CheckOut.Text = dt1.Rows[i]["TO_DATE"].ToString();
                                    }
                                    if (dt1.Rows[i]["HOTEL_STATUS"].ToString() == "")
                                    {
                                        lblStatusZz.Text = "Not Confirmed";
                                    }
                                    else
                                    {
                                        lblStatusZz.Text = dt1.Rows[i]["HOTEL_STATUS"].ToString();
                                        if (lblStatusZz.Text == "Confirmed" && empflag == "E")
                                        {
                                            Button2.Visible = true;
                                        }
                                        Labelzz.Visible = false;
                                        rbtnconfirmzz.Visible = false;
                                    }
                                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                    {
                                        lblfeeszz.Visible = true;
                                        txtfeeszz.Visible = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && Session["editorderstatus"].ToString() == "Quoted")
                                    {
                                        CheckBox10.Checked = true;
                                    }
                                    if (dt1.Rows[i]["PACKAGE_FLAG"].ToString() == "True" && empflag == "E" && (Session["editorderstatus"].ToString() == "Booked" || Session["editorderstatus"].ToString() == "To Be Reconfirmed"))
                                    {
                                        Labelzz.Visible = true;
                                        rbtnconfirmzz.Visible = true;
                                    }
                                    else
                                    {
                                        Labelzz.Visible = false;
                                        rbtnconfirmzz.Visible = false;
                                    }
                                    DataSet dsbkk = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", dt1.Rows[i]["CHAIN_NAME"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString());
                                    binddropdownlist(ddrzz_RoomType, dsbkk);
                                }
                            }
                            DataTable dtbkk = objHotelStoreProcedure.fetchsiteseeingPackageforedit("FETCH_ALL_DATA_FOR_SITESEEING_EDIT", quoteid);
                            if (dt1.Rows.Count != 0)
                            {

                            }

                            foreach (GridViewRow item in GridView9.Rows)
                            {
                                DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                                DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtzz_CheckIn.Text, txtzz_CheckOut.Text);
                                ListItemCollection listbkk = new ListItemCollection();
                                for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                                {
                                    ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                    listbkk.Add(listitem);

                                }
                                DDC10.DDList.DataSource = listbkk;
                                DDC10.DDList.DataTextField = "Text";
                                DDC10.DDList.DataValueField = "Value";
                                DDC10.DDList.DataBind();

                                Label meal = (Label)item.FindControl("lblSS_zz_packageDetails");
                                for (int i = 0; i < dtbkk.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            CheckBox chk = (CheckBox)item.FindControl("cb_zz_select");
                                            chk.Checked = true;
                                            TextBox id2 = (TextBox)item.FindControl("txtsszzfees");

                                            if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView9.Columns[9].Visible = true;
                                                id2.Visible = true;
                                            }
                                            DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                            if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                            {
                                                GridView9.Columns[8].Visible = true;
                                                TextBox txtduedate = (TextBox)item.FindControl("txtphuzzdate");
                                                txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                txtduedate.Visible = true;
                                            }
                                            TextBox txtdate = (TextBox)item.FindControl("txtSS_zz_date");
                                            txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                            DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Phi Phi Island");

                                            DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                            for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                            {
                                                if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                {
                                                    drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                }
                                            }

                                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
                                            drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                            DropDownList drpzz = (DropDownList)item.FindControl("DropDownList10");
                                            drpzz.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                            DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                                            if (int.Parse(txtmeal.Text) > 1)
                                            {
                                                if (dtbkk.Rows.Count != 0)
                                                {
                                                    ListItemCollection list = new ListItemCollection();
                                                    for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                    {
                                                        if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Phi Phi Island")
                                                        {
                                                            if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                            {
                                                                setchk10 = setchk10 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                               
                                                            }
                                                        }
                                                    }
                                                    setchk10 = setchk10.Substring(1);
                                                    DDC10.SetCheckBoxValues(setchk10);
                                                    setchk10 = "";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dtbkk.Rows[i]["CITY_NAME"].ToString() != dtbkk.Rows[i - 1]["CITY_NAME"].ToString() || dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() != dtbkk.Rows[i - 1]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                        {
                                            if (meal.Text == dtbkk.Rows[i]["SIGHT_SEEING_PACKAGE_NAME"].ToString() && dtbkk.Rows[i]["CITY_NAME"].ToString() == "Phi Phi Island")
                                            {
                                                CheckBox chk = (CheckBox)item.FindControl("cb_zz_select");
                                                chk.Checked = true;
                                                TextBox id2 = (TextBox)item.FindControl("txtsszzfees");

                                                if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView9.Columns[9].Visible = true;
                                                    id2.Visible = true;
                                                }
                                                DataTable dtdate = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                                                if (Session["editorderstatus"].ToString() == dtdate.Rows[0]["ORDER_STATUS_NAME"].ToString())
                                                {
                                                    GridView9.Columns[8].Visible = true;
                                                    TextBox txtduedate = (TextBox)item.FindControl("txtphuzzdate");
                                                    txtduedate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                    txtduedate.Visible = true;
                                                }
                                                TextBox txtdate = (TextBox)item.FindControl("txtSS_zz_date");
                                                txtdate.Text = dtbkk.Rows[i]["DATE"].ToString();
                                                DataSet ds1 = objHotelStoreProcedure.getdate(meal.Text, txtdate.Text, "Phi Phi Island");

                                                DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                                for (int j = 0; j < ds1.Tables[1].Rows.Count; j++)
                                                {
                                                    if (ds1.Tables[1].Rows[j]["AutoSearchResult"] != "" || ds1.Tables[1].Rows[j]["AutoSearchResult"] != null)
                                                    {
                                                        drptime.Items.Add(ds1.Tables[1].Rows[j]["AutoSearchResult"].ToString());
                                                    }
                                                }

                                                TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
                                                drptime.Text = dtbkk.Rows[i]["TIME"].ToString();
                                                DropDownList drpzz = (DropDownList)item.FindControl("DropDownList10");
                                                drpzz.SelectedValue = dtbkk.Rows[i]["SIC_PVT_FLAG"].ToString();
                                                DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                                                if (int.Parse(txtmeal.Text) > 1)
                                                {
                                                    if (dtbkk.Rows.Count != 0)
                                                    {
                                                        ListItemCollection list = new ListItemCollection();
                                                        for (int j = i + 1; j < dtbkk.Rows.Count; j++)
                                                        {
                                                            if (dtbkk.Rows[j]["CITY_NAME"].ToString() == "Phi Phi Island")
                                                            {
                                                                if (meal.Text == dtbkk.Rows[j]["SIGHT_SEEING_PACKAGE_NAME"].ToString())
                                                                {
                                                                    setchk10 = setchk10 + "," + Convert.ToString(dtbkk.Rows[j]["DATE"]);
                                                                 
                                                                }
                                                            }
                                                        }
                                                        setchk10 = setchk10.Substring(1);
                                                        DDC10.SetCheckBoxValues(setchk10);
                                                        setchk10 = "";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        DataTable dttra = objHotelStoreProcedure.fetchTransferPackageforedit("FETCH_ALL_DATA_FOR_TRANSFERPACKAGE_EDIT_NEW", quoteid);
                        if (dttra.Rows.Count != 0)
                        {

                            if (ViewState["date_change"] == null)
                           
                            {
                                FillTransferPackageDetails();
                            }
                        }
                    }

                    if (ViewState["date_change"] != null)
                    {
                        DateChange();
                    }

                    lnkbtn.HRef = "~/Views/FIT/Quotes/" + quoteid + "/Quotation.pdf";
                    lnkbtn.Attributes.Add("style", "display");
                    UpdatePanel1.Update();
                    DataTable DTbook = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                    DataTable DTquote = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "2");
                    if (Session["orderstatus"].ToString() == DTquote.Rows[0]["ORDER_STATUS_NAME"].ToString())
                    {
                        checkboxes_of_hotels();
                        cc.Attributes.Add("style", "display");
                        Buttonsend.Attributes.Add("style", "display");
                        btnUpdate.Attributes.Add("style", "display:none");
                        UpdatePanel1.Update();
                    }
                    if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString() && ViewState["date_change"] == null)
                    {
                        btnGetQuote.Visible = false;
                        btnBook.Visible = false;
                        Button8.Attributes.Add("style", "display");
                        btnUpdate.Attributes.Add("style", "display");
                        UpdatePanel1.Update();
                    }
                    DataTable DTtobe = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "4");

                    if (Session["orderstatus"].ToString() == DTtobe.Rows[0]["ORDER_STATUS_NAME"].ToString())
                    {
                        Td2.Attributes.Add("style", "display:none");
                        Td1.Attributes.Add("style", "display:none");
                        btnGetQuote.Visible = false;
                        btnBook.Visible = false;
                        Button2.Visible = true;
                        btnUpdate.Attributes.Add("style", "display");
                        UpdatePanel1.Update();
                    }
                    DataTable DTreCON = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "5");
                    if (Session["orderstatus"].ToString() == DTreCON.Rows[0]["ORDER_STATUS_NAME"].ToString())
                    {
                        Td2.Attributes.Add("style", "display:none");
                        Td1.Attributes.Add("style", "display:none");
                        btnGetQuote.Visible = false;
                        Button2.Visible = false;
                        btnBook.Visible = false;
                        btnUpdate.Visible = false;
                        UpdatePanel1.Update();
                    }
                    if (Session["orderstatus"].ToString() == "Canceled")
                    {
                        btnGetQuote.Visible = false;
                        btnBook.Visible = false;
                        Button2.Visible = false;

                        btnRemoveTp.Visible = false;
                        //btnArrivalDate.Visible = false;
                        //btnDepartureDate.Visible = false;

                        btnUpdate.Visible = false;
                    }
                    DataSet dsaddservice = objHotelStoreProcedure.fetch_additional_service(Session["updateid"].ToString(), Session["tour"].ToString());
                    int count = dsaddservice.Tables[0].Rows.Count;

                    for (int i = 0; i < count; i++)
                    {
                        if (i == 0)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                                td_duedate.Attributes.Add("style", "display");
                                txt_duedate1.Visible = true;
                                Button9.Attributes.Add("style", "display");
                            }

                            TextBox5.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList11.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList2.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox42.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox43.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox44.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox45.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox46.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox47.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();
                        }
                        else if (i == 1)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                                
                                txt_duedate2.Visible = true;
                            }

                            row2.Attributes.Add("style", "display");
                            btnadd2.Attributes.Add("style", "display:none");
                            btnadd3.Attributes.Add("style", "display");
                            btnremove2.Attributes.Add("style", "display");
                            TextBox6.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList12.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList21.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox7.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox24.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox25.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox48.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox49.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox50.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();
                        }
                        else if (i == 2)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                                
                                txt_duedate3.Visible = true;
                            }

                            row3.Attributes.Add("style", "display");
                            btnadd3.Attributes.Add("style", "display:none");
                            btnadd4.Attributes.Add("style", "display");
                            btnremove2.Attributes.Add("style", "display:none");
                            btnremove3.Attributes.Add("style", "display");
                            TextBox8.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList13.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList22.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox9.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox26.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox27.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox51.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox52.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox53.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();

                        }
                        else if (i == 3)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                                
                                txt_duedate4.Visible = true;
                            }

                            row4.Attributes.Add("style", "display");
                            btnadd4.Attributes.Add("style", "display:none");
                            btnadd5.Attributes.Add("style", "display");
                            btnremove4.Attributes.Add("style", "display");
                            btnremove3.Attributes.Add("style", "display:none");
                            TextBox10.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList14.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList23.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox11.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox28.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox29.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox54.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox55.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox56.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();
                        }
                        else if (i == 4)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                               
                                txt_duedate5.Visible = true;
                            }

                            row5.Attributes.Add("style", "display");
                            btnadd5.Attributes.Add("style", "display:none");
                            btnadd6.Attributes.Add("style", "display");
                            btnremove5.Attributes.Add("style", "display");
                            btnremove4.Attributes.Add("style", "display:none");
                            TextBox12.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList15.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList24.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox13.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox30.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox31.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox57.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox58.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox59.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();
                        }
                        else if (i == 5)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                               
                                txt_duedate6.Visible = true;
                            }

                            row6.Attributes.Add("style", "display");
                            btnadd6.Attributes.Add("style", "display:none");
                            btnadd7.Attributes.Add("style", "display");
                            btnremove6.Attributes.Add("style", "display");
                            btnremove5.Attributes.Add("style", "display:none");
                            TextBox14.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList16.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList25.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox15.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox32.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox33.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox60.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox61.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox62.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();
                        }
                        else if (i == 6)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                              
                                txt_duedate7.Visible = true;
                            }

                            row7.Attributes.Add("style", "display");
                            btnadd7.Attributes.Add("style", "display:none");
                            btnadd8.Attributes.Add("style", "display");
                            btnremove7.Attributes.Add("style", "display");
                            btnremove6.Attributes.Add("style", "display:none");
                            TextBox16.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList17.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList26.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox17.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox34.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox35.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox63.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox64.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox65.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();

                        }
                        else if (i == 7)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                              
                                txt_duedate8.Visible = true;
                            }

                            row8.Attributes.Add("style", "display");
                            btnadd8.Attributes.Add("style", "display:none");
                            btnadd9.Attributes.Add("style", "display");
                            btnremove8.Attributes.Add("style", "display");
                            btnremove7.Attributes.Add("style", "display:none");
                            TextBox18.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList18.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList27.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox19.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox36.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox37.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox66.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox67.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox68.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();

                        }
                        else if (i == 8)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                               
                                txt_duedate9.Visible = true;
                            }

                            row9.Attributes.Add("style", "display");
                            btnadd9.Attributes.Add("style", "display:none");
                            btnadd10.Attributes.Add("style", "display");
                            btnremove9.Attributes.Add("style", "display");
                            btnremove8.Attributes.Add("style", "display:none");
                            TextBox20.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList19.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList28.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox21.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox38.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox39.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox69.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox70.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox71.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();

                        }
                        else if (i == 9)
                        {
                            if (Session["orderstatus"].ToString() == DTbook.Rows[0]["ORDER_STATUS_NAME"].ToString())
                            {
                               
                                txt_duedate10.Visible = true;
                            }

                            row10.Attributes.Add("style", "display");
                            btnadd10.Attributes.Add("style", "display:none");
                            btnremove10.Attributes.Add("style", "display");
                            btnremove9.Attributes.Add("style", "display:none");
                            TextBox22.Text = dsaddservice.Tables[0].Rows[i]["SERVICE_DESCRIPTION"].ToString();
                            DropDownList20.Text = dsaddservice.Tables[0].Rows[i]["CHAIN_NAME"].ToString();
                            DropDownList29.Text = dsaddservice.Tables[0].Rows[i]["SIC_PVT_FLAG"].ToString();
                            TextBox23.Text = dsaddservice.Tables[0].Rows[i]["DATE"].ToString();
                            TextBox40.Text = dsaddservice.Tables[0].Rows[i]["NO_OF_PAX"].ToString();
                            TextBox41.Text = dsaddservice.Tables[0].Rows[i]["NET_PRICE"].ToString();
                            TextBox72.Text = dsaddservice.Tables[0].Rows[i]["SELL_PRICE"].ToString();
                            TextBox73.Text = dsaddservice.Tables[0].Rows[i]["FROM_DETAIL"].ToString();
                            TextBox74.Text = dsaddservice.Tables[0].Rows[i]["TO_DETAIL"].ToString();
                        }

                    }
                    UpdatePanel1.Update();

                }
                else
                {
                    FillAllDetails();

                }
                DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Bangkok", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet ds11 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Pattaya", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet ds2 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Phuket", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet ds3 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Krabi", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet ds4 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Samui", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet ds5 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Chiangmai", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet ds6 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Hua Hin", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet ds7 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Kanchanburi", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet ds8 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Chiangrai", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet ds9 = objHotelStoreProcedure.fetchComboDataforHotel("FETCH_HOTEL_NAME_FOR_FIT_CITY_ADMIN_WISE", "Phi Phi Island", Session["fromdate"].ToString(), Session["todate"].ToString());
                DataSet dsadditional = objHotelStoreProcedure.fetchComboData("GET_CHAIN_NAME_FOR_ADDITIONAL_SERVICES", "");
                binddropdownlist(DropDownList11, dsadditional);
                binddropdownlist(DropDownList12, dsadditional);
                binddropdownlist(DropDownList13, dsadditional);
                binddropdownlist(DropDownList14, dsadditional);
                binddropdownlist(DropDownList15, dsadditional);
                binddropdownlist(DropDownList16, dsadditional);
                binddropdownlist(DropDownList17, dsadditional);
                binddropdownlist(DropDownList18, dsadditional);
                binddropdownlist(DropDownList19, dsadditional);
                binddropdownlist(DropDownList20, dsadditional);
                binddropdownlist(ddrbkk_HotelName, ds0);
                binddropdownlist(ddrpty_HotelName, ds11);
                binddropdownlist(ddrphu_HotelName, ds2);
                binddropdownlist(ddrkbv_HotelName, ds3);
                binddropdownlist(ddrusm_HotelName, ds4);
                binddropdownlist(ddrcnx_HotelName, ds5);
                binddropdownlist(ddretc_HotelName, ds6);
                binddropdownlist(ddrss_HotelName, ds7);
                binddropdownlist(ddrsps_HotelName, ds8);
                binddropdownlist(ddrzz_HotelName, ds9);
            }
        }
        #endregion

        protected void FillAllDetails()
        {
            if (Session["singleroom"] != "")
            {
                noof_roomslbl += Session["singleroom"].ToString() + " " + "Single";
            }
            if (Session["doubleroom"] != "")
            {
                noof_roomslbl += "+" + Session["doubleroom"].ToString() + " " + "Double";
            }
            if (Session["tripleroom"] != "")
            {
                noof_roomslbl += "+" + Session["tripleroom"].ToString() + " " + "Triple";
            }

            checkboxes_of_hotels();
            DataTable dt = objHotelStoreProcedure.fetchpacageid(package_id);
           
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                cityname += "," + dt.Rows[i]["CITY_NAME"].ToString();
            }
            if (package_id == 6)
            {
                Label28.Visible = true;
                Label28.Text = "Please select Bangkok Hotels First";
            }
            if (package_id == 33)
            {
                Label28.Visible = true;
                Label28.Text = "Please select Krabi Hotels First";
            }
            if (package_id == 34)
            {
                Label28.Visible = true;
                Label28.Text = "Please select Phi Phi IsLand Hotels First";

                Label107.Text = "Morning Boat - 0900 hrs - Pick up from hotel No later than 0800 hrs and If Onward Flight to be Later than 1400 hrs";
                Label107.Visible = true;
                Label108.Text = "Afternoon Boat - 1400 hrs - Pick Up from hotel No later than 1300 hrs and If Onward Flight to be Later than 1900 hrs";
                Label108.Visible = true;
            }
            if (package_id == 35)
            {
                Label107.Text = "Morning Boat - 0830 hrs - Pick up from hotel No later than 0700 hrs and from Airport No Later than 1500 hrs";
                Label107.Visible = true;
                Label108.Text = "Afternoon Boat - 1330 hrs - Pick Up from hotel No later than 1200 hrs and from Airport No Later than 1130 hrs";
                Label108.Visible = true;
            }
            string str1 = cityname;
            string[] words = str1.Split(',');

            foreach (string word in words)
            {
                if (word == "Pattaya")
                {
                    
                    if (package_id == 6)
                    {
                        txtpty_CheckOut.Text = Session["todate"].ToString();
                    }
                    else
                    {
                        txtpty_CheckIn.Text = Session["fromdate"].ToString();
                        txtpty_CheckOut.Text = Session["todate"].ToString();
                    }



                    ptydiv.Visible = true;
                    upHotelPty.Visible = true;
                    lblPTY_bkk_header.Visible = true;
                  
                    upSSPty.Visible = true;
                    Div2.Visible = true;

                    DataTable dtpty = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
                  
                    GV_Result.DataSource = dtpty;
                    GV_Result.DataBind();



                    foreach (GridViewRow item in GV_Result.Rows)
                    {


                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList2");

                      

                        Label meal = (Label)item.FindControl("lblpty_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_PtynoofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL2");
                            ddl1.Visible = false;
                        }
                      
                        DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtpty_CheckIn.Text, txtpty_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC2.DDList.DataSource = list;
                            DDC2.DDList.DataTextField = "Text";
                            DDC2.DDList.DataValueField = "Value";
                            DDC2.DDList.DataBind();
                        }
                        if (dtpty.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtpty.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtpty.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }

                        if (dtpty.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtpty.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtpty.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }
                    }
                    lblpty_Noof_Romms.Text = noof_roomslbl;
                }

                if (word == "Phuket")
                {
                    if (package_id == 33 && package_id == 34)
                    {
                        txtphu_CheckOut.Text = Session["todate"].ToString();

                        txtpty_CheckIn.Enabled = false;
                        txtpty_CheckOut.Enabled = false;
                    }
                    else if (txtpty_CheckIn.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = Session["todate"].ToString();
                        

                    }
                    else
                    {
                        txtphu_CheckIn.Text = Session["fromdate"].ToString();
                        txtphu_CheckOut.Text = Session["todate"].ToString();
                    }

                    phudiv.Visible = true;
                    upHotelPhuket.Visible = true;
                    lblSS_PHU_header.Visible = true;
                    
                    upSS_phuket.Visible = true;
                    Div3.Visible = true;

                    DataTable dtphuket = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
                    
                    GridView2.DataSource = dtphuket;
                    GridView2.DataBind();


                    foreach (GridViewRow item in GridView2.Rows)
                    {
                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList3");


                        if (dtphuket.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtphuket.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtphuket.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }

                        if (dtphuket.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtphuket.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtphuket.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }

                        Label meal = (Label)item.FindControl("lblphu_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL3");
                            ddl1.Visible = false;
                        }
                     
                        DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtphu_CheckIn.Text, txtphu_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC3.DDList.DataSource = list;
                            DDC3.DDList.DataTextField = "Text";
                            DDC3.DDList.DataValueField = "Value";
                            DDC3.DDList.DataBind();
                        }


                    }
                    txtphu_noofrooms.Text = noof_roomslbl;
                }

                if (word == "Krabi")
                {

                    if (package_id == 33)
                    {
                        txtkbv_CheckIn.Text = Session["fromdate"].ToString();

                        txtkbv_CheckIn.Enabled = false;

                    }
                    else if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                       
                        txtkbv_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtkbv_CheckIn.Text = Session["fromdate"].ToString();
                        txtkbv_CheckOut.Text = Session["todate"].ToString();
                    }

                    bkvdiv.Visible = true;
                    upHotelkBV.Visible = true;
                    lblSS_Kbv.Visible = true;
                 
                    upSS_Kbv.Visible = true;
                    Div4.Visible = true;

                    DataTable dtkbv = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
                   
                    GridView3.DataSource = dtkbv;
                    GridView3.DataBind();


                    foreach (GridViewRow item in GridView3.Rows)
                    {

                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList4");


                        if (dtkbv.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtkbv.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtkbv.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }

                        if (dtkbv.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtkbv.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtkbv.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }

                        Label meal = (Label)item.FindControl("lblkbv_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL4");
                            ddl1.Visible = false;
                        }
                        
                        DDL4 = (MulticheckDropdown)item.FindControl("DDL4");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtkbv_CheckIn.Text, txtkbv_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC4.DDList.DataSource = list;
                            DDC4.DDList.DataTextField = "Text";
                            DDC4.DDList.DataValueField = "Value";
                            DDC4.DDList.DataBind();
                        }
                    }
                    lblkbv_NoofRooms.Text = noof_roomslbl;
                }

                if (word == "Samui")
                {
                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                       
                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtusm_CheckIn.Text = Session["fromdate"].ToString();
                        txtusm_CheckOut.Text = Session["todate"].ToString();
                    }

                    usmdiv.Visible = true;
                    upHotelUsm.Visible = true;
                    lblSS_usm.Visible = true;
                   
                    upSS_usm.Visible = true;
                    Div5.Visible = true;

                    DataTable dtusm = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
               
                    GridView4.DataSource = dtusm;
                    GridView4.DataBind();


                    foreach (GridViewRow item in GridView4.Rows)
                    {
                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList5");
                        if (dtusm.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtusm.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtusm.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }

                        if (dtusm.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtusm.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtusm.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }

                        Label meal = (Label)item.FindControl("lblusm_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_usm_noofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL5");
                            ddl1.Visible = false;
                        }
                       
                        DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtusm_CheckIn.Text, txtusm_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC5.DDList.DataSource = list;
                            DDC5.DDList.DataTextField = "Text";
                            DDC5.DDList.DataValueField = "Value";
                            DDC5.DDList.DataBind();
                        }
                    }
                    txtusm_NoofRooms.Text = noof_roomslbl;
                }

                if (word == "Chiangmai")
                {

                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                        
                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtcnx_CheckIn.Text = Session["fromdate"].ToString();
                        txtcnx_CheckOut.Text = Session["todate"].ToString();
                    }


                    cnxdiv.Visible = true;
                    uphotelCnx.Visible = true;
                    lblSScnx.Visible = true;
                    
                    upSS_cnx.Visible = true;
                    Div6.Visible = true;

                    DataTable dtcnx = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
                   
                    GridView5.DataSource = dtcnx;
                    GridView5.DataBind();


                    foreach (GridViewRow item in GridView5.Rows)
                    {
                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList6");
                        if (dtcnx.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtcnx.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtcnx.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }

                        if (dtcnx.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtcnx.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtcnx.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }



                        Label meal = (Label)item.FindControl("lblcnx_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL6");
                            ddl1.Visible = false;
                        }
                       
                        DDL6 = (MulticheckDropdown)item.FindControl("DDL6");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtcnx_CheckIn.Text, txtcnx_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC6.DDList.DataSource = list;
                            DDC6.DDList.DataTextField = "Text";
                            DDC6.DDList.DataValueField = "Value";
                            DDC6.DDList.DataBind();
                        }
                    }
                    txtcnx_NoofRooms.Text = noof_roomslbl;
                }

                if (word == "Hua Hin")
                {
                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                       
                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = "";
                        txtetc_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtetc_CheckIn.Text = Session["fromdate"].ToString();
                        txtetc_CheckOut.Text = Session["todate"].ToString();
                    }

                    etcdiv.Visible = true;
                    uphotelEtc.Visible = true;
                    lblSS_etc.Visible = true;
                  
                    upSS_Etc.Visible = true;
                    Div7.Visible = true;

                    DataTable dtetc = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
                 
                    GridView6.DataSource = dtetc;
                    GridView6.DataBind();


                    foreach (GridViewRow item in GridView6.Rows)
                    {

                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList7");
                        if (dtetc.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtetc.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtetc.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }
                        if (dtetc.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtetc.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtetc.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }
                        Label meal = (Label)item.FindControl("lbletc_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL7");
                            ddl1.Visible = false;
                        }
                      
                        DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtetc_CheckIn.Text, txtetc_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC7.DDList.DataSource = list;
                            DDC7.DDList.DataTextField = "Text";
                            DDC7.DDList.DataValueField = "Value";
                            DDC7.DDList.DataBind();
                        }
                    }
                    txtetc_NoofRooms.Text = noof_roomslbl;
                }

                if (word == "Kanchanburi")
                {
                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "" || txtetc_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                     
                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = "";
                        txtetc_CheckOut.Text = "";
                        txtss_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtss_CheckIn.Text = Session["fromdate"].ToString();
                        txtss_CheckOut.Text = Session["todate"].ToString();
                    }

                    ssdiv.Visible = true;
                    upHotelSS.Visible = true;
                    lblSS_s.Visible = true;
                  
                    upSS_s.Visible = true;
                    Div8.Visible = true;

                    DataTable dtss = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
                    
                    GridView7.DataSource = dtss;
                    GridView7.DataBind();

                    foreach (GridViewRow item in GridView7.Rows)
                    {
                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList8");
                        if (dtss.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtss.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtss.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }

                        if (dtss.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtss.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtss.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }
                        Label meal = (Label)item.FindControl("lblss_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL8");
                            ddl1.Visible = false;
                        }
                     
                        DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtss_CheckIn.Text, txtss_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC8.DDList.DataSource = list;
                            DDC8.DDList.DataTextField = "Text";
                            DDC8.DDList.DataValueField = "Value";
                            DDC8.DDList.DataBind();
                        }
                    }
                    txtss_NoofRooms.Text = noof_roomslbl;
                }

                if (word == "Chingrai")
                {

                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "" || txtetc_CheckOut.Text != "" || txtss_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = "";
                        txtetc_CheckOut.Text = "";
                        txtss_CheckOut.Text = "";
                        txtsps_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtsps_CheckIn.Text = Session["fromdate"].ToString();
                        txtsps_CheckOut.Text = Session["todate"].ToString();
                    }

                    spsdiv.Visible = true;
                    uphotelsps.Visible = true;
                    lblSS_sps.Visible = true;
                  
                    upSS_sps.Visible = true;
                    Div9.Visible = true;

                    DataTable dtsps = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
                   
                    GridView8.DataSource = dtsps;
                    GridView8.DataBind();


                    foreach (GridViewRow item in GridView8.Rows)
                    {
                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList9");
                        if (dtsps.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtsps.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtsps.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }
                        if (dtsps.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtsps.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtsps.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }
                        Label meal = (Label)item.FindControl("lblsps_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL9");
                            ddl1.Visible = false;
                        }
                        
                        DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtsps_CheckIn.Text, txtsps_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC9.DDList.DataSource = list;
                            DDC9.DDList.DataTextField = "Text";
                            DDC9.DDList.DataValueField = "Value";
                            DDC9.DDList.DataBind();
                        }
                    }
                    txtsps_NoofRooms.Text = noof_roomslbl;
                }

                if (word == "Phi Phi Island")
                {
                    if (package_id == 34)
                    {
                        txtzz_CheckIn.Text = Session["fromdate"].ToString();
                        txtzz_CheckIn.Enabled = false;
                    }
                    else if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "" || txtetc_CheckOut.Text != "" || txtss_CheckOut.Text != "" || txtsps_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = "";
                        txtetc_CheckOut.Text = "";
                        txtss_CheckOut.Text = "";
                        txtsps_CheckOut.Text = "";
                        txtzz_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtzz_CheckIn.Text = Session["fromdate"].ToString();
                        txtzz_CheckOut.Text = Session["todate"].ToString();
                    }
                   

                    zzdiv.Visible = true;
                    uphotelZZ.Visible = true;

                    lblSS_zz.Visible = true;
                    
                    upSS_zz.Visible = true;
                    Div10.Visible = true;

                    DataTable dtzz = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
                   
                    GridView9.DataSource = dtzz;
                    GridView9.DataBind();


                    foreach (GridViewRow item in GridView9.Rows)
                    {
                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList10");
                        if (dtzz.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtzz.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtzz.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }
                        if (dtzz.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtzz.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtzz.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }
                        Label meal = (Label)item.FindControl("lblzz_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL10");
                            ddl1.Visible = false;
                        }
                        
                        DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtzz_CheckIn.Text, txtzz_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC10.DDList.DataSource = list;
                            DDC10.DDList.DataTextField = "Text";
                            DDC10.DDList.DataValueField = "Value";
                            DDC10.DDList.DataBind();
                        }
                    }
                    txtzz_NoofRooms.Text = noof_roomslbl;
                }
                if (word == "Bangkok")
                {
                    if (package_id == 6)
                    {
                        txtbkk_CheckIn.Text = Session["fromdate"].ToString();
                    }
                    else
                    {
                        if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "" || txtetc_CheckOut.Text != "" || txtss_CheckOut.Text != "" || txtsps_CheckOut.Text != "" || txtzz_CheckIn.Text != "")
                        {
                            txtpty_CheckOut.Text = "";
                            txtphu_CheckOut.Text = "";

                            txtkbv_CheckOut.Text = "";
                            txtusm_CheckOut.Text = "";
                            txtcnx_CheckOut.Text = "";
                            txtetc_CheckOut.Text = "";
                            txtss_CheckOut.Text = "";
                            txtsps_CheckOut.Text = "";
                            txtzz_CheckOut.Text = "";
                            txtbkk_CheckOut.Text = Session["todate"].ToString();

                        }
                        else
                        {
                            txtbkk_CheckIn.Text = Session["fromdate"].ToString();
                            txtbkk_CheckOut.Text = Session["todate"].ToString();
                        }
                    }

                    bkkdiv.Visible = true;
                    uphotelBkk.Visible = true;
                    upSSbkk.Visible = true;
                    upSSbkk_Header.Visible = true;
                    Div1.Visible = true;

                    DataTable dtbkk = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);

                    GridView1.DataSource = dtbkk;
                    GridView1.DataBind();


                    foreach (GridViewRow item in GridView1.Rows)
                    {
                        int i = item.DataItemIndex;
                        DropDownList drp = (DropDownList)item.FindControl("DropDownList1");
                        if (dtbkk.Rows[i]["ADULT_SIC_RATE"].ToString() != "" && dtbkk.Rows[i]["ADULT_SIC_RATE"].ToString() != null && dtbkk.Rows[i]["ADULT_SIC_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("SIC");
                        }

                        if (dtbkk.Rows[i]["ADULT_PVT_RATE"].ToString() != "" && dtbkk.Rows[i]["ADULT_PVT_RATE"].ToString() != null && dtbkk.Rows[i]["ADULT_PVT_RATE"].ToString() != "0.00")
                        {

                        }
                        else
                        {
                            drp.Items.Remove("PVT");
                        }

                        Label meal = (Label)item.FindControl("lblbkk_meal");
                        if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                        {
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_Bkk_noofMeals");
                            txtmeal.Visible = false;
                            UserControl ddl1 = (UserControl)item.FindControl("DDL1");
                            ddl1.Visible = false;
                        }
                      
                        DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                        if (package_id != 9 || package_id != 6)
                        {
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtbkk_CheckIn.Text, txtbkk_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);

                            }
                            DDC1.DDList.DataSource = list;
                            DDC1.DDList.DataTextField = "Text";
                            DDC1.DDList.DataValueField = "Value";
                            DDC1.DDList.DataBind();
                        }
                    }
                    lblbkkNoof_Romms.Text = noof_roomslbl;
                }
            }

            DataTable dttp = objHotelStoreProcedure.fetchTransferPackage(Session["fromdate"].ToString(), Session["todate"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), package_id.ToString());
           
            GridView10.DataSource = dttp;
            GridView10.DataBind();

            foreach (GridViewRow item in GridView10.Rows)
            {

                Label chk = (Label)item.FindControl("lbltp_flag");
                Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                if (chk.Text == "A")
                {
                    TextBox date = (TextBox)item.FindControl("txtTPdate");
                    date.Text = Session["fromdate"].ToString();
                    //date.Enabled = false;
                }
                if (chk.Text == "D")
                {
                    TextBox date = (TextBox)item.FindControl("txtTPdate");
                    date.Text = Session["todate"].ToString();
                    //date.Enabled = false;
                }
                DataSet ds0 = objHotelStoreProcedure.transfer_gettime("FETCH_TRANSFER_PACKAGE_TIME", int.Parse(tp_fromto_id.Text), chk.Text, "SIC");
                binddropdownlist(drp_list, ds0);
            }
        }

        protected void dlhoteldetails_ItemDataBound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
        {

            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label l1 = (Label)e.Row.FindControl("lbltp_priceid");
                string strval = l1.Text;

                string title = viewstate;
                if (title == strval)
                {
                    Label l2 = (Label)e.Row.FindControl("lblTPsrno");
                    l2.Visible = false;

                    RadioButton btn = (RadioButton)e.Row.FindControl("rbtnTPselect");
                    btn.Visible = false;
                }
                else
                {
                    if (Session["agentfees"] != "")
                    {
                        GridView10.Columns[6].Visible = true;
                        TextBox txtbx = (TextBox)e.Row.FindControl("txttrans");
                        txtbx.Visible = true;
                    }
                    DataTable DTORDER = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                    if (Session["editorderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString() && Session["date_change"] == null && Session["TP"] != null)
                    {
                        GridView10.Columns[5].Visible = true;
                        TextBox txtbx = (TextBox)e.Row.FindControl("txtduedate");
                        txtbx.Visible = true;

                    }
                    title = strval;
                    viewstate = title;

                    Label l2 = (Label)e.Row.FindControl("lblTPsrno");
                    l2.Visible = true;

                    RadioButton btn = (RadioButton)e.Row.FindControl("rbtnTPselect");
                    btn.Visible = true;
                }
            }
        }



        #region FETCH DATA IN ORDER STATUS COMBO BOX
        protected void bindComboBox(RadComboBox r, DataSet d)
        {
            r.Items.Clear();
            r.DataTextField = "AutoSearchResult";
            r.DataSource = d;
            r.DataBind();
            r.Items.Insert(0, new RadComboBoxItem("", "0"));
            r.SelectedValue = "0";
        }

        protected void binddropdownlist(DropDownList r, DataSet d)
        {
            r.Items.Clear();
            r.DataSource = d;
            r.DataTextField = "AutoSearchResult";
            r.DataBind();
            r.Items.Insert(0, new ListItem("", ""));
            // r.SelectedValue = "0";
        }


        protected void onitemrequest(RadComboBox r, DataTable dt, int noofitems)
        {
            ipr = dt.Rows.Count;
            int io = noofitems;
            int eo = Math.Min(io + ipr, dt.Rows.Count);
            r.Items.Clear();
            for (int i = io; i < eo; i++)
            {
                r.Items.Add(new RadComboBoxItem(dt.Rows[i]["AutoSearchResult"].ToString(), dt.Rows[i]["AutoSearchResult"].ToString()));
            }
        }



        #endregion

        #region INSERT & UPDATE TRANSFER PACKAGE METHOD

        public void insert_update_ss_tp_tp()
        {
            transfervalidation();
            if (Session["valid"] != null)
            {

                foreach (GridViewRow item in GridView10.Rows)
                {
                    DropDownList drptime = (DropDownList)item.FindControl("tpdrp_time");
                    RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                    Label id = (Label)item.FindControl("lbltp_priceid");

                    if (rbtn.Checked)
                    {
                        instpid = id.Text;
                        Label tpid = (Label)item.FindControl("lbltp_priceid");
                        transferpackgeid = int.Parse(tpid.Text);


                        TextBox datebkk = (TextBox)item.FindControl("txtTPdate");
                        TextBox timebkk = (TextBox)item.FindControl("txtTPtime");
                        Label tp_fromtoid = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp = (DropDownList)item.FindControl("drptransfer");

                        if (datebkk.Text == "")
                        {
                            Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                        }
                        else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                        {
                            Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                        }
                        else
                        {
                            serivcecartid = service_cart_id;

                            packageid = transferpackgeid;
                            packageflag = "TRANSFER";
                            time = drptime.Text;
                            date = datebkk.Text;
                            orderstatus = Session["orderstatus"].ToString();
                            userid = int.Parse(usrid);
                            pack_name = "";

                            objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, "0", pack_name, "", int.Parse(tp_fromtoid.Text), drp.Text, t_flag);
                        }
                    }
                    else if (instpid == id.Text)
                    {
                        Label tpid = (Label)item.FindControl("lbltp_priceid");
                        transferpackgeid = int.Parse(tpid.Text);
                        TextBox datebkk = (TextBox)item.FindControl("txtTPdate");
                        TextBox timebkk = (TextBox)item.FindControl("txtTPtime");
                        Label tp_fromtoid = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp = (DropDownList)item.FindControl("drptransfer");

                        serivcecartid = service_cart_id;

                        packageid = transferpackgeid;
                        packageflag = "TRANSFER";
                        time = drptime.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = "";

                        objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, "0", pack_name, "", int.Parse(tp_fromtoid.Text), drp.Text, t_flag);
                    }
                }

            }
        }


        public void CheckChanged(object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView10.Rows)
            {
                RadioButton rb = (RadioButton)item.FindControl("rbtnTPselect");
                if (rb != sender)
                {
                    rb.Checked = false;
                }
            }
        }

        public void transfervalidation()
        {

            foreach (GridViewRow item in GridView10.Rows)
            {

                RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                if (rbtn.Checked)
                {
                    Label tpid = (Label)item.FindControl("lbltp_priceid");
                    transferpackgeid = int.Parse(tpid.Text);
                    Session["valid"] = transferpackgeid;
                }
            }
        }
        #endregion

        #region TRANSFER PACKAGE VALIDATION

        protected void transfer_validation()
        {


            foreach (GridViewRow item in GridView10.Rows)
            {
                Label chk = (Label)item.FindControl("lbltp_flag");
                RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                Label id = (Label)item.FindControl("lbltp_priceid");
                DropDownList drptime = (DropDownList)item.FindControl("tpdrp_time");
                try
                {
                    if (rbtn.Checked)
                    {

                        tpid = id.Text;
                        TextBox datebkk = (TextBox)item.FindControl("txtTPdate");
                        DropDownList drp = (DropDownList)item.FindControl("drptransfer");

                        if (datebkk.Text == "")
                        {
                            ViewState["errormessage"] = "Please fill all the dates of selected Transfer Package.";
                            tpdate = false;
                            break;
                        }
                        //else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                        //{
                        //    ViewState["errormessage"] = "Selected Transfer Package dates should be within Check-in and Check-out dates.";
                        //    tpdate = false;
                        //    break;
                        //}
                        else if (drp.Text == "")
                        {
                            ViewState["errormessage"] = "Please select atleast one transfer type SIC or PVT.";
                            tpdate = false;
                            break;
                        }
                        else if (drptime.Text == "")
                        {
                            ViewState["errormessage"] = "Please select time for selected Transfer Package";
                            tpdate = false;
                            break;
                        }

                    }
                    else if (tpid == id.Text)
                    {
                        TextBox datebkk = (TextBox)item.FindControl("txtTPdate");
                        DropDownList drp = (DropDownList)item.FindControl("drptransfer");

                        if (datebkk.Text == "")
                        {
                            ViewState["errormessage"] = "Please enter all the dates of selected Transfer Package";
                            tpdate = false;
                            break;
                        }
                        else if (chk.Text == "S")
                        {
                            foreach (GridViewRow item1 in GridView10.Rows)
                            {
                                TextBox datebkk1 = (TextBox)item.FindControl("txtTPdate");
                                TextBox temp = datebkk1;
                                if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) <= DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Selected Transfer Package dates should be within Check-in and Check-out dates.";
                                    tpdate = false;
                                    break;
                                }
                                else
                                {
                                    if (datebkk1.Text != temp.Text)
                                    {
                                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk1.Text, "dd/MM/yyyy", null)))
                                        {
                                            ViewState["errormessage"] = "Selected Transfer Package dates should not be same.";
                                            tpdate = false;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        //else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) <= DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                        //{
                        //    ViewState["errormessage"] = "Selected Transfer Package dates should be within Check-in and Check-out dates.";
                        //    tpdate = false;
                        //    break;
                        //}

                        else if (drp.Text == "")
                        {
                            ViewState["errormessage"] = "Please select atleast one Transfer type SIC or PVT .";
                            tpdate = false;
                            break;
                        }
                        else if (drptime.Text == "")
                        {
                            ViewState["errormessage"] = "Please select time for selected Transfer Package";
                            tpdate = false;
                            break;
                        }
                    }
                }
                catch
                {
                    ViewState["errormessage"] = "Selected Ttransfer Package's date is not in correct format.";
                    tpdate = false;
                    break;
                }
                finally
                {
                }
            }

        }

        #endregion

        #region GET QUOTE BUTTON
        protected void btnGetQuote_Click(object sender, EventArgs e)
        {
            Validation();
            roomValidation_onDate_Conflicts();

            transfer_validation();
            transfervalidation();

        //    SightSeeValidation();
            site_date_validation();
      //      site_vs_transfer_date_validation();

            SiteSeeingValidatonForMultiCheckDropdown();
            SiteSeeing_LunchDinner_Validation();
          
            if (dateformat_flag == false)
            {
                Master.DisplayMessage(ViewState["hotelsdate_error"].ToString(), "successMessage", 8000);
            }
            else if (room_flag == false)
            {
                Master.DisplayMessage(ViewState["tripleroomerror"].ToString(), "successMessage", 8000);
            }
            else if (room_flag_conflict == false)
            {
                Master.DisplayMessage(ViewState["errormessage_conflict"].ToString(), "successMessage", 8000);
            }
            else if (bkkin == false)
            {
                Master.DisplayMessage("Bangkok's Hotel Check in Date is Required.", "successMessage", 8000);
            }
            else if (bkkout == false)
            {
                Master.DisplayMessage("Bangkok's Hotel Check out Date is Required.", "successMessage", 8000);
            }
            else if (bkkin1 == false)
            {
                Master.DisplayMessage("Bangkok's Hotel Check in Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (bkkout1 == false)
            {
                Master.DisplayMessage("Bangkok's Hotel Check out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (bkkout2 == false)
            {
                Master.DisplayMessage("Bangkok's Hotel Check out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }

            //PATTAYA
            else if (ptyin == false)
            {
                Master.DisplayMessage("Pattaya's Hotel Check In Date Is Required.", "successMessage", 8000);
            }
            else if (ptyout == false)
            {
                Master.DisplayMessage("Pattaya's Hotel Check Out Date Is Required.", "successMessage", 8000);
            }
            else if (ptyin1 == false)
            {
                Master.DisplayMessage("Pattaya's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (ptyout1 == false)
            {
                Master.DisplayMessage("Pattaya's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (ptyout2 == false)
            {
                Master.DisplayMessage("Pattaya's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d2 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            //PHUKET
            else if (phuin == false)
            {
                Master.DisplayMessage("Phuket's Hotel Check In Date Is Required.", "successMessage", 8000);
            }
            else if (phuout == false)
            {
                Master.DisplayMessage("Phuket's Hotel Check Out Date Is Required.", "successMessage", 8000);
            }
            else if (phuin1 == false)
            {
                Master.DisplayMessage("Phuket's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (phuout1 == false)
            {
                Master.DisplayMessage("Phuket's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (phuout2 == false)
            {
                Master.DisplayMessage("Phuket's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d3 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            //BKV
            else if (bkvin == false)
            {
                Master.DisplayMessage("Krabi's Hotel Check In Date Is Required.", "successMessage", 8000);
            }
            else if (bkvout == false)
            {
                Master.DisplayMessage("Krabi's Hotel Check Out Date Is Required.", "successMessage", 8000);
            }
            else if (bkvin1 == false)
            {
                Master.DisplayMessage("Krabi's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (bkvout1 == false)
            {
                Master.DisplayMessage("Krabi's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (bkvout2 == false)
            {
                Master.DisplayMessage("Krabi's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d4 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }

                //USM
            else if (usmin == false)
            {
                Master.DisplayMessage("Samui's Hotel Check In Date Is Required.", "successMessage", 8000);
            }
            else if (usmout == false)
            {
                Master.DisplayMessage("Samui's Hotel Check Out Date Is Required.", "successMessage", 8000);
            }
            else if (usmin1 == false)
            {
                Master.DisplayMessage("Samui's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (usmout1 == false)
            {
                Master.DisplayMessage("Samui's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (usmout2 == false)
            {
                Master.DisplayMessage("Samui's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d5 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            //CNX
            else if (cnxin == false)
            {
                Master.DisplayMessage("Chiangmai's Hotel Check In Date Is Required.", "successMessage", 8000);
            }
            else if (cnxout == false)
            {
                Master.DisplayMessage("Chiangmai's Hotel Check Out Date Is Required.", "successMessage", 8000);
            }
            else if (cnxin1 == false)
            {
                Master.DisplayMessage("Chiangmai's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (cnxout1 == false)
            {
                Master.DisplayMessage("Chiangmai's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (cnxout2 == false)
            {
                Master.DisplayMessage("Chiangmai's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d6 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            // ETC
            else if (etcin == false)
            {
                Master.DisplayMessage("Hua Hin's Hotel Check In Date Is Required.", "successMessage", 8000);
            }
            else if (etcout == false)
            {
                Master.DisplayMessage("Hua Hin's Hotel Check Out Date Is Required.", "successMessage", 8000);
            }
            else if (etcin1 == false)
            {
                Master.DisplayMessage("Hua Hin's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (etcout1 == false)
            {
                Master.DisplayMessage("Hua Hin's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (etcout2 == false)
            {
                Master.DisplayMessage("Hua Hin's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d7 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            //SS
            else if (ssin == false)
            {
                Master.DisplayMessage("Kanchanburi's Hotel Check In Date Is Required.", "successMessage", 8000);
            }
            else if (ssout == false)
            {
                Master.DisplayMessage("Kanchanburi's Hotel Check Out Date Is Required.", "successMessage", 8000);
            }
            else if (ssin1 == false)
            {
                Master.DisplayMessage("Kanchanburi's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (ssout1 == false)
            {
                Master.DisplayMessage("Kanchanburi's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (ssout2 == false)
            {
                Master.DisplayMessage("Kanchanburi's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d8 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            //SPS

            else if (spsin == false)
            {
                Master.DisplayMessage("Chingrai's Hotel Check In Date Is Required.", "successMessage", 8000);
            }
            else if (spsout == false)
            {
                Master.DisplayMessage("Chingrai's Hotel Check Out Date Is Required.", "successMessage", 8000);
            }
            else if (spsin1 == false)
            {
                Master.DisplayMessage("Chingrai's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (spsout1 == false)
            {
                Master.DisplayMessage("Chingrai's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (spsout2 == false)
            {
                Master.DisplayMessage("Chingrai's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d9 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            //ZZ
            else if (zzin == false)
            {
                Master.DisplayMessage("Phi Phi Island's Hotel Check In Date Is Required.", "successMessage", 8000);
            }
            else if (zzout == false)
            {
                Master.DisplayMessage("Phi Phi Island's Hotel Check Out Date Is Required.", "successMessage", 8000);
            }
            else if (zzin1 == false)
            {
                Master.DisplayMessage("Phi Phi Island's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (zzout1 == false)
            {
                Master.DisplayMessage("Phi Phi Island's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
            }
            else if (zzout2 == false)
            {
                Master.DisplayMessage("Phi Phi Island's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
            }
            else if (d10 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            //add by milendra 
            //else if (rbtnUSD.Checked == false && rbtnTHB.Checked == false)
            //{
            //    Master.DisplayMessage("Plese select Quote Currency", "successMessage", 8000);
            //}
            // TRANSFER PACKAGE
            else if (tpdate == false)
            {

                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            // SIGHT SEE
            else if (bkkss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (bkkss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (ptyss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (ptyss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }

            else if (phuss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (phuss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (bkvss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (bkvss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }

            else if (usmss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (usmss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (cnxss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (cnxss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }

            else if (etcss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (etcss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (ssss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (ssss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }

            else if (spsss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (spsss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (zzss == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (zzss1 == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (dropdown_flag == false)
            {
                Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
            }
            else if (ssdateflag == false)
            {
                Master.DisplayMessage(ViewState["sitedateerror"].ToString(), "successMessage", 8000);
            }

            else if (SightSeeValidationonBook() == false)
            {
                if (ViewState["errormessage"] != null)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    btnBook.Visible = false;
                    uptransferPackage.Update();
                }
                else
                {
                    Master.DisplayMessage("Site seeing date is not between transfer package dates.", "successMessage", 8000);
                    btnBook.Visible = false;
                    uptransferPackage.Update();
                }
            }

            else if (CheckBox1.Checked == true && CheckBox2.Checked == true && Session["fit_select_type"].ToString() == "ONE HOTEL ONLY")
            {
                Master.DisplayMessage("Select only one hotel.", "successMessage", 8000);
            }
            else if (CheckBox1.Checked == false && CheckBox2.Checked == false && Session["fit_select_type"].ToString() == "ONE HOTEL ONLY")
            {
                Master.DisplayMessage("Select one hotel.", "successMessage", 8000);
            }
            // SUCCESS
            else
            {

                DataSet ds_fit_pack_type = objBookingFitStoreProcedure.fetchComboData("FETCH_FIT_PACKAGE_TYPE");


                if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[0]["AutoSearchResult"].ToString())
                {
                    h_flag = true;
                    s_flag = true;
                    t_flag = true;
                }
                else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[1]["AutoSearchResult"].ToString())
                {
                    h_flag = true;
                }

                else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[2]["AutoSearchResult"].ToString())
                {
                    t_flag = true;
                }

                else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[3]["AutoSearchResult"].ToString())
                {
                    s_flag = true;
                }

                else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[4]["AutoSearchResult"].ToString())
                {
                    h_flag = true;
                    t_flag = true;
                }

                else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[5]["AutoSearchResult"].ToString())
                {
                    h_flag = true;
                    s_flag = true;
                }

                else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[6]["AutoSearchResult"].ToString())
                {
                    t_flag = true;
                    s_flag = true;
                }
                else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[6]["AutoSearchResult"].ToString())
                {
                    t_flag = true;
                    s_flag = true;
                }


                btnBook.Attributes.Add("style", "display");
                lnkbtn.Attributes.Add("style", "display");
                UpdatePanel1.Update();
                ViewState["tourid"] = 0;

                // INSERT UPDATE HOTEL DETAILS

                insert_update_hotels();

                // INSERT UPDATE SIGHT SEEING
                insert_update_ss_tp_bkk();

                insert_update_ss_tp_pty();

                insert_update_ss_tp_phu();

                insert_update_ss_tp_kbv();

                insert_update_ss_tp_usm();

                insert_update_ss_tp_cnx();

                insert_update_ss_tp_s();

                insert_update_ss_tp_sps();

                insert_update_ss_tp_zz();

                insert_update_ss_tp_etc();

                // INSERT UPDATE TRANSFER PACKAGE
                insert_update_ss_tp_tp();

                if (Session["noofadult"] == "")
                {
                    Session["noofadult"] = "0";
                }

                if (Session["noofcwb"] == "")
                {
                    Session["noofcwb"] = "0";
                }

                if (Session["noofcnb"] == "")
                {
                    Session["noofcnb"] = "0";
                }

                if (Session["noofinfant"] == "")
                {
                    Session["noofinfant"] = "0";
                }

                string quote_user_id;
                if (Request["TOURID"] != null && !string.IsNullOrEmpty(Request["TOURID"].ToString()) && Request["QUOTEID"] != null && !string.IsNullOrEmpty(Request["QUOTEID"].ToString()))
                {
                    DataTable dt1 = new DataTable();
                    SqlConnection conn = new SqlConnection(str);
                    conn.Open();

                    SqlCommand comm = new SqlCommand("FETCH_AGENT_QUOTATION_DETAILS", conn);
                    comm.CommandType = CommandType.StoredProcedure;

                    comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = Convert.ToInt32(Request.QueryString["QUOTEID"].ToString());

                    SqlDataReader rdr = comm.ExecuteReader();
                    dt1.Load(rdr);

                    quote_user_id = dt1.Rows[0]["USER_ID"].ToString();
                }
                else
                {
                    quote_user_id = usrid;
                }
                DataTable dtgettour = objHotelStoreProcedure.insertupadtegetquotes(tour_id.ToString(), Session["tourname"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString(), "3", Session["nights"].ToString(), usrid, Session["noofadult"].ToString(), Session["noofcwb"].ToString(), Session["noofcnb"].ToString(), Session["noofinfant"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["clientname"].ToString(), Session["remarks"].ToString(), int.Parse(Session["packageid"].ToString()), Convert.ToBoolean(Session["favouritepackage"].ToString()), Session["clientsurnameadmin"].ToString(), Session["clienttitleadmin"].ToString(), Session["fit_select_type"].ToString());
                int tour = int.Parse(dtgettour.Rows[0]["NEW_TOUR_ID"].ToString());
                ViewState["tour_id"] = dtgettour.Rows[0]["NEW_TOUR_ID"].ToString();

                 //string currency = string.Empty;
                 //if (rbtnTHB.Checked == true)
                 //{
                 //    currency = "THB";
                 //}
                 //if (rbtnUSD.Checked == true)
                 //{
                 //    currency = "USD";
                 //}

               
                DataTable dt = null;
                //if (currency == "USD")
                //{
                    dt = objHotelStoreProcedure.generate_quote_for_hotel(int.Parse(Session["noofadult"].ToString()), int.Parse(Session["noofcwb"].ToString()), int.Parse(Session["noofcnb"].ToString()), int.Parse(Session["noofinfant"].ToString()), int.Parse(usrid), "Quoted", quots_id, tour, package_id);
                //}
                //else
                //{
                  // dt = objHotelStoreProcedure.generate_quote_for_hotel_thb(int.Parse(Session["noofadult"].ToString()), int.Parse(Session["noofcwb"].ToString()), int.Parse(Session["noofcnb"].ToString()), int.Parse(Session["noofinfant"].ToString()), int.Parse(usrid), "Quoted", quots_id, tour, package_id);
                //}


                quote_id = Convert.ToInt32(dt.Rows[0]["QUOTE_ID"]);
                Session["updateid"] = quote_id;
                insert_update_additional_service(tour, quote_id);
               


                /* PDF Save Logic */


                if (!System.IO.Directory.Exists(Server.MapPath("~/Views/FIT/Quotes/" + quote_id.ToString() + "/")))
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Views/FIT/Quotes/" + quote_id.ToString() + "/"));

                string reportType = "PDF";
                string mimeType;
                string encoding;
                string fileNameExtension;

                Warning[] warnings;
                string[] streams;
                byte[] renderedBytes;

                string deviceInfo =
                "<DeviceInfo>" +
                "  <OutputFormat>PDF</OutputFormat>" +
                "  <PageWidth>10in</PageWidth>" +
                "  <PageHeight>11in</PageHeight>" +
                "  <MarginTop>0.50in</MarginTop>" +
                "  <MarginLeft>0.50in</MarginLeft>" +
                "  <MarginRight>0.50in</MarginRight>" +
                "  <MarginBottom>0.50in</MarginBottom>" +
                "</DeviceInfo>";



                // quote_id = Page.Request.QueryString["QuoteId"].ToString();

                ReportParameter[] parm = new ReportParameter[1];
                parm[0] = new ReportParameter("QOUTE_ID", quote_id.ToString());

                rptViewer1.ShowCredentialPrompts = false;
                rptViewer1.ShowParameterPrompts = false;

                rptViewer1.ServerReport.ReportServerCredentials = new ReportCredentials(WebConfigurationManager.AppSettings["ReportServerUsername"].ToString(), WebConfigurationManager.AppSettings["ReportServerPassword"].ToString(), WebConfigurationManager.AppSettings["ReportServerDomain"].ToString());

                rptViewer1.ProcessingMode = Microsoft.Reporting.WebForms.ProcessingMode.Remote;
                rptViewer1.ServerReport.ReportServerUrl = new System.Uri(WebConfigurationManager.AppSettings["ReportServer"].ToString());
                rptViewer1.ServerReport.ReportPath = "/ThailandReport/Invoice";
                rptViewer1.ServerReport.SetParameters(parm);
                rptViewer1.ServerReport.Refresh();


                //Render the report
                //Clear the response stream and write the bytes to the outputstream
                //Set content-disposition to "attachment" so that user is prompted to take an action
                //on the file (open or save)
                renderedBytes = rptViewer1.ServerReport.Render(reportType, deviceInfo, out mimeType, out encoding, out fileNameExtension, out streams, out warnings);
                //Response.Clear();
                //Response.ContentType = mimeType;
                //Response.AddHeader("content-disposition", "attachment; filename= Quotation." + fileNameExtension);
                //Response.BinaryWrite(renderedBytes);

                SendMailQuote(renderedBytes);

                rptViewer1.Visible = false;

                //Response.End();

                using (FileStream fs = File.Create(HttpContext.Current.Server.MapPath("~/Views/FIT/Quotes/" + quote_id.ToString() + "/Quotation.pdf")))
                {
                    fs.Write(renderedBytes, 0, (int)renderedBytes.Length);
                }

                btnBook.Visible = true;
                lnkbtn.HRef = "~/Views/FIT/Quotes/" + quote_id.ToString() + "/Quotation.pdf";
                lnkbtn.Attributes.Add("style", "display");
                UpdatePanel1.Update();
                
                Buttonsend.Attributes.Add("style", "display");
                cc.Attributes.Add("style", "display");
                UpdatePanel2.Update();
                Master.DisplayMessage("Quote Generated Successfully.", "successMessage", 8000);

            }
        }


        protected void btnDownloadQuote_Click(object sender, EventArgs e)
        {
            Response.Redirect("~/Views/FIT/QuoteReport.aspx?QuoteId=" + Session["updateid"].ToString());
        }
        #endregion

        #region INSERT UPDATE SIGHT SEEING


        //BANGKOK
        public void insert_update_ss_tp_bkk()
        {


            foreach (GridViewRow item in GridView1.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_Bkkdate");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_Bkk_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList1");
                    DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {

                        serivcecartid = service_cart_id;

                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC1.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');

                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                    //  lbl_voucher_date.Text = result;
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                    //  lbl_voucher_date.Text = result;
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                    //  lbl_voucher_date.Text = result;
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                    // lbl_voucher_date.Text = result;
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Bangkok", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Bangkok", 0, sicpvt_flag.Text, s_flag);
                            }


                        }
                    }
                }
            }
        }
        //PATTYA
        public void insert_update_ss_tp_pty()
        {

            foreach (GridViewRow row1 in GV_Result.Rows)
            {
                CheckBox rbtn = (CheckBox)row1.FindControl("cb_pty_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)row1.FindControl("lblSS_PtypackageDetails");

                    TextBox datebkk = (TextBox)row1.FindControl("txtSS_Ptydate");
                    DropDownList timebkk = (DropDownList)row1.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)row1.FindControl("txtSS_PtynoofMeals");
                    DropDownList sicpvt_flag = (DropDownList)row1.FindControl("DropDownList2");
                    DDL2 = (MulticheckDropdown)row1.FindControl("DDL2");
                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {
                        serivcecartid = service_cart_id;

                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC2.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');

                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                    //  lbl_voucher_date.Text = result;
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                    //  lbl_voucher_date.Text = result;
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                    //  lbl_voucher_date.Text = result;
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                    // lbl_voucher_date.Text = result;
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Pattaya", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Pattaya", 0, sicpvt_flag.Text, s_flag);
                            }
                        }
                    }
                }
            }
        }
        //PHUKET
        public void insert_update_ss_tp_phu()
        {

            foreach (GridViewRow item in GridView2.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_phuketdate");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList3");
                    DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {
                        serivcecartid = service_cart_id;

                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC3.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');

                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Phuket", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Phuket", 0, sicpvt_flag.Text, s_flag);
                            }
                        }
                    }


                }
            }
        }
        //BKV
        public void insert_update_ss_tp_kbv()
        {

            foreach (GridViewRow item in GridView3.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_kbv_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList4");
                    DDL4 = (MulticheckDropdown)item.FindControl("DDL4");

                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {
                        serivcecartid = service_cart_id;
                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC4.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');

                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Krabi", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Krabi", 0, sicpvt_flag.Text, s_flag);
                            }
                        }
                    }

                }
            }

        }
        //USM
        public void insert_update_ss_tp_usm()
        {

            foreach (GridViewRow item in GridView4.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_usm_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_usm_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList5");
                    DDL5 = (MulticheckDropdown)item.FindControl("DDL5");

                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {
                        serivcecartid = service_cart_id;
                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC5.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');

                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Samui", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Samui", 0, sicpvt_flag.Text, s_flag);
                            }
                        }
                    }
                }

            }
        }
        //CNX
        public void insert_update_ss_tp_cnx()
        {

            foreach (GridViewRow item in GridView5.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_cnx_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList6");
                    DDL6 = (MulticheckDropdown)item.FindControl("DDL6");
                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {
                        serivcecartid = service_cart_id;
                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC6.GetCheckBoxValues();
                            string[] words = str1.Split(',');

                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Chiangmai", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Chiangmai", 0, sicpvt_flag.Text, s_flag);
                            }
                        }
                    }

                }
            }
        }
        //ETC
        public void insert_update_ss_tp_etc()
        {


            foreach (GridViewRow item in GridView6.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_etc_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList7");
                    DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {
                        serivcecartid = service_cart_id;
                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC7.GetCheckBoxValues();
                            string[] words = str1.Split(',');
                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Hua Hin", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Hua Hin", 0, sicpvt_flag.Text, s_flag);
                            }
                        }
                    }
                }
            }
        }
        //SS
        public void insert_update_ss_tp_s()
        {

            foreach (GridViewRow item in GridView7.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_s_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList8");
                    DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {
                        serivcecartid = service_cart_id;
                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC8.GetCheckBoxValues();
                            string[] words = str1.Split(',');

                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Kanchanburi", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Kanchanburi", 0, sicpvt_flag.Text, s_flag);
                            }
                        }
                    }
                }

            }

        }
        //SPS
        public void insert_update_ss_tp_sps()
        {

            foreach (GridViewRow item in GridView8.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_sps_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList9");
                    DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {
                        serivcecartid = service_cart_id;
                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC9.GetCheckBoxValues();
                            string[] words = str1.Split(',');

                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Chiangrai", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Chiangrai", 0, sicpvt_flag.Text, s_flag);
                            }
                        }
                    }
                }

            }
        }
        //ZZ
        public void insert_update_ss_tp_zz()
        {

            foreach (GridViewRow item in GridView9.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_zz_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList10");
                    DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                    if (datebkk.Text == "")
                    {
                        Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
                    }
                    else
                    {
                        serivcecartid = service_cart_id;
                        packageid = 0;
                        packageflag = "SIGHT";
                        time = timebkk.Text;
                        date = datebkk.Text;
                        orderstatus = Session["orderstatus"].ToString();
                        userid = int.Parse(usrid);
                        pack_name = packagename.Text;

                        for (int i = 0; i < int.Parse(txtmeal.Text); i++)
                        {
                            string str1 = DDC10.GetCheckBoxValues();
                            string[] words = str1.Split(',');

                            DateTime dat = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            dat = dat.AddDays(i);

                            dat.ToString("MM-dd-yyyy");
                            string source1 = dat.ToString();
                            string str11 = source1;
                            string[] w1 = str11.Split('/');

                            string t12 = w1[2];
                            string[] t11 = t12.Split(' ');
                            string txtperiod_stay_from = "";
                            if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            else
                            {
                                if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                {
                                    txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                }
                                else
                                {
                                    txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                }
                            }
                            if (i == 0)
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Phi Phi Island", 0, sicpvt_flag.Text, s_flag);
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, words[i - 1].ToString(), time, orderstatus, userid, txtmeal.Text, pack_name, "Phi Phi Island", 0, sicpvt_flag.Text, s_flag);
                            }
                        }
                    }
                }

            }
        }

        #endregion

        #region INSERT_UPDATE_HOTEL_DETAILS METHOD

        public void insert_update_hotels()
        {


            cityname = "";
            DataTable dt = objHotelStoreProcedure.fetchpacageid(package_id);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                cityname += "," + dt.Rows[i]["CITY_NAME"].ToString();
            }



            string str1 = cityname;
            string[] words = str1.Split(',');

            foreach (string word in words)
            {
                // BANGKOK
                if (word == "Bangkok")
                {

                    bkkflag = true;
                    if (ddrbkk_HotelName.Text != "")
                    {
                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrbkk_HotelName.Text;

                            fromdate = txtbkk_CheckIn.Text;

                            todate = txtbkk_CheckOut.Text;

                            roomtype = 1;

                            noofroms = int.Parse(Session["singleroom"].ToString());

                            roomtypeid = ddrbkk_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            if (dt.Rows.Count > 1)
                            {
                                if (CheckBox2.Checked == true)
                                {
                                    h_flag = true;
                                }
                                else
                                {
                                    h_flag = false;
                                }
                            }

                            //if (Session["fit_select_type"].ToString() == "ONE HOTEL ONLY")
                            //{
                            //    h_flag = true;
                            //}
                            //else
                            //{
                            //    h_flag = false;
                            //}

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);


                            /* hotel sub category*/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrbkk_HotelName.Text, ddrbkk_RoomType.Text);
                            string txtperiod_stay_from = txtbkk_CheckIn.Text;
                            string txtperiod_stay_to = txtbkk_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }
                                        //if (old_id == new_id && flag_new == false)
                                        //{
                                        //    objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate);
                                        //}
                                        //if (old_id == new_id && flag_new == true)
                                        //{
                                        //    objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate);
                                        //}
                                    }

                                }

                            }
                        }

                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrbkk_HotelName.Text;

                            fromdate = txtbkk_CheckIn.Text;

                            todate = txtbkk_CheckOut.Text;


                            roomtype = 2;

                            noofroms = int.Parse(Session["doubleroom"].ToString());

                            roomtypeid = ddrbkk_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();


                            if (dt.Rows.Count > 1)
                            {
                                if (CheckBox2.Checked == true)
                                {
                                    h_flag = true;
                                }
                                else
                                {
                                    h_flag = false;
                                }
                            }

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /* hotel sub category*/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrbkk_HotelName.Text, ddrbkk_RoomType.Text);
                            string txtperiod_stay_from = txtbkk_CheckIn.Text;
                            string txtperiod_stay_to = txtbkk_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }
                                        //if (old_id == new_id && flag_new == false)
                                        //{
                                        //    objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate);
                                        //}
                                        //if (old_id == new_id && flag_new == true)
                                        //{
                                        //    objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate);
                                        //}
                                    }

                                }

                            }
                        }

                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrbkk_HotelName.Text;

                            fromdate = txtbkk_CheckIn.Text;

                            todate = txtbkk_CheckOut.Text;

                            roomtype = 3;
                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddrbkk_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            if (dt.Rows.Count > 1)
                            {
                                if (CheckBox2.Checked == true)
                                {
                                    h_flag = true;
                                }
                                else
                                {
                                    h_flag = false;
                                }
                            }

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /* hotel sub category*/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrbkk_HotelName.Text, ddrbkk_RoomType.Text);
                            string txtperiod_stay_from = txtbkk_CheckIn.Text;
                            string txtperiod_stay_to = txtbkk_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }

                            }
                        }
                        



                        // changed on 7th december
                        // Change for testing // 6th December 2012
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrbkk_HotelName.Text;

                            fromdate = txtbkk_CheckIn.Text;

                            todate = txtbkk_CheckOut.Text;

                            roomtype = 0;
                            noofroms = int.Parse("0");

                            roomtypeid = ddrbkk_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            if (dt.Rows.Count > 1)
                            {
                                if (CheckBox2.Checked == true)
                                {
                                    h_flag = true;
                                }
                                else
                                {
                                    h_flag = false;
                                }
                            }

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);


                            /* hotel sub category*/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrbkk_HotelName.Text, ddrbkk_RoomType.Text);
                            string txtperiod_stay_from = txtbkk_CheckIn.Text;
                            string txtperiod_stay_to = txtbkk_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }

                            }
                        }



                    }
                }
                // PATTYA
                if (word == "Pattaya")
                {


                    ptyflag = true;

                    if (ddrpty_HotelName.Text != "")
                    {
                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrpty_HotelName.Text;

                            fromdate = txtpty_CheckIn.Text;

                            todate = txtpty_CheckOut.Text;


                            roomtype = 1;

                            noofroms = int.Parse(Session["singleroom"].ToString());

                            roomtypeid = ddrpty_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            if (dt.Rows.Count > 1)
                            {
                                if (CheckBox1.Checked == true)
                                {
                                    h_flag = true;
                                }
                                else
                                {
                                    h_flag = false;
                                }
                            }
                            //if (Session["fit_select_type"].ToString() == "ONE HOTEL ONLY" && CheckBox1.Checked == true)
                            //{
                            //    h_flag = true;
                            //}
                            //else
                            //{
                            //    h_flag = false;
                            //}
                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);


                            /********SUB HOTEL ENTRY*************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrpty_HotelName.Text, ddrpty_RoomType.Text);
                            string txtperiod_stay_from = txtpty_CheckIn.Text;
                            string txtperiod_stay_to = txtpty_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }
                                        //if (old_id == new_id && flag_new == false)
                                        //{
                                        //    objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate);
                                        //}
                                        //if (old_id == new_id && flag_new == true)
                                        //{
                                        //    objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate);
                                        //}
                                    }

                                }

                            }
                        }

                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrpty_HotelName.Text;

                            fromdate = txtpty_CheckIn.Text;

                            todate = txtpty_CheckOut.Text;

                            roomtype = 2;

                            noofroms = int.Parse(Session["doubleroom"].ToString());

                            roomtypeid = ddrpty_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            if (dt.Rows.Count > 1)
                            {
                                if (CheckBox1.Checked == true)
                                {
                                    h_flag = true;
                                }
                                else
                                {
                                    h_flag = false;
                                }
                            }

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /********SUB HOTEL ENTRY*************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrpty_HotelName.Text, ddrpty_RoomType.Text);
                            string txtperiod_stay_from = txtpty_CheckIn.Text;
                            string txtperiod_stay_to = txtpty_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }

                            }
                        }

                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrpty_HotelName.Text;

                            fromdate = txtpty_CheckIn.Text;

                            todate = txtpty_CheckOut.Text;


                            roomtype = 3;

                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddrpty_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            if (dt.Rows.Count > 1)
                            {
                                if (CheckBox1.Checked == true)
                                {
                                    h_flag = true;
                                }
                                else
                                {
                                    h_flag = false;
                                }
                            }

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrpty_HotelName.Text, ddrpty_RoomType.Text);
                            string txtperiod_stay_from = txtpty_CheckIn.Text;
                            string txtperiod_stay_to = txtpty_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }

                            }
                        }



                        // Change on 7th december
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrpty_HotelName.Text;

                            fromdate = txtpty_CheckIn.Text;

                            todate = txtpty_CheckOut.Text;


                            roomtype = 0;
                            noofroms = int.Parse("0");

                            roomtypeid = ddrpty_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            if (dt.Rows.Count > 1)
                            {
                                if (CheckBox1.Checked == true)
                                {
                                    h_flag = true;
                                }
                                else
                                {
                                    h_flag = false;
                                }
                            }
                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);


                            /********SUB HOTEL ENTRY*************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrpty_HotelName.Text, ddrpty_RoomType.Text);
                            string txtperiod_stay_from = txtpty_CheckIn.Text;
                            string txtperiod_stay_to = txtpty_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }

                            }
                        }
                    }
                }

                //PHUKET
                if (word == "Phuket")
                {
                    if (dt.Rows.Count > 1)
                    {
                        if (CheckBox3.Checked == true)
                        {
                            h_flag = true;
                        }
                        else
                        {
                            h_flag = false;
                        }
                    }

                    phuflag = true;
                    if (ddrphu_HotelName.Text != "")
                    {
                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrphu_HotelName.Text;

                            fromdate = txtphu_CheckIn.Text;

                            todate = txtphu_CheckOut.Text;



                            roomtype = 1;

                            noofroms = int.Parse(Session["singleroom"].ToString());


                            roomtypeid = ddrphu_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrphu_HotelName.Text, ddrphu_RoomType.Text);
                            string txtperiod_stay_from = txtphu_CheckIn.Text;
                            string txtperiod_stay_to = txtphu_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }

                            }
                        }




                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrphu_HotelName.Text;

                            fromdate = txtphu_CheckIn.Text;

                            todate = txtphu_CheckOut.Text;




                            roomtype = 2;

                            noofroms = int.Parse(Session["doubleroom"].ToString());

                            roomtypeid = ddrphu_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrphu_HotelName.Text, ddrphu_RoomType.Text);
                            string txtperiod_stay_from = txtphu_CheckIn.Text;
                            string txtperiod_stay_to = txtphu_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }

                            }
                        }




                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrphu_HotelName.Text;

                            fromdate = txtphu_CheckIn.Text;

                            todate = txtphu_CheckOut.Text;





                            roomtype = 3;
                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddrphu_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);


                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrphu_HotelName.Text, ddrphu_RoomType.Text);
                            string txtperiod_stay_from = txtphu_CheckIn.Text;
                            string txtperiod_stay_to = txtphu_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }

                        }





                        // changee on 7th december
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrphu_HotelName.Text;

                            fromdate = txtphu_CheckIn.Text;

                            todate = txtphu_CheckOut.Text;



                            roomtype = 0;
                            noofroms = int.Parse("0");



                            roomtypeid = ddrphu_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrphu_HotelName.Text, ddrphu_RoomType.Text);
                            string txtperiod_stay_from = txtphu_CheckIn.Text;
                            string txtperiod_stay_to = txtphu_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }

                            }
                        }
                    }
                }
                //BKV
                if (word == "Krabi")
                {
                    if (dt.Rows.Count > 1)
                    {
                        if (CheckBox4.Checked == true)
                        {
                            h_flag = true;
                        }
                        else
                        {
                            h_flag = false;
                        }
                    }

                    if (ddrkbv_HotelName.Text != "")
                    {
                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrkbv_HotelName.Text;

                            fromdate = txtkbv_CheckIn.Text;

                            todate = txtkbv_CheckOut.Text;



                            roomtype = 1;
                            noofroms = int.Parse(Session["singleroom"].ToString());



                            roomtypeid = ddrkbv_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrkbv_HotelName.Text, ddrkbv_RoomType.Text);
                            string txtperiod_stay_from = txtkbv_CheckIn.Text;
                            string txtperiod_stay_to = txtkbv_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }
                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrkbv_HotelName.Text;

                            fromdate = txtkbv_CheckIn.Text;

                            todate = txtkbv_CheckOut.Text;



                            roomtype = 2;
                            noofroms = int.Parse(Session["doubleroom"].ToString());



                            roomtypeid = ddrkbv_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrkbv_HotelName.Text, ddrkbv_RoomType.Text);
                            string txtperiod_stay_from = txtkbv_CheckIn.Text;
                            string txtperiod_stay_to = txtkbv_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrkbv_HotelName.Text;

                            fromdate = txtkbv_CheckIn.Text;

                            todate = txtkbv_CheckOut.Text;



                            roomtype = 3;

                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddrkbv_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrkbv_HotelName.Text, ddrkbv_RoomType.Text);
                            string txtperiod_stay_from = txtkbv_CheckIn.Text;
                            string txtperiod_stay_to = txtkbv_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }


                        // change on 7th december
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrkbv_HotelName.Text;

                            fromdate = txtkbv_CheckIn.Text;

                            todate = txtkbv_CheckOut.Text;



                            roomtype = 0;
                            noofroms = int.Parse("0");



                            roomtypeid = ddrkbv_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrkbv_HotelName.Text, ddrkbv_RoomType.Text);
                            string txtperiod_stay_from = txtkbv_CheckIn.Text;
                            string txtperiod_stay_to = txtkbv_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                    }
                }
                //USM
                if (word == "Samui")
                {
                    if (dt.Rows.Count > 1)
                    {
                        if (CheckBox5.Checked == true)
                        {
                            h_flag = true;
                        }
                        else
                        {
                            h_flag = false;
                        }
                    }
                    if (ddrusm_HotelName.Text != "")
                    {
                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrusm_HotelName.Text;

                            fromdate = txtusm_CheckIn.Text;

                            todate = txtusm_CheckOut.Text;



                            roomtype = 1;

                            noofroms = int.Parse(Session["singleroom"].ToString());


                            roomtypeid = ddrusm_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrusm_HotelName.Text, ddrusm_RoomType.Text);
                            string txtperiod_stay_from = txtusm_CheckIn.Text;
                            string txtperiod_stay_to = txtusm_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrusm_HotelName.Text;

                            fromdate = txtusm_CheckIn.Text;

                            todate = txtusm_CheckOut.Text;

                            roomtype = 2;

                            noofroms = int.Parse(Session["doubleroom"].ToString());

                            roomtypeid = ddrusm_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrusm_HotelName.Text, ddrusm_RoomType.Text);
                            string txtperiod_stay_from = txtusm_CheckIn.Text;
                            string txtperiod_stay_to = txtusm_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrusm_HotelName.Text;

                            fromdate = txtusm_CheckIn.Text;

                            todate = txtusm_CheckOut.Text;

                            roomtype = 3;
                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddrusm_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrusm_HotelName.Text, ddrusm_RoomType.Text);
                            string txtperiod_stay_from = txtusm_CheckIn.Text;
                            string txtperiod_stay_to = txtusm_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }


                        // Changed on 7th december
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrusm_HotelName.Text;

                            fromdate = txtusm_CheckIn.Text;

                            todate = txtusm_CheckOut.Text;



                            roomtype = 0;
                            noofroms = int.Parse("0");


                            roomtypeid = ddrusm_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /******************************SUB HOTEL ENTRY*********************************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrusm_HotelName.Text, ddrusm_RoomType.Text);
                            string txtperiod_stay_from = txtusm_CheckIn.Text;
                            string txtperiod_stay_to = txtusm_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }
                    }
                }

                //CNX
                if (word == "Chiangmai")
                {
                    if (dt.Rows.Count > 1)
                    {
                        if (CheckBox6.Checked == true)
                        {
                            h_flag = true;
                        }
                        else
                        {
                            h_flag = false;
                        }
                    }
                    if (ddrcnx_HotelName.Text != "")
                    {

                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrcnx_HotelName.Text;

                            fromdate = txtcnx_CheckIn.Text;

                            todate = txtcnx_CheckOut.Text;

                            roomtype = 1;

                            noofroms = int.Parse(Session["singleroom"].ToString());


                            roomtypeid = ddrcnx_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrcnx_HotelName.Text, ddrcnx_RoomType.Text);
                            string txtperiod_stay_from = txtcnx_CheckIn.Text;
                            string txtperiod_stay_to = txtcnx_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrcnx_HotelName.Text;

                            fromdate = txtcnx_CheckIn.Text;

                            todate = txtcnx_CheckOut.Text;


                            roomtype = 2;

                            noofroms = int.Parse(Session["doubleroom"].ToString());

                            roomtypeid = ddrcnx_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrcnx_HotelName.Text, ddrcnx_RoomType.Text);
                            string txtperiod_stay_from = txtcnx_CheckIn.Text;
                            string txtperiod_stay_to = txtcnx_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrcnx_HotelName.Text;

                            fromdate = txtcnx_CheckIn.Text;

                            todate = txtcnx_CheckOut.Text;

                            roomtype = 3;

                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddrcnx_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrcnx_HotelName.Text, ddrcnx_RoomType.Text);
                            string txtperiod_stay_from = txtcnx_CheckIn.Text;
                            string txtperiod_stay_to = txtcnx_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }




                        //  Change on 7th december
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrcnx_HotelName.Text;

                            fromdate = txtcnx_CheckIn.Text;

                            todate = txtcnx_CheckOut.Text;



                            roomtype = 1;
                            noofroms = int.Parse(Session["singleroom"].ToString());




                            roomtypeid = ddrcnx_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrcnx_HotelName.Text, ddrcnx_RoomType.Text);
                            string txtperiod_stay_from = txtcnx_CheckIn.Text;
                            string txtperiod_stay_to = txtcnx_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }
                    }
                }
                //ETC
                if (word == "Hua Hin")
                {
                    if (dt.Rows.Count > 1)
                    {
                        if (CheckBox7.Checked == true)
                        {
                            h_flag = true;
                        }
                        else
                        {
                            h_flag = false;
                        }
                    }
                    if (ddretc_HotelName.Text != "")
                    {
                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddretc_HotelName.Text;

                            fromdate = txtetc_CheckIn.Text;

                            todate = txtetc_CheckOut.Text;

                            roomtype = 1;

                            noofroms = int.Parse(Session["singleroom"].ToString());

                            roomtypeid = ddretc_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddretc_HotelName.Text, ddretc_RoomType.Text);
                            string txtperiod_stay_from = txtetc_CheckIn.Text;
                            string txtperiod_stay_to = txtetc_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }

                        }

                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddretc_HotelName.Text;

                            fromdate = txtetc_CheckIn.Text;

                            todate = txtetc_CheckOut.Text;

                            roomtype = 2;

                            noofroms = int.Parse(Session["doubleroom"].ToString());

                            roomtypeid = ddretc_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddretc_HotelName.Text, ddretc_RoomType.Text);
                            string txtperiod_stay_from = txtetc_CheckIn.Text;
                            string txtperiod_stay_to = txtetc_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }

                        }

                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddretc_HotelName.Text;

                            fromdate = txtetc_CheckIn.Text;

                            todate = txtetc_CheckOut.Text;

                            roomtype = 3;

                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddretc_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddretc_HotelName.Text, ddretc_RoomType.Text);
                            string txtperiod_stay_from = txtetc_CheckIn.Text;
                            string txtperiod_stay_to = txtetc_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }

                        }

                        // Change on 7th December
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddretc_HotelName.Text;

                            fromdate = txtetc_CheckIn.Text;

                            todate = txtetc_CheckOut.Text;



                            roomtype = 0;
                            noofroms = int.Parse("0");




                            roomtypeid = ddretc_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddretc_HotelName.Text, ddretc_RoomType.Text);
                            string txtperiod_stay_from = txtetc_CheckIn.Text;
                            string txtperiod_stay_to = txtetc_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }

                        }
                    }

                }
                // SS
                if (word == "Kanchanburi")
                {
                    if (dt.Rows.Count > 1)
                    {
                        if (CheckBox8.Checked == true)
                        {
                            h_flag = true;
                        }
                        else
                        {
                            h_flag = false;
                        }
                    }
                    if (ddrss_HotelName.Text != "")
                    {
                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrss_HotelName.Text;

                            fromdate = txtss_CheckIn.Text;

                            todate = txtss_CheckOut.Text;

                            roomtype = 1;

                            noofroms = int.Parse(Session["singleroom"].ToString());

                            roomtypeid = ddrss_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrss_HotelName.Text, ddrss_RoomType.Text);
                            string txtperiod_stay_from = txtss_CheckIn.Text;
                            string txtperiod_stay_to = txtss_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrss_HotelName.Text;

                            fromdate = txtss_CheckIn.Text;

                            todate = txtss_CheckOut.Text;

                            roomtype = 2;

                            noofroms = int.Parse(Session["doubleroom"].ToString());

                            roomtypeid = ddrss_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrss_HotelName.Text, ddrss_RoomType.Text);
                            string txtperiod_stay_from = txtss_CheckIn.Text;
                            string txtperiod_stay_to = txtss_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrss_HotelName.Text;

                            fromdate = txtss_CheckIn.Text;

                            todate = txtss_CheckOut.Text;

                            roomtype = 3;

                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddrss_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrss_HotelName.Text, ddrss_RoomType.Text);
                            string txtperiod_stay_from = txtss_CheckIn.Text;
                            string txtperiod_stay_to = txtss_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        // Changed on  7th december
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrss_HotelName.Text;

                            fromdate = txtss_CheckIn.Text;

                            todate = txtss_CheckOut.Text;



                            roomtype = 0;
                            noofroms = int.Parse("0");




                            roomtypeid = ddrss_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrss_HotelName.Text, ddrss_RoomType.Text);
                            string txtperiod_stay_from = txtss_CheckIn.Text;
                            string txtperiod_stay_to = txtss_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }
                    }
                }

                // SPS
                if (word == "Chingrai")
                {
                    if (dt.Rows.Count > 1)
                    {
                        if (CheckBox9.Checked == true)
                        {
                            h_flag = true;
                        }
                        else
                        {
                            h_flag = false;
                        }
                    }
                    if (ddrsps_HotelName.Text != "")
                    {
                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrsps_HotelName.Text;

                            fromdate = txtsps_CheckIn.Text;

                            todate = txtsps_CheckOut.Text;

                            roomtype = 1;

                            noofroms = int.Parse(Session["singleroom"].ToString());

                            roomtypeid = ddrsps_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrsps_HotelName.Text, ddrsps_RoomType.Text);
                            string txtperiod_stay_from = txtsps_CheckIn.Text;
                            string txtperiod_stay_to = txtsps_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrsps_HotelName.Text;

                            fromdate = txtsps_CheckIn.Text;

                            todate = txtsps_CheckOut.Text;

                            roomtype = 2;

                            noofroms = int.Parse(Session["doubleroom"].ToString());

                            roomtypeid = ddrsps_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrsps_HotelName.Text, ddrsps_RoomType.Text);
                            string txtperiod_stay_from = txtsps_CheckIn.Text;
                            string txtperiod_stay_to = txtsps_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrsps_HotelName.Text;

                            fromdate = txtsps_CheckIn.Text;

                            todate = txtsps_CheckOut.Text;

                            roomtype = 3;

                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddrsps_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrsps_HotelName.Text, ddrsps_RoomType.Text);
                            string txtperiod_stay_from = txtsps_CheckIn.Text;
                            string txtperiod_stay_to = txtsps_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        // Change on 7th december
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrsps_HotelName.Text;

                            fromdate = txtsps_CheckIn.Text;

                            todate = txtsps_CheckOut.Text;



                            roomtype = 1;
                            noofroms = int.Parse(Session["singleroom"].ToString());



                            roomtypeid = ddrsps_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrsps_HotelName.Text, ddrsps_RoomType.Text);
                            string txtperiod_stay_from = txtsps_CheckIn.Text;
                            string txtperiod_stay_to = txtsps_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }
                    }

                }
                // ZZ
                if (word == "Phi Phi Island")
                {
                    if (dt.Rows.Count > 1)
                    {
                        if (CheckBox10.Checked == true)
                        {
                            h_flag = true;
                        }
                        else
                        {
                            h_flag = false;
                        }
                    }
                    if (ddrzz_HotelName.Text != "")
                    {
                        if (Session["singleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrzz_HotelName.Text;

                            fromdate = txtzz_CheckIn.Text;

                            todate = txtzz_CheckOut.Text;

                            roomtype = 1;

                            noofroms = int.Parse(Session["singleroom"].ToString());

                            roomtypeid = ddrzz_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrzz_HotelName.Text, ddrzz_RoomType.Text);
                            string txtperiod_stay_from = txtzz_CheckIn.Text;
                            string txtperiod_stay_to = txtzz_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["doubleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrzz_HotelName.Text;

                            fromdate = txtzz_CheckIn.Text;

                            todate = txtzz_CheckOut.Text;

                            roomtype = 2;

                            noofroms = int.Parse(Session["doubleroom"].ToString());

                            roomtypeid = ddrzz_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrzz_HotelName.Text, ddrzz_RoomType.Text);
                            string txtperiod_stay_from = txtzz_CheckIn.Text;
                            string txtperiod_stay_to = txtzz_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }

                        if (Session["tripleroom"] != "")
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrzz_HotelName.Text;

                            fromdate = txtzz_CheckIn.Text;

                            todate = txtzz_CheckOut.Text;

                            roomtype = 3;

                            noofroms = int.Parse(Session["tripleroom"].ToString());

                            roomtypeid = ddrzz_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrzz_HotelName.Text, ddrzz_RoomType.Text);
                            string txtperiod_stay_from = txtzz_CheckIn.Text;
                            string txtperiod_stay_to = txtzz_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }


                        // change on 7th december
                        if (Session["singleroom"] == "" && Session["doubleroom"] == "" && Session["tripleroom"] == "" && (Session["fit_select_type"] != "HOTEL ONLY" || Session["fit_select_type"] != "HOTEL & TRANSFER ONLY" || Session["fit_select_type"] != "HOTEL & SIGHTSEEING ONLY"))
                        {
                            hotelcartid = hotel_cart_id;

                            cityid = word;

                            hotelid = ddrzz_HotelName.Text;

                            fromdate = txtzz_CheckIn.Text;

                            todate = txtzz_CheckOut.Text;



                            roomtype = 0;
                            noofroms = int.Parse("0");


                            roomtypeid = ddrzz_RoomType.Text;

                            orderstatus = Session["orderstatus"].ToString();

                            userid = int.Parse(usrid);

                            startdate = Session["fromdate"].ToString();

                            enddate = Session["todate"].ToString();

                            objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);

                            /*****************************SUB HOTEL ENTRY*******************************/
                            string old_id = "";
                            string new_id = "";
                            bool flag_new = true;
                            DataSet ds_hotel_detials = objFITPaymentStoreProcedure.fetch_hotel_detials("FETCH_HOTEL_DETAILS", ddrzz_HotelName.Text, ddrzz_RoomType.Text);
                            string txtperiod_stay_from = txtzz_CheckIn.Text;
                            string txtperiod_stay_to = txtzz_CheckOut.Text;
                            DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                            DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                            TimeSpan ts;
                            ts = date2.Subtract(date1.Date);
                            string txtno_of_nights = ts.TotalDays.ToString();

                            for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                            {
                                DateTime dat = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null);
                                dat = dat.AddDays(night);
                                // txtperiod_stay_from = dat.ToString();

                                dat.ToString("MM-dd-yyyy");
                                string source1 = dat.ToString();
                                string str11 = source1;
                                string[] w1 = str11.Split('/');

                                string t12 = w1[2];
                                string[] t11 = t12.Split(' ');

                                if (w1[1] == "1" || w1[1] == "2" || w1[1] == "3" || w1[1] == "4" || w1[1] == "5" || w1[1] == "6" || w1[1] == "7" || w1[1] == "8" || w1[1] == "9")
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = "0" + w1[1] + "/" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                }
                                else
                                {
                                    if (w1[0] == "1" || w1[0] == "2" || w1[0] == "3" || w1[0] == "4" || w1[0] == "5" || w1[0] == "6" || w1[0] == "7" || w1[0] == "8" || w1[0] == "9")
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + "0" + w1[0] + "/" + t11[0];
                                        //  lbl_voucher_date.Text = result;
                                    }
                                    else
                                    {
                                        txtperiod_stay_from = w1[1] + "/" + w1[0] + "/" + t11[0];
                                        // lbl_voucher_date.Text = result;
                                    }
                                }

                                for (int k = 0; k < ds_hotel_detials.Tables[0].Rows.Count; k++)
                                {
                                    if ((DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) >= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null) <= DateTime.ParseExact(ds_hotel_detials.Tables[0].Rows[k]["TO_DATE"].ToString(), "dd/MM/yyyy", null)))
                                    {
                                        if (night == 0)
                                        {
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (night != 0)
                                        {
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                        }
                                        if (old_id != new_id)
                                        {
                                            flag_new = false;
                                            objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, ds_hotel_detials.Tables[0].Rows[k - 1]["TO_DATE"].ToString(), noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            old_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();
                                            new_id = ds_hotel_detials.Tables[0].Rows[k]["SUPPLIER_HOTEL_PRICE_LIST_ID"].ToString();

                                        }
                                        if (night == int.Parse(txtno_of_nights))
                                        {
                                            if (flag_new == false)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, ds_hotel_detials.Tables[0].Rows[k]["FROM_DATE"].ToString(), todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                            if (flag_new == true)
                                            {
                                                objHotelStoreProcedure.insertupdate_Hotels_sub_details(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate, h_flag);
                                            }
                                        }

                                    }

                                }
                            }
                        }
                    }
                }
                //if (word != "")
                //{
                //    objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate);
                //}
            }




        }

        #endregion

        #region HOTEL VALIDATION
        protected void Validation()
        {

            DataTable dt = objHotelStoreProcedure.fetchpacageid(package_id);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                cityname += "," + dt.Rows[i]["CITY_NAME"].ToString();
            }



            string str1 = cityname;
            string[] words = str1.Split(',');

            foreach (string word in words)
            {
                // BANGKOK
                if (word == "Bangkok")
                {
                    try
                    {
                        if (ddrbkk_HotelName.Text != "")
                        {
                            if (txtbkk_CheckIn.Text != "" && txtbkk_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null);
                                if (txtbkk_CheckIn.Text == "")
                                {
                                    bkkin = false;
                                }
                                else if (txtbkk_CheckOut.Text == "")
                                {
                                    bkkout = false;
                                }
                                else if ((DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    bkkin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    bkkout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    bkkout2 = false;
                                }
                                else if (ddrbkk_HotelName.Text != "" && ddrbkk_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Bangkok", ddrbkk_HotelName.Text, ddrbkk_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["tripleroomerror"] = "Triple room is not available in this" + " " + ddrbkk_HotelName.Text + " " + "for" + " " + ddrbkk_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Bangkok hotel Date is not in correct format";
                    }
                    finally
                    {
                    }


                }
                // PATTYA
                if (word == "Pattaya")
                {
                    try
                    {
                        if (ddrpty_HotelName.Text != "")
                        {
                            if (txtpty_CheckIn.Text != "" && txtpty_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null);
                                if (txtpty_CheckIn.Text == "")
                                {
                                    ptyin = false;
                                }
                                else if (txtpty_CheckOut.Text == "")
                                {
                                    ptyout = false;
                                }
                                else if ((DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    ptyin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    ptyout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    ptyout2 = false;
                                }
                                else if (ddrpty_HotelName.Text != "" && ddrpty_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Pattaya", ddrpty_HotelName.Text, ddrpty_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["tripleroomerror"] = "Triple room is not available in this" + " " + ddrpty_HotelName.Text + " " + "for" + " " + ddrpty_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Pattya hotel Date is not in correct format";
                        //   Master.DisplayMessage("Pattya's hotel Date is not in correct format", "successMessage", 8000);
                    }
                }


                //PHUKET
                if (word == "Phuket")
                {
                    try
                    {
                        if (ddrphu_HotelName.Text != "")
                        {
                            if (txtphu_CheckIn.Text != "" && txtphu_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null);
                                if (txtphu_CheckIn.Text == "")
                                {
                                    phuin = false;
                                }
                                else if (txtphu_CheckOut.Text == "")
                                {
                                    phuout = false;
                                }
                                else if ((DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    phuin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    phuout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    phuout2 = false;
                                }
                                else if (ddrphu_HotelName.Text != "" && ddrphu_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Phuket", ddrphu_HotelName.Text, ddrphu_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["tripleroomerror"] = "Triple room is not available in this" + " " + ddrphu_HotelName.Text + " " + "for" + " " + ddrphu_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Phuket hotel Date is not in correct format";
                        //   Master.DisplayMessage("Pattya's hotel Date is not in correct format", "successMessage", 8000);
                    }
                }

                //BKV
                if (word == "Krabi")
                {
                    try
                    {
                        if (ddrkbv_HotelName.Text != "")
                        {
                            if (txtkbv_CheckIn.Text != "" && txtkbv_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null);
                                if (txtkbv_CheckIn.Text == "")
                                {
                                    bkvin = false;
                                }
                                else if (txtkbv_CheckOut.Text == "")
                                {
                                    bkvout = false;
                                }
                                else if ((DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    bkvin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    bkvout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    bkvout2 = false;
                                }
                                else if (ddrkbv_HotelName.Text != "" && ddrkbv_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Krabi", ddrkbv_HotelName.Text, ddrkbv_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["tripleroomerror"] = "Triple room is not available in this" + " " + ddrkbv_HotelName.Text + " " + "for" + " " + ddrkbv_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Krabi hotel Date is not in correct format";
                        //   Master.DisplayMessage("Pattya's hotel Date is not in correct format", "successMessage", 8000);
                    }
                }

                //USM
                if (word == "Samui")
                {
                    try
                    {
                        if (ddrusm_HotelName.Text != "")
                        {
                            if (txtusm_CheckIn.Text != "" && txtusm_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null);

                                if (txtusm_CheckIn.Text == "")
                                {
                                    usmin = false;
                                }
                                else if (txtusm_CheckOut.Text == "")
                                {
                                    usmout = false;
                                }
                                else if ((DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    usmin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    usmout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    usmout2 = false;
                                }
                                else if (ddrusm_HotelName.Text != "" && ddrusm_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Samui", ddrusm_HotelName.Text, ddrusm_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["tripleroomerror"] = "Triple room is not available in this" + " " + ddrusm_HotelName.Text + " " + "for" + " " + ddrusm_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Samui hotel Date is not in correct format";
                        //   Master.DisplayMessage("Pattya's hotel Date is not in correct format", "successMessage", 8000);
                    }

                }

                //CNX
                if (word == "Chiangmai")
                {
                    try
                    {
                        if (ddrcnx_HotelName.Text != "")
                        {
                            if (txtcnx_CheckIn.Text != "" && txtcnx_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null);

                                if (txtcnx_CheckIn.Text == "")
                                {
                                    cnxin = false;
                                }
                                else if (txtcnx_CheckOut.Text == "")
                                {
                                    cnxout = false;
                                }
                                else if ((DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    cnxin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    cnxout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    cnxout2 = false;
                                }
                                else if (ddrcnx_HotelName.Text != "" && ddrcnx_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Chiangmai", ddrcnx_HotelName.Text, ddrcnx_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["tripleroomerror"] = "Triple room is not available in this" + " " + ddrcnx_HotelName.Text + " " + "for" + " " + ddrcnx_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Chiangmai hotel Date is not in correct format";
                        //   Master.DisplayMessage("Pattya's hotel Date is not in correct format", "successMessage", 8000);
                    }
                }
                //ETC
                if (word == "Hua Hin")
                {
                    try
                    {
                        if (ddretc_HotelName.Text != "")
                        {
                            if (txtetc_CheckIn.Text != "" && txtetc_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null);

                                if (txtetc_CheckIn.Text == "")
                                {
                                    etcin = false;
                                }
                                else if (txtetc_CheckOut.Text == "")
                                {
                                    etcout = false;
                                }
                                else if ((DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    etcin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    etcout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    etcout2 = false;
                                }
                                else if (ddretc_HotelName.Text != "" && ddretc_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Hua Hin", ddretc_HotelName.Text, ddretc_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["tripleroomerror"] = "Triple room is not available in this" + " " + ddretc_HotelName.Text + " " + "for" + " " + ddretc_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Hua Hin hotel Date is not in correct format";
                        //   Master.DisplayMessage("Pattya's hotel Date is not in correct format", "successMessage", 8000);
                    }
                }

                // SS
                if (word == "Kanchanburi")
                {
                    try
                    {
                        if (ddrss_HotelName.Text != "")
                        {
                            if (txtss_CheckIn.Text != "" && txtss_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null);

                                if (txtss_CheckIn.Text == "")
                                {
                                    ssin = false;
                                }
                                else if (txtss_CheckOut.Text == "")
                                {
                                    ssout = false;
                                }
                                else if ((DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    ssin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    ssout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    ssout2 = false;
                                }
                                else if (ddrss_HotelName.Text != "" && ddrss_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Chingrai", ddrss_HotelName.Text, ddrss_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["tripleroomerror"] = "Triple room is not available in this" + " " + ddrss_HotelName.Text + " " + "for" + " " + ddrss_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Kanchanburi hotel Date is not in correct format";
                        //   Master.DisplayMessage("Pattya's hotel Date is not in correct format", "successMessage", 8000);
                    }
                }

                // SPS
                if (word == "Chingrai")
                {
                    try
                    {
                        if (ddrsps_HotelName.Text != "")
                        {
                            if (txtsps_CheckIn.Text != "" && txtsps_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null);

                                if (txtsps_CheckIn.Text == "")
                                {
                                    spsin = false;
                                }
                                else if (txtsps_CheckOut.Text == "")
                                {
                                    spsout = false;
                                }
                                else if ((DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    spsin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    spsout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    spsout2 = false;

                                }
                                else if (ddrsps_HotelName.Text != "" && ddrsps_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Kanchanburi", ddrsps_HotelName.Text, ddrsps_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["errormessage"] = "Triple room is not available in this" + " " + ddrsps_HotelName.Text + " " + "for" + " " + ddrsps_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Chingrai hotel Date is not in correct format";
                        //   Master.DisplayMessage("Pattya's hotel Date is not in correct format", "successMessage", 8000);
                    }


                }

                // ZZ
                if (word == "Phi Phi Island")
                {
                    try
                    {
                        if (ddrzz_HotelName.Text != "")
                        {
                            if (txtzz_CheckIn.Text != "" && txtzz_CheckOut.Text != "")
                            {
                                System.DateTime today = DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null);
                                System.DateTime today1 = DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null);

                                if (txtzz_CheckIn.Text == "")
                                {
                                    zzin = false;
                                }
                                else if (txtzz_CheckOut.Text == "")
                                {
                                    zzout = false;
                                }
                                else if ((DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    zzin1 = false;
                                }
                                else if ((DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    zzout1 = false;
                                }
                                else if ((DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null))))
                                {
                                    zzout2 = false;
                                }
                                else if (ddrzz_HotelName.Text != "" && ddrzz_RoomType.Text != "")
                                {

                                    DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Chingrai", ddrzz_HotelName.Text, ddrzz_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

                                    if (Session["tripleroom"].ToString() != "")
                                    {

                                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                        {
                                            if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                                            {
                                                if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                                                {
                                                    ViewState["tripleroomerror"] = "Triple room is not available in this" + " " + ddrzz_HotelName.Text + " " + "for" + " " + ddrzz_RoomType.Text + " " + " room type";

                                                    room_flag = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                    catch
                    {
                        dateformat_flag = false;
                        ViewState["hotelsdate_error"] = "Phi Phi Island hotel Date is not in correct format";
                        //   Master.DisplayMessage("Pattya's hotel Date is not in correct format", "successMessage", 8000);
                    }
                }

            }




        }
        #endregion

        #region SITE SEE VALIDATION

        protected void SightSeeValidation()
        {


            foreach (GridViewRow item in GridView1.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_Bkkdate");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_Bkktime");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_Bkk_noofMeals");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList1");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        bkkss = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Bangkok for" + " " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC1.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');

                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Bangkok for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }
                        }
                    }

                }
            }




            foreach (GridViewRow item in GV_Result.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");

                    TextBox datebkk = (TextBox)item.FindControl("txtSS_Ptydate");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_Ptytime");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_PtynoofMeals");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList2");
                    DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        //Master.DisplayMessage(packagename.Text + "'s" + " "+ "Date Is Required.", "successMessage", 8000);
                        ptyss = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }

                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        // ViewState["errormessage"] = "Date must be with in check-in & check-out dates." + " " + "for " + packagename.Text;
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Pattaya for" + " " + packagename.Text;
                        ptyss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC2.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');
                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Pattaya for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }
                        }
                    }

                }


            }


            foreach (GridViewRow item in GridView2.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_phuketdate");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_phukettime");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");

                    DropDownList drp = (DropDownList)item.FindControl("DropDownList3");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");

                    DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        phuss = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }

                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phuket for" + " " + packagename.Text;
                        phuss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC3.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');
                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phuket for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }

                        }
                    }



                }
            }



            foreach (GridViewRow item in GridView3.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_kbv_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_kbv_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");

                    DropDownList drp = (DropDownList)item.FindControl("DropDownList4");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DDL4 = (MulticheckDropdown)item.FindControl("DDL4");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        bkvss = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }

                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Krabi for" + " " + packagename.Text;
                        bkvss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC4.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');
                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Krabi for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }
                        }
                    }

                }
            }


            foreach (GridViewRow item in GridView4.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_usm_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_usm_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_usm_noofMeals");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList5");
                    DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        usmss = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }

                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Samui for" + " " + packagename.Text;
                        usmss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC5.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');
                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Samui for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }
                        }
                    }

                }

            }


            foreach (GridViewRow item in GridView5.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_cnx_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_cnx_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList6");
                    DDL6 = (MulticheckDropdown)item.FindControl("DDL6");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        cnxss = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }

                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chiangmai for" + " " + packagename.Text;
                        cnxss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC6.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');
                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chiangmai for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }
                        }
                    }

                }
            }


            foreach (GridViewRow item in GridView6.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_etc_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_etc_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
                    DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList7");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        etcss = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }

                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Hua Hin for" + " " + packagename.Text;
                        etcss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC7.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');
                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Hua Hin for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }
                        }
                    }

                }
            }

            foreach (GridViewRow item in GridView7.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_s_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_s_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList8");
                    DDL8 = (MulticheckDropdown)item.FindControl("DDL8");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        ssss = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }

                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Kanchanburi for" + " " + packagename.Text;
                        ssss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC8.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');
                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Kanchanburi for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }
                        }
                    }

                }


            }


            foreach (GridViewRow item in GridView8.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_sps_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_sps_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList9");
                    DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        spsss = false;
                        break;
                    }
                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chingrai for" + " " + packagename.Text;
                        spsss1 = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC9.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');
                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chingrai for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }
                        }
                    }

                }

            }



            foreach (GridViewRow item in GridView9.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_zz_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_zz_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList10");
                    DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        zzss = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }

                    else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null)))
                    {
                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phi Phi Island for" + " " + packagename.Text;
                        zzss1 = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        bkkss1 = false;
                        break;
                    }
                    else if (int.Parse(txtmeal.Text) > 1)
                    {
                        string str11 = DDC10.GetCheckBoxValues(); ;
                        string[] words11 = str11.Split(',');
                        if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                        {
                            ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                            bkkss1 = false;
                            break;
                        }
                        else
                        {
                            for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                            {

                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phi Phi Island for" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                                if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                {
                                    ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                    bkkss1 = false;
                                    break;
                                }
                            }
                        }
                    }
                }


            }

        }
        #endregion


        #region SITE SEEING vs TRANSFER PACKAGE

        protected void site_vs_transfer_date_validation()
        {
            /******************** BANGKOK *************************/
            foreach (GridViewRow item in GridView1.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_Bkkdate");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                    TextBox meal = (TextBox)item.FindControl("txtSS_Bkk_noofMeals");


                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");
                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                }

                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC1.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }



                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }



                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "BANGKOK")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }


                                                if (int.Parse(meal.Text) > 1)
                                                {
                                                    string str1 = DDC1.GetCheckBoxValues(); ;
                                                    string[] words = str1.Split(',');

                                                    if (words[0].ToString() != "")
                                                    {
                                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                        {
                                                            if (words[i].ToString() == t1.Text)
                                                            {


                                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                                {
                                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                    d1 = false;
                                                                }

                                                            }
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                                if (int.Parse(meal.Text) > 1)
                                                {
                                                    string str1 = DDC1.GetCheckBoxValues(); ;
                                                    string[] words = str1.Split(',');

                                                    if (words[0].ToString() != "")
                                                    {
                                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                        {
                                                            if (words[i].ToString() == t1.Text)
                                                            {


                                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                                {
                                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                    d1 = false;
                                                                }

                                                            }
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                            if (int.Parse(meal.Text) > 1)
                            {
                                if (lbl_flg.Text == "D")
                                {
                                    string str1 = DDC1.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "BANGKOK")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC1.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC1.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                }
                            }
                        }

                    }
                }

            }

            /******************** PATTAYA *************************/
            foreach (GridViewRow item in GV_Result.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_Ptydate");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                    TextBox meal = (TextBox)item.FindControl("txtSS_PtynoofMeals");


                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");

                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtpty_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d2 = false;
                                        }
                                    }
                                }


                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC2.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }



                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }

                                }

                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PATTAYA")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (int.Parse(meal.Text) > 1)
                        {
                            if (lbl_flg.Text == "D")
                            {
                                string str1 = DDC2.GetCheckBoxValues(); ;
                                string[] words = str1.Split(',');

                                if (words[0].ToString() != "")
                                {
                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                    {
                                        if (words[i].ToString() == t2.Text)
                                        {


                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                            {
                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                d1 = false;
                                            }

                                        }
                                    }
                                }
                            }
                            else
                            {
                                Label chk = (Label)item1.FindControl("lbltp_flag");
                                Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                if (chk.Text == " " || chk.Text == "")
                                {
                                    DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                    if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PATTAYA")
                                    {
                                        TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                        if (int.Parse(meal.Text) > 1)
                                        {
                                            string str1 = DDC2.GetCheckBoxValues(); ;
                                            string[] words = str1.Split(',');

                                            if (words[0].ToString() != "")
                                            {
                                                for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                {
                                                    if (words[i].ToString() == date.Text)
                                                    {


                                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                        {
                                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                            d1 = false;
                                                        }

                                                    }
                                                }
                                            }


                                        }
                                    }
                                    else
                                    {
                                        TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                        if (int.Parse(meal.Text) > 1)
                                        {
                                            string str1 = DDC2.GetCheckBoxValues(); ;
                                            string[] words = str1.Split(',');

                                            if (words[0].ToString() != "")
                                            {
                                                for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                {
                                                    if (words[i].ToString() == date.Text)
                                                    {


                                                        if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                        {
                                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                            d1 = false;
                                                        }

                                                    }
                                                }
                                            }
                                        }


                                    }
                                }
                            }
                        }
                    }
                }
            }

            /******************** PHUKET *************************/
            foreach (GridViewRow item in GridView2.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_phuketdate");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                    TextBox meal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");

                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");

                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtphu_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d3 = false;
                                        }
                                    }
                                }


                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC3.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }

                                }

                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PHUKET HOTEL" || ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PHUKET")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            if (int.Parse(meal.Text) > 1)
                            {
                                if (lbl_flg.Text == "D")
                                {
                                    string str1 = DDC3.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }


                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PHUKET HOTEL" || ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PHUKET")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC3.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC4.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /******************** KRABI*************************/
            foreach (GridViewRow item in GridView3.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_kbv_date");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL4 = (MulticheckDropdown)item.FindControl("DDL4");
                    TextBox meal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");

                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");

                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtkbv_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d4 = false;
                                        }
                                    }
                                }


                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC4.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }

                                }

                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "KRABI HOTEL" || ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "KRABI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            if (int.Parse(meal.Text) > 1)
                            {
                                if (lbl_flg.Text == "D")
                                {
                                    string str1 = DDC4.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "KRABI HOTEL" || ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "KRABI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC4.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC4.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                }
                            }
                        }
                    }


                }
            }

            /******************** SAMUI *************************/
            foreach (GridViewRow item in GridView4.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_usm_date");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                    TextBox meal = (TextBox)item.FindControl("txtSS_usm_noofMeals");

                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");
                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtusm_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d5 = false;
                                        }
                                    }
                                }

                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC5.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }

                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "SAMUI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            if (int.Parse(meal.Text) > 1)
                            {
                                if (lbl_flg.Text == "D")
                                {
                                    string str1 = DDC5.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "SAMUI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC5.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC5.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /******************** CHIANGMAI *************************/
            foreach (GridViewRow item in GridView5.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_cnx_date");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL6 = (MulticheckDropdown)item.FindControl("DDL6");
                    TextBox meal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");

                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");

                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtcnx_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d6 = false;
                                        }
                                    }
                                }

                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC6.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }

                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "CHAINGMAI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            if (int.Parse(meal.Text) > 1)
                            {
                                if (lbl_flg.Text == "D")
                                {
                                    string str1 = DDC6.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "CHAINGMAI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC6.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC6.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /******************** HAU HIN *************************/
            foreach (GridViewRow item in GridView6.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_etc_date");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                    TextBox meal = (TextBox)item.FindControl("txtSS_etc_noofMeals");

                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");

                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtetc_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d7 = false;
                                        }
                                    }
                                }


                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC7.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }


                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }

                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "HAU HIN")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            if (int.Parse(meal.Text) > 1)
                            {
                                if (lbl_flg.Text == "D")
                                {
                                    string str1 = DDC7.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "HUA HIN")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC7.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC7.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /******************** KANCHANBURI *************************/
            foreach (GridViewRow item in GridView7.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_s_date");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                    TextBox meal = (TextBox)item.FindControl("txtSS_s_noofMeals");

                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");
                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtss_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d8 = false;
                                        }
                                    }
                                }


                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC8.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }

                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "KANCHANBURI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            if (int.Parse(meal.Text) > 1)
                            {
                                if (lbl_flg.Text == "D")
                                {
                                    string str1 = DDC8.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "KANCHANBURI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC8.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC8.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /******************** CHIANGRAI *************************/
            foreach (GridViewRow item in GridView8.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_sps_date");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                    TextBox meal = (TextBox)item.FindControl("txtSS_sps_noofMeals");

                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");
                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtsps_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d9 = false;
                                        }
                                    }
                                }


                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC9.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }

                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "CHAINGRAI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            if (int.Parse(meal.Text) > 1)
                            {
                                if (lbl_flg.Text == "D")
                                {
                                    string str1 = DDC9.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "CHAINGRAI")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC9.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC9.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /******************** PHI PHI ISLAND *************************/
            foreach (GridViewRow item in GridView9.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_zz_date");
                    DropDownList ddpty = (DropDownList)item.FindControl("drp_ss_time");
                    DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                    TextBox meal = (TextBox)item.FindControl("txtSS_zz_noofMeals");

                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        Label id = (Label)item1.FindControl("lbltp_priceid");
                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtzz_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d10 = false;
                                        }
                                    }
                                }

                                if (int.Parse(meal.Text) > 1)
                                {
                                    string str1 = DDC10.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }


                            }
                        }
                        else if (instpid == id.Text)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (lbl_flg.Text == "D")
                                {

                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                            d1 = false;
                                        }
                                    }

                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PHI PHI ISLAND")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");
                                            if (date.Text == t1.Text)
                                            {
                                                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }

                            }

                            if (int.Parse(meal.Text) > 1)
                            {
                                if (lbl_flg.Text == "D")
                                {
                                    string str1 = DDC10.GetCheckBoxValues(); ;
                                    string[] words = str1.Split(',');

                                    if (words[0].ToString() != "")
                                    {
                                        for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                        {
                                            if (words[i].ToString() == t2.Text)
                                            {


                                                if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                {
                                                    ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                    d1 = false;
                                                }

                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Label chk = (Label)item1.FindControl("lbltp_flag");
                                    Label tp_fromto_id = (Label)item1.FindControl("lbltp_detialid");
                                    DropDownList drp_list = (DropDownList)item1.FindControl("tpdrp_time");

                                    if (chk.Text == " " || chk.Text == "")
                                    {
                                        DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                        if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PHI PHI ISLAND")
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");


                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC10.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) >= (int.Parse(ddtransfer.Text) - 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            TextBox date = (TextBox)item1.FindControl("txtTPdate");

                                            if (int.Parse(meal.Text) > 1)
                                            {
                                                string str1 = DDC10.GetCheckBoxValues(); ;
                                                string[] words = str1.Split(',');

                                                if (words[0].ToString() != "")
                                                {
                                                    for (int i = 0; i < int.Parse(meal.Text) - 1; i++)
                                                    {
                                                        if (words[i].ToString() == date.Text)
                                                        {


                                                            if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) + 400))
                                                            {
                                                                ViewState["errormessage"] = "Time is Not Allowed For " + packagename.Text + ".";
                                                                d1 = false;
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }



        #endregion




        #region ITEM COMMAND OF SIGHT SEEING





        protected void Datalist_zz_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }

        protected void datalist_sps_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }

        protected void datalist_s_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }

        protected void datalist_ETC_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }

        protected void datalist_cnx_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }

        protected void datalist_usm_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }

        protected void datalist_kbv_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }

        protected void datalist_phuket_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }

        protected void datalist_pty_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }

        protected void datalist_bkk_ItemCommand(object source, DataListCommandEventArgs e)
        {

        }
        #endregion

        #region radio button event

        public void CheckChangedforconfirmbkk(object sender, EventArgs e)
        {
            uphotelBkk.Visible = true;
            uphotelBkk.Update();

            Button1.Visible = true;
         
            Button3.Visible = true;
           
            labelerror.Text = "";
            Updateconfirm.Update();
            Session["citybkk"] = "Bangkok";
            Session["citypty"] = null;           
            Session["cityphu"] = null;
            Session["cityHuaHin"] = null;
            Session["cityss"] = null ;
            Session["citysamui"] = null; 
            Session["citykarbi"] = null;
            Session["cityChiangmai"] = null;
            Session["citysps"] = null;
            Session["cityzz"] = null;
          
            EditReconfirmDate("Bangkok");
            updatePanelUpdates();
        }

        public void CheckChangedforconfirmpty(object sender, EventArgs e)
        {
           
            upHotelPty.Visible = true;

            upHotelPty.Update();
            Button1.Visible = true;
            
            Button3.Visible = true;
           
            labelerror.Text = "";
            Updateconfirm.Update();
           
            Session["citypty"] = "Pattaya";
            Session["citybkk"] = null;
            Session["cityphu"] = null;
            Session["cityHuaHin"] = null;
            Session["cityss"] = null;
            Session["citysamui"] = null;
            Session["citykarbi"] = null;
            Session["cityChiangmai"] = null;
            Session["citysps"] = null;
            Session["cityzz"] = null;
         
            EditReconfirmDate("Pattaya");
            updatePanelUpdates();
        }

        public void CheckChangedforconfirmphu(object sender, EventArgs e)
        {
            upHotelPhuket.Visible = true;
            upHotelPhuket.Update();
            Button1.Visible = true;
           
            Button3.Visible = true;
           
            labelerror.Text = "";
            Updateconfirm.Update();
           
            Session["cityphu"] = "Phuket";
            Session["citypty"] = null;
            Session["citybkk"] = null;
           
            Session["cityHuaHin"] = null;
            Session["cityss"] = null;
            Session["citysamui"] = null;
            Session["citykarbi"] = null;
            Session["cityChiangmai"] = null;
            Session["citysps"] = null;
            Session["cityzz"] = null;

          
            EditReconfirmDate("Phuket");
            updatePanelUpdates();
        }

        public void CheckChangedforconfirmpkbv(object sender, EventArgs e)
        {
            upHotelkBV.Visible = true;
            upHotelkBV.Update();
            Button1.Visible = true;
          
            Button3.Visible = true;
           
            labelerror.Text = "";
            Updateconfirm.Update();
          
            Session["citykarbi"] = "Krabi";
            Session["citypty"] = null;
            Session["citybkk"] = null;
            Session["cityphu"] = null;
            Session["cityHuaHin"] = null;
            Session["cityss"] = null;
            Session["citysamui"] = null;
           
            Session["cityChiangmai"] = null;
            Session["citysps"] = null;
            Session["cityzz"] = null;
           
            EditReconfirmDate("Krabi");
            updatePanelUpdates();
        }

        public void CheckChangedforconfirmusm(object sender, EventArgs e)
        {
            upHotelUsm.Visible = true;
            upHotelUsm.Update();
            Button1.Visible = true;
           
            Button3.Visible = true;
           
            labelerror.Text = "";
            Updateconfirm.Update();
           
            Session["citysamui"] = "Samui";
            Session["citypty"] = null;
            Session["citybkk"] = null;
            Session["cityphu"] = null;
            Session["cityHuaHin"] = null;
            Session["cityss"] = null;
           
            Session["citykarbi"] = null;
            Session["cityChiangmai"] = null;
            Session["citysps"] = null;
            Session["cityzz"] = null;
           
            EditReconfirmDate("Samui");
            updatePanelUpdates();
        }

        public void CheckChangedforconfirmcnx(object sender, EventArgs e)
        {
            uphotelCnx.Visible = true;
            uphotelCnx.Update();
            Button1.Visible = true;
          
            Button3.Visible = true;
          
            labelerror.Text = "";
            Updateconfirm.Update();
          
            Session["cityChiangmai"] = "Chiangmai";
            Session["citypty"] = null;
            Session["citybkk"] = null;
            Session["cityphu"] = null;
            Session["cityHuaHin"] = null;
            Session["cityss"] = null;
            Session["citysamui"] = null;
            Session["citykarbi"] = null;
           
            Session["citysps"] = null;
            Session["cityzz"] = null;
        
            EditReconfirmDate("Chiangmai");
            updatePanelUpdates();
        }

        public void CheckChangedforconfirmetc(object sender, EventArgs e)
        {
            uphotelEtc.Visible = true;
            uphotelEtc.Update();
            Button1.Visible = true;
           
            Button3.Visible = true;
           
            labelerror.Text = "";
            Updateconfirm.Update();
          
            Session["cityHuaHin"] = "Hua Hin";
            Session["citypty"] = null;
            Session["citybkk"] = null;
            Session["cityphu"] = null;
            
            Session["cityss"] = null;
            Session["citysamui"] = null;
            Session["citykarbi"] = null;
            Session["cityChiangmai"] = null;
            Session["citysps"] = null;
            Session["cityzz"] = null;
           
            EditReconfirmDate("Hua Hin");
            updatePanelUpdates();

        }

        public void CheckChangedforconfirmss(object sender, EventArgs e)
        {
            upHotelSS.Visible = true;
            upHotelSS.Update();
            Button1.Visible = true;
           
            Button3.Visible = true;
           
            labelerror.Text = "";
            Updateconfirm.Update();
           
            Session["cityss"] = "Kanchanburi";
            Session["citypty"] = null;
            Session["citybkk"] = null;
            Session["cityphu"] = null;
            Session["cityHuaHin"] = null;
           
            Session["citysamui"] = null;
            Session["citykarbi"] = null;
            Session["cityChiangmai"] = null;
            Session["citysps"] = null;
            Session["cityzz"] = null;
            
            EditReconfirmDate("Kanchanburi");
            updatePanelUpdates();
        }

        public void CheckChangedforconfirmsps(object sender, EventArgs e)
        {
            uphotelsps.Visible = true;
            uphotelsps.Update();
            Button1.Visible = true;
          
            Button3.Visible = true;
           
            labelerror.Text = "";
            Updateconfirm.Update();
           
            Session["citysps"] = "Chingrai";
            Session["citypty"] = null;
            Session["citybkk"] = null;
            Session["cityphu"] = null;
            Session["cityHuaHin"] = null;
            Session["cityss"] = null;
            Session["citysamui"] = null;
            Session["citykarbi"] = null;
            Session["cityChiangmai"] = null;
            
            Session["cityzz"] = null;

         
            EditReconfirmDate("Chingrai");
            updatePanelUpdates();
        }

        public void CheckChangedforconfirmzz(object sender, EventArgs e)
        {

            uphotelZZ.Visible = true;
            uphotelZZ.Update();
            Button1.Visible = true;
           
            Button3.Visible = true;
            
            labelerror.Text = "";
            Updateconfirm.Update();
           
            Session["cityzz"] = "Phi Phi Island";
            Session["citypty"] = null;
            Session["citybkk"] = null;
            Session["cityphu"] = null;
            Session["cityHuaHin"] = null;
            Session["cityss"] = null;
            Session["citysamui"] = null;
            Session["citykarbi"] = null;
            Session["cityChiangmai"] = null;
            Session["citysps"] = null;
           
           
            EditReconfirmDate("Phi Phi Island");
            updatePanelUpdates();
        }

        protected void updatePanelUpdates()
        {
            uphotelBkk.Update();
            upHotelPty.Update();
            upHotelkBV.Update();
            upHotelUsm.Update();
            upHotelSS.Update();
            uphotelZZ.Update();
            uphotelsps.Update();
            uphotelCnx.Update();
            uphotelEtc.Update();
            upHotelPhuket.Update();
        }

        #endregion

        public void EditReconfirmDate(string city)
        {
            SqlConnection confirmemailconn = new SqlConnection(str);
            confirmemailconn.Open();

            DataTable Confirm = new DataTable();
            SqlCommand Confirm_comm = new SqlCommand("AGENT_BOOKING_EMAIL", confirmemailconn);
            Confirm_comm.CommandType = CommandType.StoredProcedure;
            Confirm_comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(Session["updateid"].ToString());
            SqlDataReader Confirm_rdr = Confirm_comm.ExecuteReader();
            Confirm.Load(Confirm_rdr);

         
           
                for (int i = 0; i < Confirm.Rows.Count; i++)
                {
                    if (Confirm.Rows[i]["CITY_NAME"].ToString() == city)
                    {
                        if (Confirm.Rows[i]["AGENT_RECONFIRMATION_DATE"].ToString() != "")
                        {
                            TextBox1.Text = Confirm.Rows[i]["AGENT_RECONFIRMATION_DATE"].ToString();
                            TextBox2.Text = Confirm.Rows[i]["CONFIRMATION_NUMBER"].ToString();
                            TextBox3.Text = Confirm.Rows[i]["PAYMENT_DUE_DATE"].ToString();
                            Updateconfirm.Update();
                        }
                    }
                }
            
        }

        #region BOOK BUTTON
        protected void btnBook_Click(object sender, EventArgs e)
        {
            if (SightSeeValidationonBook() == false)
            {
                if (ViewState["errormessage"] != null)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    btnBook.Visible = false;
                    uptransferPackage.Update();
                }
                else
                {
                    Master.DisplayMessage("Site seeing date is not between transfer package dates.", "successMessage", 8000);
                    btnBook.Visible = false;
                    uptransferPackage.Update();
                }
            }
            else
            {
                if (Request["TOURID"] != null && !string.IsNullOrEmpty(Request["TOURID"].ToString()) && Request["QUOTEID"] != null && !string.IsNullOrEmpty(Request["QUOTEID"].ToString()))
                {
                    objHotelStoreProcedure.insert_flight_entry(Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), int.Parse(Request["TOURID"].ToString()));
                    objHotelStoreProcedure.update_quote_tour_favorite(int.Parse(Session["tour"].ToString()), Convert.ToBoolean(Session["favouritepackage"].ToString()));


                }
                else
                {
                    objHotelStoreProcedure.update_quote_tour_favorite(int.Parse(ViewState["tour_id"].ToString()), Convert.ToBoolean(Session["favouritepackage"].ToString()));

                    objHotelStoreProcedure.insert_flight_entry(Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), int.Parse(ViewState["tour_id"].ToString()));
                }
               
                DataTable dtemail = objHotelStoreProcedure.Fetch_Email_From_BackOffice();
                string a = "1";
                if (dtemail.Rows.Count != 0)
                {
                    if (dtemail.Rows.Count == 1)
                    {
                        if (dtemail.Rows[0]["BOOK_EMAIL_TO_BACKOFFICE"].ToString() == "1")
                        {
                            a = "2";
                            DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["updateid"].ToString()), "2");
                        }
                        else
                        {
                            a = "1";
                            DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["updateid"].ToString()), "1");
                        }
                    }
                    else
                    {
                        if (dtemail.Rows[0]["BOOK_EMAIL_TO_BACKOFFICE"].ToString() == "1")
                        {
                            a = "2";
                            DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["updateid"].ToString()), "2");
                        }
                        else
                        {
                            a = "1";
                            DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["updateid"].ToString()), "1");
                        }
                    }
                }
                else
                {
                    a = "1";
                    DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["updateid"].ToString()), "1");
                }

                objHotelStoreProcedure.update_quote(int.Parse(Session["updateid"].ToString()), "Booked");

                updateTransferpackagedoingBook(); // Update Transfer package details

                SendMail(a);

                Master.DisplayMessage("Thank you! We Have Received your Booking.", "successMessage", 8000);
                btnGetQuote.Visible = false;
                btnBook.Visible = false;
                UpdatePanel1.Update();
                Response.Redirect("~/Views/FIT/AdminAllBookings.aspx");
            }
        }
        #endregion

        #region BACK BUTTON
        protected void btnBack_Click(object sender, EventArgs e)
        {
            if (Session["tourid"].ToString() == "" && Session["quoteid"].ToString() == "")
            {
                Response.Redirect("~/Views/FIT/BookingFit.aspx");
            }
            else
            {
                Response.Redirect("~/Views/FIT/AdminBookingFit.aspx?TOURID=" + Session["tourid"].ToString() + "&QUOTEID=" + Session["quoteid"].ToString());
            }
        }
        #endregion

        protected void Button1_onclick(object sender, EventArgs e)
        {
            pnlCompanyRoleSelection.Attributes.Add("style", "display");
            TextBox1.Text = "";
            AjaxControlToolkit.ModalPopupExtender modalPop = new AjaxControlToolkit.ModalPopupExtender();



            modalPop.ID = "popUp";



            modalPop.PopupControlID = "pnlCompanyRoleSelection";



            modalPop.TargetControlID = "Button1";



            modalPop.DropShadow = true;



            //  modalPop.BackgroundCssClass = "modalBackground";

            modalPop.CancelControlID = "ImageButton1";

            this.pnlCompanyRoleSelection.Controls.Add(modalPop);

            // this.ModalPanel.Controls.Add(lstchecks);


            modalPop.Show();

            Updateconfirm.Update();

        }

         protected void Button2_onclick(object sender, EventArgs e)
        {
           // SightSeeValidation();
           // landingdate();
            string tourFromdate = getFromdate();
            string tourTodate = getTodate();

            if (SightSeeValidationonBook() == false)
            {
                if (ViewState["errormessage"] != null)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);

                }
                else
                {
                    Master.DisplayMessage("Site seeing date is not between transfer package dates.", "successMessage", 8000);

                }
                btnUpdate.Attributes.Add("style", "display");
                UpdatePanel1.Update();
            }
            else
            {
                bool flag_time = true;
                DataTable dttra = objHotelStoreProcedure.fetchTransferPackageforedit("FETCH_ALL_DATA_FOR_TRANSFERPACKAGE_EDIT_NEW", Request["QUOTEID"].ToString());
                objHotelStoreProcedure.update_quote_tour_favorite(int.Parse(Session["tour"].ToString()), Convert.ToBoolean(Session["favouritepackage"].ToString()));
                if (dttra.Rows.Count != 0)
                {
                    if (Session["arrivalflight"].ToString() == "" && Session["departureflight"].ToString() == "" && Session["arrivaltime"].ToString() == "" && Session["departuretime"].ToString() == "")
                    {
                        Master.DisplayMessage("Please enter Arrival / Departure Flight details.", "successMessage", 5000);
                    }
                    else if (Session["arrivalflight"].ToString() == "")
                    {
                        Master.DisplayMessage("Please enter Arrival / Departure Flight details.", "successMessage", 5000);
                    }
                    else if (Session["departureflight"].ToString() == "")
                    {
                        Master.DisplayMessage("Please enter Arrival / Departure Flight details.", "successMessage", 5000);
                    }
                    else if (Session["arrivaltime"].ToString() == "")
                    {
                        Master.DisplayMessage("Please enter Arrival / Departure Flight details.", "successMessage", 5000);
                    }
                    else if (Session["departuretime"].ToString() == "")
                    {
                        Master.DisplayMessage("Please enter Arrival / Departure Flight details.", "successMessage", 5000);
                    }

     /* site seeing date and time and flag validation */
                    // SIGHT SEE
                    else if (bkkss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (bkkss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (ptyss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (ptyss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }

                    else if (phuss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (phuss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (bkvss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (bkvss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }

                    else if (usmss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (usmss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (cnxss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (cnxss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }

                    else if (etcss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (etcss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (ssss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (ssss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }

                    else if (spsss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (spsss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (zzss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (zzss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (dropdown_flag == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (Session["landingDate"].ToString() == null || Session["landingDate"].ToString() == "")
                    {
                        Master.DisplayMessage("Please enter Arrival Flight dates.", "successMessage", 8000);
                    }
                    else if (Session["flyingDate"].ToString() == null || Session["flyingDate"].ToString() == "")
                    {
                        Master.DisplayMessage("Please enter Departure Flight dates.", "successMessage", 8000);
                    }

                    else if (Session["arrivalflight"].ToString() != "" && Session["departureflight"].ToString() != "" && Session["arrivaltime"].ToString() != "" && Session["departuretime"].ToString() != "" && (DateTime.ParseExact(tourFromdate, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["landingDate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(tourTodate, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["flyingDate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        DataSet dsval = objBookingFitStoreProcedure.fetchComboData("FETCH_ORDER_STATUS");

                        string dept_date = "";
                        string enterd_date = "";
                        string arr_time;
                        string tp_time = "";
                        string tp_d_time = "";
                        string a_flag = "";
                        string d_flag = "";

                        string arrivalDate = "";
                        string departureDate = "";

                        if (dttra.Rows.Count != 0)
                        {
                            foreach (GridViewRow item in GridView10.Rows)
                            {
                                RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                                Label chk = (Label)item.FindControl("lbltp_flag");
                                Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                                Label id = (Label)item.FindControl("lbltp_priceid");
                                if (rbtn.Checked)
                                {
                                    instpid = id.Text;
                                    if (chk.Text == "A")
                                    {
                                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                                        tp_time = drp_list.Text;
                                        DropDownList drp_flg = (DropDownList)item.FindControl("drptransfer");
                                        a_flag = drp_flg.Text;
                                        TextBox txtDate = (TextBox)item.FindControl("txtTPdate");
                                        arrivalDate = txtDate.Text;

                                    }

                                    if (chk.Text == "D")
                                    {
                                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                                        tp_d_time = drp_list.Text;

                                        DropDownList drp_flg = (DropDownList)item.FindControl("drptransfer");
                                        d_flag = drp_flg.Text;

                                        TextBox txtDate = (TextBox)item.FindControl("txtTPdate");
                                        departureDate = txtDate.Text;
                                    }
                                }
                                else if (instpid == id.Text)
                                {
                                    if (chk.Text == "D")
                                    {
                                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                                        tp_d_time = drp_list.Text;

                                        DropDownList drp_flg = (DropDownList)item.FindControl("drptransfer");
                                        d_flag = drp_flg.Text;

                                        TextBox txtDate = (TextBox)item.FindControl("txtTPdate");
                                        departureDate = txtDate.Text;
                                    }

                                }
                            }


                            DateTime dt = DateTime.Parse(Session["arrivaltime"].ToString());
                            string dt1 = dt.ToString("HH:mm");

                            string str1 = dt1;
                            string[] words = str1.Split(':');

                            DateTime dt_d = DateTime.Parse(Session["departuretime"].ToString());
                            string dt2 = dt_d.ToString("HH:mm");

                            //  int i = words.Length;
                            foreach (string word in words)
                            {
                                enterd_date = enterd_date + word;
                            }

                            string str2 = dt2;
                            string[] words2 = str2.Split(':');

                            //  int i = words.Length;
                            foreach (string word2 in words2)
                            {
                                dept_date = dept_date + word2;
                            }

                            if (tp_time != "")
                            {
                                if (int.Parse(enterd_date) < int.Parse(tp_time) && int.Parse(tp_d_time) < int.Parse(dept_date))
                                {
                                    objHotelStoreProcedure.insert_flight_entry(Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), int.Parse(Request["TOURID"].ToString()));

                                    for (int i = 0; i < dttra.Rows.Count; i++)
                                    {
                                        if (dttra.Rows[i]["FLAG"].ToString() == "A")
                                        {
                                            //objHotelStoreProcedure.update_transfer_time(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_time, a_flag);
                                            objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_time, a_flag, arrivalDate);
                                        }
                                        else if (dttra.Rows[i]["FLAG"].ToString() == "D")
                                        {
                                            //objHotelStoreProcedure.update_transfer_time(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_d_time, d_flag);
                                            objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_d_time, d_flag, departureDate);
                                        }
                                    }
                                    updateSiteSeeing();
                                    Response.Redirect("~/Views/FIT/AdminFITPayment.aspx");
                                }
                                else
                                {
                                    flag_time = false;
                                    if (int.Parse(enterd_date) >= int.Parse(tp_time))
                                    {
                                        Master.DisplayMessage("Enter Arrival Flight time is not valid.", "successMessage", 3000);
                                    }
                                    if (int.Parse(tp_d_time) >= int.Parse(dept_date))
                                    {
                                        Master.DisplayMessage("Enter Departure Flight time is not valid.", "successMessage", 3000);
                                    }

                                }
                            }
                            else
                            {
                                objHotelStoreProcedure.insert_flight_entry(Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), int.Parse(Request["TOURID"].ToString()));
                                updateSiteSeeing(); /* UPDATE SITE TIMINGS */
                                Response.Redirect("~/Views/FIT/AdminFITPayment.aspx");
                            }
                        }

                    }
                    else
                    {
                        string dept_date = "";
                        string enterd_date = "";
                        string arr_time;
                        string tp_time = "";
                        string tp_d_time = "";
                        string a_flag = "";
                        string d_flag = "";
                        string arrivalDate = "";
                        string departureDate = "";

                        if (dttra.Rows.Count != 0)
                        {


                            foreach (GridViewRow item in GridView10.Rows)
                            {
                                RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                                Label chk = (Label)item.FindControl("lbltp_flag");
                                Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                                Label id = (Label)item.FindControl("lbltp_priceid");
                                if (rbtn.Checked)
                                {
                                    instpid = id.Text;
                                    if (chk.Text == "A")
                                    {
                                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                                        tp_time = drp_list.Text;
                                        DropDownList drp_flg = (DropDownList)item.FindControl("drptransfer");
                                        a_flag = drp_flg.Text;
                                        TextBox txtDate = (TextBox)item.FindControl("txtTPdate");
                                        arrivalDate = txtDate.Text;

                                    }

                                    if (chk.Text == "D")
                                    {
                                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                                        tp_d_time = drp_list.Text;

                                        DropDownList drp_flg = (DropDownList)item.FindControl("drptransfer");
                                        d_flag = drp_flg.Text;

                                        TextBox txtDate = (TextBox)item.FindControl("txtTPdate");
                                        departureDate = txtDate.Text;
                                    }
                                }
                                else if (instpid == id.Text)
                                {
                                    if (chk.Text == "D")
                                    {
                                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                                        tp_d_time = drp_list.Text;

                                        DropDownList drp_flg = (DropDownList)item.FindControl("drptransfer");
                                        d_flag = drp_flg.Text;

                                        TextBox txtDate = (TextBox)item.FindControl("txtTPdate");
                                        departureDate = txtDate.Text;
                                    }

                                }
                            }
                            DateTime dt = DateTime.Parse(Session["arrivaltime"].ToString());
                            string dt1 = dt.ToString("HH:mm");

                            DateTime dt_d = DateTime.Parse(Session["departuretime"].ToString());
                            string dt2 = dt_d.ToString("HH:mm");

                            string str1 = dt1;
                            string[] words = str1.Split(':');

                            //  int i = words.Length;
                            foreach (string word in words)
                            {
                                enterd_date = enterd_date + word;
                            }

                            string str2 = dt2;
                            string[] words2 = str2.Split(':');

                            //  int i = words.Length;
                            foreach (string word2 in words2)
                            {
                                dept_date = dept_date + word2;
                            }


                            if ((DateTime.ParseExact(tourFromdate, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["landingDate"].ToString(), "dd/MM/yyyy", null)))
                            {
                                if (tp_time != "")
                                {
                                    if (int.Parse(enterd_date) < int.Parse(tp_time))
                                    {
                                        objHotelStoreProcedure.insert_flight_entry(Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), int.Parse(Request["TOURID"].ToString()));

                                        for (int i = 0; i < dttra.Rows.Count; i++)
                                        {
                                            if (dttra.Rows[i]["FLAG"].ToString() == "A")
                                            {
                                                //objHotelStoreProcedure.update_transfer_time(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_time, a_flag);
                                                objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_time, a_flag, arrivalDate);
                                            }
                                            else if (dttra.Rows[i]["FLAG"].ToString() == "D")
                                            {
                                                //objHotelStoreProcedure.update_transfer_time(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_d_time, d_flag);
                                                objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_d_time, d_flag, departureDate);
                                            }
                                        }
                                        updateSiteSeeing(); /* UPDATE SITE TIMINGS */
                                        Response.Redirect("~/Views/FIT/AdminFITPayment.aspx");
                                    }

                                    else
                                    {
                                        flag_time = false;
                                        if (int.Parse(enterd_date) >= int.Parse(tp_time))
                                        {
                                            Master.DisplayMessage("Enter Arrival Flight time is not valid.", "successMessage", 3000);
                                        }

                                    }
                                }
                            }

                            if ((DateTime.ParseExact(tourTodate, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["flyingDate"].ToString(), "dd/MM/yyyy", null)))
                            {
                                if (tp_time != "")
                                {
                                    if (int.Parse(tp_d_time) < int.Parse(dept_date))
                                    {
                                        objHotelStoreProcedure.insert_flight_entry(Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), int.Parse(Request["TOURID"].ToString()));

                                        for (int i = 0; i < dttra.Rows.Count; i++)
                                        {
                                            if (dttra.Rows[i]["FLAG"].ToString() == "A")
                                            {
                                                //objHotelStoreProcedure.update_transfer_time(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_time, a_flag);
                                                objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_time, a_flag, arrivalDate);
                                            }
                                            else if (dttra.Rows[i]["FLAG"].ToString() == "D")
                                            {
                                                //objHotelStoreProcedure.update_transfer_time(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_d_time, d_flag);
                                                objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_d_time, d_flag, departureDate);
                                            }
                                        }
                                        updateSiteSeeing(); /* UPDATE SITE TIMINGS */
                                        Response.Redirect("~/Views/FIT/AdminFITPayment.aspx");
                                    }

                                    else
                                    {
                                        flag_time = false;

                                        if (int.Parse(tp_d_time) >= int.Parse(dept_date))
                                        {
                                            Master.DisplayMessage("Enter Departure Flight time is not valid.", "successMessage", 3000);
                                        }

                                    }
                                }
                            }

                            if ((DateTime.ParseExact(tourFromdate, "dd/MM/yyyy", null) != DateTime.ParseExact(Session["landingDate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(tourTodate, "dd/MM/yyyy", null) != DateTime.ParseExact(Session["flyingDate"].ToString(), "dd/MM/yyyy", null)))
                            {
                                if (tp_time != "")
                                {

                                    objHotelStoreProcedure.insert_flight_entry(Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), int.Parse(Request["TOURID"].ToString()));

                                    for (int i = 0; i < dttra.Rows.Count; i++)
                                    {
                                        if (dttra.Rows[i]["FLAG"].ToString() == "A")
                                        {
                                            //objHotelStoreProcedure.update_transfer_time(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_time, a_flag);
                                            objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_time, a_flag, arrivalDate);
                                        }
                                        else if (dttra.Rows[i]["FLAG"].ToString() == "D")
                                        {
                                            //objHotelStoreProcedure.update_transfer_time(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_d_time, d_flag);
                                            objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), tp_d_time, d_flag, departureDate);
                                        }
                                    }
                                    updateSiteSeeing(); /* UPDATE SITE TIMINGS */
                                    Response.Redirect("~/Views/FIT/AdminFITPayment.aspx");



                                }
                            }

                        }
                    }
                }

                else if (dttra.Rows.Count == 0)
                {
                    if (Session["arrivalflight"].ToString() == "" && Session["departureflight"].ToString() == "" && Session["arrivaltime"].ToString() == "" && Session["departuretime"].ToString() == "")
                    {
                        Master.DisplayMessage("Please enter Arrival / Departure Flight details.", "successMessage", 5000);
                    }
                    /* site seeing date and time and flag validation */
                    // SIGHT SEE
                    else if (bkkss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (bkkss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (ptyss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (ptyss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }

                    else if (phuss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (phuss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (bkvss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (bkvss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }

                    else if (usmss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (usmss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (cnxss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (cnxss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }

                    else if (etcss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (etcss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (ssss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (ssss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }

                    else if (spsss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (spsss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (zzss == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (zzss1 == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else if (dropdown_flag == false)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                    }
                    else
                    {
                        objHotelStoreProcedure.insert_flight_entry(Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), int.Parse(Request["TOURID"].ToString()));
                        updateSiteSeeing();
                        Response.Redirect("~/Views/FIT/AdminFITPayment.aspx");
                    }
                }



            }
        }

    

        protected void Buttonsend_Click(object sender, EventArgs e)
        {
            cc.Attributes.Add("style", "display");
            SendMailQuoteforagent();
            //cc.Attributes.Add("style", "display:none");
            UpdatePanel2.Update();

        }

        protected void Button6_Click(object sender, EventArgs e)
        {


            try
            {
                System.DateTime today1 = DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null);

                string result;
                System.DateTime today = DateTime.Now;
                today.ToString("MM-dd-yyyy");
                string source = today.ToString();
                string str1 = source;
                string[] w = str1.Split('/');

                string t = w[2];
                string[] t1 = t.Split(' ');

                if (w[1] == "1" || w[1] == "2" || w[1] == "3" || w[1] == "4" || w[1] == "5" || w[1] == "6" || w[1] == "7" || w[1] == "8" || w[1] == "9")
                {
                    if (w[0] == "1" || w[0] == "2" || w[0] == "3" || w[0] == "4" || w[0] == "5" || w[0] == "6" || w[0] == "7" || w[0] == "8" || w[0] == "9")
                    {
                        result = "0" + w[1] + "/" + "0" + w[0] + "/" + t1[0];
                        
                    }
                    else
                    {
                        result = "0" + w[1] + "/" + w[0] + "/" + t1[0];
                        
                    }
                }
                else
                {
                    if (w[0] == "1" || w[0] == "2" || w[0] == "3" || w[0] == "4" || w[0] == "5" || w[0] == "6" || w[0] == "7" || w[0] == "8" || w[0] == "9")
                    {
                        result = w[1] + "/" + "0" + w[0] + "/" + t1[0];
                        
                    }
                    else
                    {
                        result = w[1] + "/" + w[0] + "/" + t1[0];
                        
                    }
                }
                if (Rbtnconfirmpty.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and Pattay's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }

                }
                else if (rbtnconfirmphu.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and phuket's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }
                }
                else if (rbtnconfirmkbv.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and krabi's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }
                }
                else if (rbtnconfirmusm.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and samui's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }
                }
                else if (rbtnconfirmcnx.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and Chiangmai's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }
                }
                else if (rbtnconfirmetc.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and Hua Hin's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }
                }
                else if (rbtnconfirmss.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and Kanchanburi's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }
                }
                else if (rbtnconfirsps.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and Chingrai's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }
                }
                else if (rbtnconfirmzz.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and Chiangmai's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }
                }
                else if (rbtnbkkconfirm.Checked == true)
                {
                    if ((DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) && (DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(result, "dd/MM/yyyy", null)))
                    {
                        labelerror.Text = "Please enter date between today's date and Bangkok's hotel check in date";
                        flag_popup = false;
                    }
                    else
                    {
                        flag_popup = true;
                    }
                }
               
                if (flag_popup == false)
                {
                    labelerror.Text = "Date entered is invalid";
                    pnlCompanyRoleSelection.Attributes.Add("style", "display");
                    TextBox1.Text = "";
                    AjaxControlToolkit.ModalPopupExtender modalPop = new AjaxControlToolkit.ModalPopupExtender();
                    modalPop.ID = "popUp";
                    modalPop.PopupControlID = "pnlCompanyRoleSelection";
                    modalPop.TargetControlID = "Button6";
               
                    modalPop.CancelControlID = "ImageButton1";
                    this.pnlCompanyRoleSelection.Controls.Add(modalPop);
               
                    modalPop.Show();
                    modalPop.TargetControlID = "Button1";
                    Updateconfirm.Update();
                }
                else
                {


                    btnBook.Attributes.Add("style", "display:none");

                    String bkk = null;
                    String pty = null;
                    String phu = null;
                    String karbi = null;
                    String samui = null;
                    String chiang = null;
                    String huahin = null;
                    String chingrai = null;
                    String kanchaburi = null;
                    String zz = null;
                    String qid = null;
                    string empflag = Session["FLAG"].ToString();
                    DataTable dtad = objHotelStoreProcedure.objfetchusername("FETCH_USER_NAME_FOR_MAIL", Session["rel_sr_no"].ToString());
                    Session["email"] = dtad.Rows[0]["CUST_REL_EMAIL"].ToString();
                    if (Session["quoteid"] != null)
                    {
                        qid = Session["quoteid"].ToString();
                      
                        DataTable dt12 = objHotelStoreProcedure.fetchpacageid(package_id);
                        DataSet ds1 = objHotelStoreProcedure.FetchForFitHotelEdit("FETCH_ALL_DATA_FOR_HOTEL_ONLY_TRUE", Session["quoteid"].ToString());
                        DataTable dt11 = ds1.Tables[0];
                        if (dt12.Rows.Count > 1)
                        {

                            if (ds1.Tables[0].Rows.Count > 1)
                            {

                                countcity = dt11.Rows.Count;
                                for (int i = 0; i < countcity; i++)
                                {
                                    if (i == 0)
                                    {
                                        countryname = dt11.Rows[i]["CITY_NAME"].ToString();
                                    }
                                    else if (i == 1)
                                    {
                                        countryname = dt11.Rows[i]["CITY_NAME"].ToString();
                                    }
                                }
                            }
                            else
                            {
                                countryname = dt11.Rows[0]["CITY_NAME"].ToString();
                            }
                        }
                        else
                        {
                            countryname = dt11.Rows[0]["CITY_NAME"].ToString();

                        }

                    }

                    if (Session["citypty"] != null)
                    {
                        pty = Session["citypty"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, pty, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusPty.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusPty.Visible = true;
                        ptytd.Attributes.Add("style", "display:none");
                        ptyredtd.Attributes.Add("style", "display:none");
                        upHotelPty.Update();
                        if ("Pattaya" == pty)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) <= DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();

                                if (empflag == "A" || empflag == "E")
                                {
                                   // Button2.Visible = true;
                                }
                                UpdatePanel1.Update();
                            }
                            else
                            {
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                   // Button2.Visible = true;
                                }

                            }
                        }
                        Session.Remove("citypty");
                    }
                    if (Session["cityphu"] != null)
                    {
                        phu = Session["cityphu"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, phu, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusPhu.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusPhu.Visible = true;
                        phutd.Attributes.Add("style", "display:none");
                        phuredtd.Attributes.Add("style", "display:none");
                        upHotelPhuket.Update();
                        if ("Phuket" == phu)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                   // Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                            else
                            {

                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                        }
                        Session.Remove("cityphu");
                    }
                    if (Session["citykarbi"] != null)
                    {
                        karbi = Session["citykarbi"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, karbi, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusKbv.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusKbv.Visible = true;
                        kbvtd.Attributes.Add("style", "display:none");
                        kbvredtd.Attributes.Add("style", "display:none");
                        upHotelkBV.Update();
                        if ("Krabi" == karbi)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                   // Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                            else
                            {
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                   // Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                        }
                        Session.Remove("citykarbi");

                    }
                    if (Session["citysamui"] != null)
                    {
                        samui = Session["citysamui"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, samui, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusKbvUsm.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusKbvUsm.Visible = true;
                        usmtd.Attributes.Add("style", "display:none");
                        usmredtd.Attributes.Add("style", "display:none");
                        upHotelUsm.Update();
                        if ("Samui" == samui)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                            else
                            {
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                        }
                        Session.Remove("citysamui");

                    }
                    if (Session["cityChiangmai"] != null)
                    {
                        chiang = Session["cityChiangmai"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, chiang, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusCnx.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusCnx.Visible = true;
                        cnxtd.Attributes.Add("style", "display:none");
                        cnxredtd.Attributes.Add("style", "display:none");
                        uphotelCnx.Update();
                        if ("Chiangmai" == chiang)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                 //   Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                            else
                            {
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                        }
                        Session.Remove("cityChiangmai");

                    }
                    if (Session["cityHuaHin"] != null)
                    {
                        huahin = Session["cityHuaHin"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, huahin, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusEtc.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusEtc.Visible = true;
                        etctd.Attributes.Add("style", "display:none");
                        etcredtd.Attributes.Add("style", "display:none");
                        uphotelEtc.Update();
                        if ("Hua Hin" == huahin)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                            else
                            {

                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                        }
                        Session.Remove("cityHuaHin");

                    }
                    if (Session["cityss"] != null)
                    {
                        kanchaburi = Session["cityss"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, kanchaburi, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusSs.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusSs.Visible = true;
                        sstd.Attributes.Add("style", "display:none");
                        ssredtd.Attributes.Add("style", "display:none");
                        upHotelSS.Update();
                        if ("Kanchanburi" == kanchaburi)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                            else
                            {

                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                        }
                        Session.Remove("cityss");

                    }
                    if (Session["citysps"] != null)
                    {
                        chingrai = Session["citysps"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, chingrai, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusSps.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusSps.Visible = true;
                        spstd.Attributes.Add("style", "display:none");
                        spsredtd.Attributes.Add("style", "display:none");
                        uphotelsps.Update();
                        if ("Chiangrai" == chingrai)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                            else
                            {

                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                        }
                        Session.Remove("citysps");

                    }
                    if (Session["cityzz"] != null)
                    {
                        zz = Session["cityzz"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, zz, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusZz.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusZz.Visible = true;
                        zztd.Attributes.Add("style", "display:none");
                        zzredtd.Attributes.Add("style", "display:none");
                        uphotelZZ.Update();
                        if ("Phi Phi Island" == zz)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                            else
                            {

                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();

                            }
                        }
                        Session.Remove("cityzz");

                    }
                    if (Session["citybkk"] != null)
                    {

                        bkk = Session["citybkk"].ToString();
                        DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, bkk, "Confirmed", TextBox2.Text, TextBox3.Text);
                        DataTable dt = ds.Tables[0];
                        DataTable dt1 = ds.Tables[1];
                        lblStatusBkk.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                        lblStatusBkk.Visible = true;
                        bkktd.Attributes.Add("style", "display:none");
                        bkkredtd.Attributes.Add("style", "display:none");
                        uphotelBkk.Update();
                        if ("Bangkok" == bkk)
                        {
                            if (DateTime.ParseExact(dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString(), "dd/MM/yyyy", null) <= DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null))
                            {
                                String HOTEL_RECONFIRMATATION_DATE = dt.Rows[0]["HOTEL_RECONFIRMATATION_DATE"].ToString();
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, HOTEL_RECONFIRMATATION_DATE, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();


                            }
                            else
                            {
                                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", qid, TextBox1.Text, "To Be Reconfirmed");
                                ConfirmButtonEmail();
                                if (empflag == "A" || empflag == "E")
                                {
                                  //  Button2.Visible = true;
                                }
                                UpdatePanel1.Update();


                            }
                        }
                        Session.Remove("citybkk");
                    }
                    TextBox1.Text = "";
                    TextBox2.Text = "";
                    TextBox3.Text = "";
                    label63.Text = "";
                    labelerror.Text = "";
                   
                    pnlCompanyRoleSelection.Attributes.Add("style", "display:none");

                    if (Session["fit_select_type"] != null)
                    {
                        if (Session["fit_select_type"].ToString() == "HOTEL ONLY")
                        {
                            Button2.Visible = true;
                        }
                        else
                        {
                            Button2.Visible = false;
                        }
                    }

                    Updateconfirm.Update();
                    
                    UpdatePanel1.Update();

                    Master.DisplayMessage("Hotel confirmed successfully.", "successMessage", 3000);
                }
            }
            catch
            {
                labelerror.Text = "Enter Date Is not in valid Format";

                pnlCompanyRoleSelection.Attributes.Add("style", "display");
                TextBox1.Text = "";
                AjaxControlToolkit.ModalPopupExtender modalPop = new AjaxControlToolkit.ModalPopupExtender();



                modalPop.ID = "popUp";



                modalPop.PopupControlID = "pnlCompanyRoleSelection";



                modalPop.TargetControlID = "Button6";



                //modalPop.DropShadow = true;



                //  modalPop.BackgroundCssClass = "modalBackground";

                modalPop.CancelControlID = "ImageButton1";

                this.pnlCompanyRoleSelection.Controls.Add(modalPop);

                // this.ModalPanel.Controls.Add(lstchecks);


                modalPop.Show();

                modalPop.TargetControlID = "Button1";

                Updateconfirm.Update();

            }
        }

        #region APRROVED CASH ON ARRIVAL REQUEST
        protected void btnapproved_Click(object sender, EventArgs e)
        {

            DataSet ds = objBookingFitStoreProcedure.fetchComboData("FETCH_ORDER_STATUS");
            string EmailQoute_id = Session["updateid"].ToString();
            DataTable dtad = objHotelStoreProcedure.fetchemailusingqUOTEid("FETCH_EMAIL_FOR_APPROVED_AND_DISAPPROVED", Session["updateid"].ToString());

            string str = ConfigurationManager.ConnectionStrings["CRM"].ToString();
            DataTable dt_supplier_id = new DataTable();
            SqlConnection conn = new SqlConnection(str);

            //generate authorisation number
            DataTable dtautho = objHotelStoreProcedure.fetchAUTHORISATIONnum("INSERT_AUTHORISATIONNO_TOUR_QUOTE", Session["updateid"].ToString(), ds.Tables[0].Rows[15]["AutoSearchResult"].ToString());
            dtautho.Rows[0]["AUTHORISATIONNUMBER"].ToString();
            conn.Open();
            string authorisation_no = dtautho.Rows[0]["AUTHORISATIONNUMBER"].ToString();


            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");

            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[16]["AutoSearchResult"].ToString());

            if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
            {
                string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
                string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
                string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
                string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();


                string fromemail = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                {
                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString());

                    if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                    {
                        fromemail = dtad.Rows[0]["USER_NAME"].ToString();
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        fromemail = "accounts@travelzunlimited.com";
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Supplier")
                    {

                    }

                    else
                    {
                        fromemail = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }

                string toemail1 = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                {
                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString());

                    if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                    {
                        toemail1 = dtad.Rows[0]["USER_NAME"].ToString();
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        toemail1 = "accounts@travelzunlimited.com";
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Supplier")
                    {

                    }

                    else
                    {
                        toemail1 = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }

                string cc = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                {
                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());

                    if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Agent")
                    {
                        cc = dtad.Rows[0]["USER_NAME"].ToString();
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        cc = "accounts@travelzunlimited.com";
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Supplier")
                    {

                    }

                    else
                    {
                        cc = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }

                string bcc = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                {
                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString());

                    if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                    {
                        bcc = dtad.Rows[0]["USER_NAME"].ToString();
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        bcc = "accounts@travelzunlimited.com";
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Supplier")
                    {

                    }

                    else
                    {
                        bcc = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }
                
                string subjct = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();
                string body = "";

                body = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();
                body = body.Replace("&lt;%AUTHORIZATION_NO%&gt;", authorisation_no);
                try
                {
                    MailMessage message = new MailMessage();
                    message.From = new MailAddress(fromemail);
                    message.To.Add(new MailAddress(toemail1.ToString()));
                 
                    message.Subject = subjct;
                 
                    message.Body = body;
                    message.IsBodyHtml = true;
                    if (cc == "")
                    {
                    }
                    else
                    {
                        message.CC.Add(new MailAddress(cc));
                    }

                    if (bcc != "")
                    {
                        message.Bcc.Add(new MailAddress(bcc));
                    }
                    SmtpClient client = new SmtpClient();
                    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                    client.Credentials = info;
                    client.Host = smtphost;
                    client.Port = 25;
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.Send(message);
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, subjct, body, int.Parse(Session["updateid"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, subjct, body, int.Parse(Session["updateid"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 2);


            }
            Master.DisplayMessage("Thank you! We Have Approved your Request.", "successMessage", 8000);

            UpdatePanel1.Update();

        }
        #endregion

        #region DISAPPROVED CASH ON ARRIVAL REQUEST
        protected void btndisapproved_Click(object sender, EventArgs e)
        {

            DataSet ds = objBookingFitStoreProcedure.fetchComboData("FETCH_ORDER_STATUS");
            string EmailQoute_id = Session["updateid"].ToString();
            DataTable dtad = objHotelStoreProcedure.fetchemailusingqUOTEid("FETCH_EMAIL_FOR_APPROVED_AND_DISAPPROVED", Session["updateid"].ToString());

            string str = ConfigurationManager.ConnectionStrings["CRM"].ToString();
            DataTable dt_supplier_id = new DataTable();
            SqlConnection conn = new SqlConnection(str);
            objHotelStoreProcedure.update_quote(int.Parse(Session["updateid"].ToString()), ds.Tables[0].Rows[3]["AutoSearchResult"].ToString());
            conn.Open();

            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");

            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[17]["AutoSearchResult"].ToString());

            if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
            {
                string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
                string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
                string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
                string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();

                string fromemail = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                {
                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString());

                    if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                    {
                        fromemail = dtad.Rows[0]["USER_NAME"].ToString();
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        fromemail = "accounts@travelzunlimited.com";
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Supplier")
                    {

                    }

                    else
                    {
                        fromemail = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }

                string toemail1 = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                {
                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString());

                    if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                    {
                        toemail1 = dtad.Rows[0]["USER_NAME"].ToString();
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        toemail1 = "accounts@travelzunlimited.com";
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Supplier")
                    {

                    }

                    else
                    {
                        toemail1 = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }

                string cc = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                {
                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());

                    if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Agent")
                    {
                        cc = dtad.Rows[0]["USER_NAME"].ToString();
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        cc = "accounts@travelzunlimited.com";
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Supplier")
                    {

                    }

                    else
                    {
                        cc = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }

                string bcc = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                {
                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString());

                    if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                    {
                        bcc = dtad.Rows[0]["USER_NAME"].ToString();
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        bcc = "accounts@travelzunlimited.com";
                    }

                    else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Supplier")
                    {

                    }

                    else
                    {
                        bcc = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }




                string subjct = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();
                string body = "";

                body = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();
                //   string body = "";
                //   body = "Dear Agent,<br><br>Your requested for Cash on Arrival has been DisApproved.<br><br>Kindly Login to CRM and please select the Another Payment Mode.<br><br> Best Reagrds <br>Travelz Unlmited";

                try
                {



                    MailMessage message = new MailMessage();
                    message.From = new MailAddress(fromemail);
                    message.To.Add(new MailAddress(toemail1.ToString()));
                    if (cc == "")
                    {
                    }
                    else
                    {
                        message.CC.Add(new MailAddress(cc));
                    }

                    if (bcc != "")
                    {
                        message.Bcc.Add(new MailAddress(bcc));
                    }
                    //   message.Subject = "Request for Cash on Arrival Arrival date : Departure date : ";
                    message.Subject = subjct;

                    message.Body = body;
                    message.IsBodyHtml = true;

                    SmtpClient client = new SmtpClient();
                    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                    client.Credentials = info;
                    client.Host = smtphost;
                    client.Port = int.Parse(smtpport);
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.Send(message);
                }
                catch (Exception ex)
                {

                }
                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, subjct, body, int.Parse(Session["updateid"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, subjct, body, int.Parse(Session["updateid"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 2);




            }
            Master.DisplayMessage("Thank you! We Have DisApproved your Request.", "successMessage", 8000);
            UpdatePanel1.Update();

        }
        #endregion

        #region APPROVED CANCELLATION BUTTON
        protected void btnapprovedcancellation_Click(object sender, EventArgs e)
        {
            DataSet dsagent = objHotelStoreProcedure.upadteagentfees(Session["updateid"].ToString(), Session["agentfees"].ToString());

            insert_update_hotels_for_cancel();

            insert_update_transfer_pac();

            update_ss_bkk();

            update_ss_tp_pty();

            update_ss_tp_phu();

            update_ss_tp_kbv();

            update_ss_tp_usm();

            update_ss_tp_cnx();

            update_ss_tp_s();

            update_ss_tp_sps();

            update_ss_tp_zz();

            update_ss_tp_etc();

            mailforagentcancellationapproved();

            DataTable DTINVOICE = objHotelStoreProcedure.FECH_INVOICE_FROM_QUOTE(Session["updateid"].ToString());

            #region Shasvat

            string result;
            System.DateTime today = DateTime.Now;
            today.ToString("MM-dd-yyyy");
            string source = today.ToString();
            string str1 = source;
            string[] w = str1.Split('/');

            string t = w[2];
            string[] t1 = t.Split(' ');

            if (w[1] == "1" || w[1] == "2" || w[1] == "3" || w[1] == "4" || w[1] == "5" || w[1] == "6" || w[1] == "7" || w[1] == "8" || w[1] == "9")
            {
                if (w[0] == "1" || w[0] == "2" || w[0] == "3" || w[0] == "4" || w[0] == "5" || w[0] == "6" || w[0] == "7" || w[0] == "8" || w[0] == "9")
                {
                    result = "0" + w[1] + "/" + "0" + w[0] + "/" + t1[0];
                   
                }
                else
                {
                    result = "0" + w[1] + "/" + w[0] + "/" + t1[0];
                   
                }
            }
            else
            {
                if (w[0] == "1" || w[0] == "2" || w[0] == "3" || w[0] == "4" || w[0] == "5" || w[0] == "6" || w[0] == "7" || w[0] == "8" || w[0] == "9")
                {
                    result = w[1] + "/" + "0" + w[0] + "/" + t1[0];
                   
                }
                else
                {
                    result = w[1] + "/" + w[0] + "/" + t1[0];
                   
                }
            }


            DataSet ds = objCancellationStoredProcedure.Get_Purchase_Voucher(DTINVOICE.Rows[0]["INVOICE_NO"].ToString());

            DataSet ds_vt = objFITPaymentStoreProcedure.fetch_voucher_type("FETCH_VOUCHER_TYPE");

            DataSet ds_vsstatus = objFITPaymentStoreProcedure.fetch_voucher_type("FETCH_VOUCHER_STATUS_ID");

            DataSet ds_all_gl_code = objFITPaymentStoreProcedure.fetch_all_gl_code();

            DataSet supplier_cancel = objFITPaymentStoreProcedure.fetch_voucher_type("FETCH_ALL_GL_CODE_SUPPLIER_CANCEL");

            DataSet agent_cancel = objFITPaymentStoreProcedure.fetch_voucher_type("FETCH_ALL_GL_CODE_AGENT_CANCEL");

            // sales
            DataSet ds_rate = objFITPaymentStoreProcedure.fetch_conversion_rate();

            DataSet ds11 = objFITPaymentStoreProcedure.fetch_invoice_dateials("FETCH_DESCRIPTION_FROM_INVOICE_NO", DTINVOICE.Rows[0]["INVOICE_NO"].ToString());

            DataSet ds6 = objFITPaymentStoreProcedure.set_gl_code("FETCH_GENERAL_LEGER_CODE", ds11.Tables[0].Rows[0]["CUST_ID"].ToString(), ds11.Tables[0].Rows[0]["FLAG"].ToString());

            DataSet ds22 = objFITPaymentStoreProcedure.fetch_currency_for_company("FETCH_CURRENCY_FROM_COMPANY", int.Parse(Session["CompanyId"].ToString()));

            string total_sales_amount = (decimal.Parse(ds11.Tables[0].Rows[0]["VOUCHER_AMOUNT"].ToString()) - decimal.Parse(Session["agentfees"].ToString()) * decimal.Parse(ds_rate.Tables[0].Rows[0]["CONVERSION_RATE"].ToString())).ToString();

            objFITPaymentStoreProcedure.insert_accounts_entry(0, ds6.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[2]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "This is credit not for Invoice No :- '" + DTINVOICE.Rows[0]["INVOICE_NO"].ToString() + "' ", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, total_sales_amount, "", "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 1);
            objFITPaymentStoreProcedure.insert_accounts_entry(0, ds6.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[2]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, total_sales_amount, "", "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);
            objFITPaymentStoreProcedure.insert_accounts_entry(0, ds_all_gl_code.Tables[0].Rows[11]["AutoSearchResult"].ToString(), DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[2]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", total_sales_amount, "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);

            DataSet dsCancellation = objFITPaymentStoreProcedure.fetch_voucher_type("GET_CANCELLATION_GL_CODE");

            ///**************** VOUCHER NO (CREDIT NOTE) ******************/
            //insert_voucher_no(DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), ds_vt.Tables[0].Rows[2]["AutoSearchResult"].ToString());
            ///*************************************************************/

            objFITPaymentStoreProcedure.insert_accounts_entry(0, ds6.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[9]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "This is sales Cancellation Fees for Invoice no :- '" + DTINVOICE.Rows[0]["INVOICE_NO"].ToString() + "' ", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", (decimal.Parse(Session["agentfees"].ToString()) * decimal.Parse(ds_rate.Tables[0].Rows[0]["CONVERSION_RATE"].ToString())).ToString(), "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 1);
            objFITPaymentStoreProcedure.insert_accounts_entry(0, ds_all_gl_code.Tables[0].Rows[11]["AutoSearchResult"].ToString(), DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[9]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", (decimal.Parse(Session["agentfees"].ToString()) * decimal.Parse(ds_rate.Tables[0].Rows[0]["CONVERSION_RATE"].ToString())).ToString(), "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);
            objFITPaymentStoreProcedure.insert_accounts_entry(0, dsCancellation.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[9]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, (decimal.Parse(Session["agentfees"].ToString()) * decimal.Parse(ds_rate.Tables[0].Rows[0]["CONVERSION_RATE"].ToString())).ToString(), "", "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);
          
            objFITPaymentStoreProcedure.updte_voucher_status_on_cancel(ds_vsstatus.Tables[0].Rows[4]["AutoSearchResult"].ToString(), int.Parse(DTINVOICE.Rows[0]["SEQ_NO"].ToString()));

            ///**************** VOUCHER NO (SALES CANCELLATION) ******************/
            //insert_voucher_no(DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), ds_vt.Tables[0].Rows[9]["AutoSearchResult"].ToString());
            /*************************************************************/

            //for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            //{
            //    if (ds.Tables[0].Rows[i]["SUPPLIER_TYPE_NAME"].ToString() == "Hotel")
            //    {
            //        DataSet ds1 = objFITPaymentStoreProcedure.fetch_hotel_data("FETCH_INVOICE_NO_DETAILS_FROM_SUPPLIER", DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), ds.Tables[0].Rows[i]["CHAIN_NAME"].ToString());

            //        DataSet dsgl_hotel = objFITPaymentStoreProcedure.set_gl_code("FETCH_GENERAL_LEGER_CODE", ds.Tables[0].Rows[i]["SUPPLIER_SR_NO"].ToString(), "S");

            //        if (ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString() != "")
            //        {
            //            string txt_amount1 = (decimal.Parse(ds.Tables[0].Rows[i]["TOTAL_AMOUNT"].ToString()) - decimal.Parse(ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString())).ToString();



            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_hotel.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", txt_amount1, "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 1);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_hotel.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", txt_amount1, "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, ds_all_gl_code.Tables[0].Rows[2]["AutoSearchResult"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, txt_amount1, "", "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);

            //            ///**************** VOUCHER NO (DEBIT NOTE) ******************/
            //            //insert_voucher_no(ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString());
            //            ///*************************************************************/

            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_hotel.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString(), "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 1);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_hotel.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString(), "", "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, ds_all_gl_code.Tables[0].Rows[2]["AutoSearchResult"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString(), "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);

            //            ///**************** VOUCHER NO (DEBIT CANCELLATION) ******************/
            //            //insert_voucher_no(ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString());
            //            ///***********************************************************/

            //            //objFITPaymentStoreProcedure.updte_voucher_status_on_cancel(ds_vsstatus.Tables[0].Rows[4]["AutoSearchResult"].ToString(), int.Parse(ds.Tables[0].Rows[i]["SEQ_NO"].ToString()));
            //        }

            //    }
            //    else if (ds.Tables[0].Rows[i]["SUPPLIER_TYPE_NAME"].ToString() == "Transfer Package Company")
            //    {
            //        DataSet ds1 = objFITPaymentStoreProcedure.fetch_hotel_data("FETCH_SS_TP_FOR_PURCHASE", DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), ds.Tables[0].Rows[i]["CHAIN_NAME"].ToString());

            //        DataSet dsgl_tp = objFITPaymentStoreProcedure.set_gl_code("FETCH_GENERAL_LEGER_CODE", ds.Tables[0].Rows[i]["SUPPLIER_SR_NO"].ToString(), "S");
            //        if (ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString() != "")
            //        {
            //            string txt_amount1 = (decimal.Parse(ds.Tables[0].Rows[i]["TOTAL_AMOUNT"].ToString()) - decimal.Parse(ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString())).ToString();

            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_tp.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", txt_amount1, "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 1);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_tp.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", txt_amount1, "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, ds_all_gl_code.Tables[0].Rows[5]["AutoSearchResult"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, txt_amount1, "", "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);

            //            ///**************** VOUCHER NO (DEBIT NOTE) ******************/
            //            //insert_voucher_no(ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString());
            //            ///*************************************************************/

            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_tp.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString(), "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 1);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_tp.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString(), "", "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, ds_all_gl_code.Tables[0].Rows[5]["AutoSearchResult"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", ds1.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString(), "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);

            //            ///**************** VOUCHER NO (DEBIT CANCELLATION) ******************/
            //            //insert_voucher_no(ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString());
            //            ///***********************************************************/

            //            //objFITPaymentStoreProcedure.updte_voucher_status_on_cancel(ds_vsstatus.Tables[0].Rows[4]["AutoSearchResult"].ToString(), int.Parse(ds.Tables[0].Rows[i]["SEQ_NO"].ToString()));
            //        }
            //    }
            //    else if (ds.Tables[0].Rows[i]["SUPPLIER_TYPE_NAME"].ToString() == "Sightseeing Company")
            //    {


            //        DataSet ds1 = objFITPaymentStoreProcedure.fetch_hotel_data("FETCH_SIGHT_SEEING_FOR_PURCHASE", DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), ds.Tables[0].Rows[i]["CHAIN_NAME"].ToString());

            //        DataSet ds2 = objFITPaymentStoreProcedure.fetch_hotel_data("FETCH_SIGHT_SEEING_FOR_PURCHASE_CANCELLATION_FEES", DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), ds.Tables[0].Rows[i]["CHAIN_NAME"].ToString());

            //        DataSet dsgl_SS = objFITPaymentStoreProcedure.set_gl_code("FETCH_GENERAL_LEGER_CODE", ds.Tables[0].Rows[i]["SUPPLIER_SR_NO"].ToString(), "S");

            //        if (ds2.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString() != "")
            //        {


            //            string txt_amount1 = (decimal.Parse(ds.Tables[0].Rows[i]["TOTAL_AMOUNT"].ToString()) - decimal.Parse(ds2.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString())).ToString();

            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_SS.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", txt_amount1, "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 1);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_SS.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", txt_amount1, "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, ds_all_gl_code.Tables[0].Rows[3]["AutoSearchResult"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, txt_amount1, "", "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);

            //            ///**************** VOUCHER NO (DEBIT NOTE) ******************/
            //            //insert_voucher_no(ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), ds_vt.Tables[0].Rows[3]["AutoSearchResult"].ToString());
            //            ///***********************************************************/

            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_SS.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", ds2.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString(), "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 1);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, dsgl_SS.Tables[0].Rows[0]["GL_DESCRIPTION"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, ds2.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString(), "", "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);
            //            //objFITPaymentStoreProcedure.insert_accounts_entry(0, ds_all_gl_code.Tables[0].Rows[3]["AutoSearchResult"].ToString(), ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), result, ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString(), int.Parse(Session["usersid"].ToString()), "", int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), int.Parse(Session["usersid"].ToString()), ds_vsstatus.Tables[0].Rows[2]["AutoSearchResult"].ToString(), 0, "", ds2.Tables[0].Rows[0]["CANCELLATION_FEE"].ToString(), "", "", "", "", "", "", "", "", "", "", int.Parse(Session["CompanyId"].ToString()), ds22.Tables[0].Rows[0]["AutoSearchResult"].ToString(), 2);

            //            ///**************** VOUCHER NO (DEBIT CANCELLATION) ******************/
            //            //insert_voucher_no(ds.Tables[0].Rows[i]["PURCHASE_INVOICE_NO"].ToString(), ds_vt.Tables[0].Rows[6]["AutoSearchResult"].ToString());
            //            ///***********************************************************/

            //            //objFITPaymentStoreProcedure.updte_voucher_status_on_cancel(ds_vsstatus.Tables[0].Rows[4]["AutoSearchResult"].ToString(), int.Parse(ds.Tables[0].Rows[i]["SEQ_NO"].ToString()));
            //        }
            //    }

            //}


            #endregion

            DataTable DTORDER = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "7");

            objHotelStoreProcedure.update_quote(int.Parse(Session["updateid"].ToString()), DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString());
            objHotelStoreProcedure.update_INVOICE(DTINVOICE.Rows[0]["INVOICE_NO"].ToString(), DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString());
            mailforsupplieroncancelltionapproved();

            Master.DisplayMessage("Thank you!Your Booking Has been Canceled.", "successMessage", 8000);
        }
        #endregion

        #region DISAPPROVED CANCELLATION BUTTON
        protected void btndisapprovedcancellation_Click(object sender, EventArgs e)
        {
            DataTable DTORDER = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "5");

            objHotelStoreProcedure.update_quote(int.Parse(Session["updateid"].ToString()), DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString());
            mailforagentcancellationDisapproved();

            Master.DisplayMessage("Thank you!Your Booking Has been Disapprove for Cancellation.", "successMessage", 8000);

        }
        #endregion

        protected void Button3_onclick(object sender, EventArgs e)
        {

            btnBook.Attributes.Add("style", "display:none");

            String bkk = null;
            String pty = null;
            String phu = null;
            String karbi = null;
            String samui = null;
            String chiang = null;
            String huahin = null;
            String chingrai = null;
            String kanchaburi = null;

            String qid = null;
            string empflag = Session["FLAG"].ToString();
            DataTable dtad = objHotelStoreProcedure.objfetchusername("FETCH_USER_NAME_FOR_MAIL", Session["rel_sr_no"].ToString());
            DataTable DThotel = objHotelStoreProcedure.fetchorderstatusname("FETCH_HOTEL_STATUS_NAME_FOR_HOTEL", "5");
            Session["email"] = dtad.Rows[0]["CUST_REL_EMAIL"].ToString();
            if (Session["quoteid"] != null)
            {
                qid = Session["quoteid"].ToString();
                DataSet ds = objHotelStoreProcedure.FetchForFitHotelEdit("FETCH_ALL_DATA_FOR_HOTEL", qid);
                DataTable dt1 = ds.Tables[0];
                countcity = dt1.Rows.Count;
                for (int i = 0; i < countcity; i++)
                {
                    countryname = dt1.Rows[i]["CITY_NAME"].ToString();
                }
            }

            if (Session["citypty"] != null)
            {
                pty = Session["citypty"].ToString();
                DataSet ds = objHotelStoreProcedure.insertstatusforwaitlist("INSERT_WAITLIST_STATUS_FOR_HOTEL", qid, pty, DThotel.Rows[0]["HOTEL_STATUS"].ToString());
                DataTable dt = ds.Tables[0];
                DataTable dt1 = ds.Tables[1];
                lblStatusPty.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                ptytd.Attributes.Add("style", "display:none");
                ptyredtd.Attributes.Add("style", "display:none");
                upHotelPty.Update();
                Session.Remove("citypty");
            }
            if (Session["cityphu"] != null)
            {
                phu = Session["cityphu"].ToString();
                DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, phu, "Confirmed", TextBox2.Text, TextBox3.Text);
                DataTable dt = ds.Tables[0];
                DataTable dt1 = ds.Tables[1];
                lblStatusPhu.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                Session.Remove("cityphu");
            }
            if (Session["citykarbi"] != null)
            {
                karbi = Session["citykarbi"].ToString();
                DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, karbi, "Confirmed", TextBox2.Text, TextBox3.Text);
                DataTable dt = ds.Tables[0];
                DataTable dt1 = ds.Tables[1];
                lblStatusKbv.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                Session.Remove("citykarbi");

            }
            if (Session["citysamui"] != null)
            {
                samui = Session["citysamui"].ToString();
                DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, samui, "Confirmed", TextBox2.Text, TextBox3.Text);
                DataTable dt = ds.Tables[0];
                DataTable dt1 = ds.Tables[1];
                lblStatusKbvUsm.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                Session.Remove("citysamui");

            }
            if (Session["cityChiangmai"] != null)
            {
                chiang = Session["cityChiangmai"].ToString();
                DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, chiang, "Confirmed", TextBox2.Text, TextBox3.Text);
                DataTable dt = ds.Tables[0];
                DataTable dt1 = ds.Tables[1];
                lblStatusCnx.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                Session.Remove("cityChiangmai");

            }
            if (Session["cityHuaHin"] != null)
            {
                huahin = Session["cityHuaHin"].ToString();
                DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, huahin, "Confirmed", TextBox2.Text, TextBox3.Text);
                DataTable dt = ds.Tables[0];
                DataTable dt1 = ds.Tables[1];
                lblStatusEtc.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                Session.Remove("cityHuaHin");

            }
            if (Session["cityss"] != null)
            {
                chingrai = Session["cityss"].ToString();
                DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, huahin, "Confirmed", TextBox2.Text, TextBox3.Text);
                DataTable dt = ds.Tables[0];
                DataTable dt1 = ds.Tables[1];
                lblStatusSs.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                Session.Remove("cityHuaHin");

            }
            if (Session["citysps"] != null)
            {
                chingrai = Session["citysps"].ToString();
                DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, huahin, "Confirmed", TextBox2.Text, TextBox3.Text);
                DataTable dt = ds.Tables[0];
                DataTable dt1 = ds.Tables[1];
                lblStatusSps.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                Session.Remove("cityHuaHin");

            }
            if (Session["citybkk"] != null)
            {

                bkk = Session["citybkk"].ToString();
                DataSet ds = objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", qid, TextBox1.Text, bkk, "Confirmed", TextBox2.Text, TextBox3.Text);
                DataTable dt = ds.Tables[0];
                DataTable dt1 = ds.Tables[1];
                lblStatusBkk.Text = dt1.Rows[0]["HOTEL_STATUS"].ToString();
                bkktd.Attributes.Add("style", "display:none");
                bkkredtd.Attributes.Add("style", "display:none");
                uphotelBkk.Update();
                Session.Remove("citybkk");
            }
            TextBox1.Text = "";
            TextBox2.Text = "";
            TextBox3.Text = "";
            label63.Text = "";
            labelerror.Text = "";
            //         PopEx_lnkBtnChangePreference.Hide();
            pnlCompanyRoleSelection.Attributes.Add("style", "display:none");
            Updateconfirm.Update();
            UpdatePanel1.Update();

            Master.DisplayMessage("Hotel confirmed successfully.", "successMessage", 3000);
        }

        protected void sendmailforwaitlist()
        {

        }

        #region INSERT VOUCHER NO IN ACCOUNT VOUCHER HEADER
        protected void insert_voucher_no(string invoice_no, string voucher_type)
        {
            DataSet ds_vt = objFITPaymentStoreProcedure.fetch_voucher_type("FETCH_VOUCHER_TYPE");
            DataSet ds_vsstatus = objFITPaymentStoreProcedure.fetch_voucher_type("FETCH_VOUCHER_STATUS_ID");

            DataSet ds_vn_code = objVouchersStoredProcedure.get_max_voucher_no("FETCH_VOUCHER_NO_CODE", voucher_type); //ds_vt.Tables[0].Rows[0]["AutoSearchResult"].ToString());

            DataSet ds_vn = objVouchersStoredProcedure.get_max_voucher_no("FETCH_MAX_VOUCHER_NO", voucher_type);  //ds_vt.Tables[0].Rows[0]["AutoSearchResult"].ToString());

            DataSet ds_vn_check = objVouchersStoredProcedure.get_voucher_no_for_check("FETCH_VOUCHER_NO_FOR_CHECK", invoice_no, voucher_type); //  ds_vt.Tables[0].Rows[0]["AutoSearchResult"].ToString());

            if (ds_vn_check.Tables[0].Rows[0]["VOUCHER_NO"].ToString() == "" || ds_vn_check.Tables[0].Rows[0]["VOUCHER_NO"].ToString() == null)
            {
                if (ds_vn.Tables[0].Rows[0]["VOUCHER_NO"].ToString() == "" || ds_vn.Tables[0].Rows[0]["VOUCHER_NO"].ToString() == null)
                {
                    string str = DateTime.Today.ToString("dd/MM/yy");
                    string year = "";
                    string voucher_no = "";
                    string[] words1 = str.Split('/');
                    if (int.Parse(words1[1].ToString()) > 3)
                    {
                        year = words1[2].ToString() + (int.Parse(words1[2].ToString()) + 1).ToString();
                    }
                    else
                    {
                        year = (int.Parse(words1[2].ToString()) - 1).ToString() + words1[2].ToString();
                    }
                    voucher_no = "V" + year + "-" + ds_vn_code.Tables[0].Rows[0]["VOUCHER_NO_CODE"].ToString() + "-" + "00001";

                    objVouchersStoredProcedure.update_accounts_voucher_no(invoice_no, ds_vsstatus.Tables[0].Rows[0]["AutoSearchResult"].ToString(), voucher_type, voucher_no);
                }
                else
                {
                    string str = DateTime.Today.ToString("dd/MM/yy");
                    string year = "";
                    string voucher_no = "";
                    string[] words1 = str.Split('/');
                    if (int.Parse(words1[1].ToString()) > 3)
                    {
                        year = words1[2].ToString() + (int.Parse(words1[2].ToString()) + 1).ToString();
                    }
                    else
                    {
                        year = (int.Parse(words1[2].ToString()) - 1).ToString() + words1[2].ToString();
                    }

                    string str11 = ds_vn.Tables[0].Rows[0]["VOUCHER_NO"].ToString(); // ds_service_no.Tables[0].Rows[0]["SERVICE_NO"].ToString();
                    string[] words = str11.Split('-');
                    string no = (int.Parse(words[2].ToString()) + 01).ToString();
                    int len = no.Length;
                    for (int i = 0; i < 5 - len; i++)
                    {
                        no = "0" + no;
                    }
                    voucher_no = "V" + year + "-" + ds_vn_code.Tables[0].Rows[0]["VOUCHER_NO_CODE"].ToString() + "-" + no;

                    objVouchersStoredProcedure.update_accounts_voucher_no(invoice_no, ds_vsstatus.Tables[0].Rows[0]["AutoSearchResult"].ToString(), voucher_type, voucher_no);
                }

            }
        }
        #endregion


        // 30/01/2012
        #region TEXT CHANGED OF TP & SS



        protected void txtSS_Bkkdate_TextChanged(object sender, EventArgs e)
        {
            TextBox tx = (TextBox)sender;


            GridViewRow row = (GridViewRow)tx.NamingContainer;

            int indx = row.DataItemIndex;

            foreach (GridViewRow item in GridView1.Rows)
            {
                if (indx == item.DataItemIndex)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_Bkkdate");

                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");

                        try
                        {

                            System.DateTime today = DateTime.ParseExact(date.Text, "dd/MM/yyyy", null);
                            DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Bangkok");
                            if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                            {
                                Master.DisplayMessage(packagename.Text + " " + "Sight see is not operated on this day", "successMessage", 8000);
                            }
                            else if (txtbkk_CheckIn.Text != "" && txtbkk_CheckOut.Text != "")
                            {
                                if ((DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Date must be with in check-in & check-out dates of Bangkok", "successMessage", 8000);
                                    date.Text = "";
                                }
                                else
                                {
                                    DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                                    DDL1.clearcoreskill();
                                    DataSet DsMealDate = objHotelStoreProcedure.get_Sight_Dates(txtbkk_CheckIn.Text, txtbkk_CheckOut.Text, date.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC1.DDList.DataSource = list;
                                    DDC1.DDList.DataTextField = "Text";
                                    DDC1.DDList.DataValueField = "Value";
                                    DDC1.DDList.DataBind();

                                    DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                    drptime.Items.Clear();
                                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                                    {
                                        if (ds.Tables[1].Rows[i]["AutoSearchResult"] != "" || ds.Tables[1].Rows[i]["AutoSearchResult"] != null)
                                        {
                                            drptime.Items.Add(ds.Tables[1].Rows[i]["AutoSearchResult"].ToString());
                                        }
                                    }
                                    drptime.Focus();
                                }
                                upSSbkk.Update();
                            }
                        }
                        catch
                        {
                            Master.DisplayMessage("Date is not in correct format for" + " " + packagename.Text, "successMessage", 8000);
                            date.Text = "";
                            upSSbkk.Update();
                            break;
                        }
                        finally
                        {

                        }
                    }
                }
            }
        }

        protected void txtSS_Ptydate_TextChanged(object sender, EventArgs e)
        {
            TextBox ddl1 = sender as TextBox;
            //  int repeaterItemIndex = ((TextBox)ddl1.NamingContainer).i

            TextBox tx = (TextBox)sender;



            GridViewRow row = (GridViewRow)tx.NamingContainer;

            int indx = row.DataItemIndex;
            foreach (GridViewRow item in GV_Result.Rows)
            {
                if (indx == item.DataItemIndex)
                {

                    TextBox date = (TextBox)item.FindControl("txtSS_Ptydate");


                    if (date.Text != "")
                    {
                        //DateTime Result;
                        DateTimeFormatInfo info = new DateTimeFormatInfo();
                        CultureInfo culture;
                        culture = CultureInfo.CreateSpecificCulture("en-US");
                        info.ShortDatePattern = "dd/MM/yyyy";

                        Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");

                        try
                        {
                            System.DateTime today = DateTime.ParseExact(date.Text, "dd/MM/yyyy", null);

                            DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Pattaya");
                            if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                            {
                                Master.DisplayMessage(packagename.Text + " " + "Sight see is not operated on this day", "successMessage", 8000);
                            }

                            else if (txtpty_CheckIn.Text != "" && txtpty_CheckOut.Text != "")
                            {
                                if ((DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Date must be with in check-in & check-out dates of Pattya", "successMessage", 8000);
                                    date.Text = "";
                                }
                                else
                                {

                                    DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                                    DDL2.clearcoreskill();
                                    DataSet DsMealDate = objHotelStoreProcedure.get_Sight_Dates(txtpty_CheckIn.Text, txtpty_CheckOut.Text, date.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC2.DDList.DataSource = list;
                                    DDC2.DDList.DataTextField = "Text";
                                    DDC2.DDList.DataValueField = "Value";
                                    DDC2.DDList.DataBind();
                                    upSSPty.Update();

                                    DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                    drptime.Items.Clear();
                                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                                    {
                                        if (ds.Tables[1].Rows[i]["AutoSearchResult"] != "" || ds.Tables[1].Rows[i]["AutoSearchResult"] != null)
                                        {
                                            drptime.Items.Add(ds.Tables[1].Rows[i]["AutoSearchResult"].ToString());
                                        }
                                    }
                                    drptime.Focus();
                                }
                                upSSPty.Update();

                            }
                        }
                        catch
                        {
                            Master.DisplayMessage("Date is not in correct format for" + " " + packagename.Text, "successMessage", 8000);
                            date.Text = "";
                            upSSPty.Update();
                            break;
                        }
                        finally
                        {

                        }
                    }
                }
            }
        }

        protected void txtSS_phuketdate_TextChanged(object sender, EventArgs e)
        {

            TextBox tx = (TextBox)sender;


            GridViewRow row = (GridViewRow)tx.NamingContainer;

            int indx = row.DataItemIndex;

            foreach (GridViewRow item in GridView2.Rows)
            {
                if (indx == item.DataItemIndex)
                {

                    TextBox date = (TextBox)item.FindControl("txtSS_phuketdate");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                        try
                        {
                            System.DateTime today = DateTime.ParseExact(date.Text, "dd/MM/yyyy", null);

                            DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Phuket");
                            if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                            {
                                Master.DisplayMessage(packagename.Text + " " + "Sight see is not operated on this day", "successMessage", 8000);
                            }

                            else if (txtphu_CheckIn.Text != "" && txtphu_CheckOut.Text != "")
                            {
                                if ((DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Date must be with in check-in & check-out dates of Phuket.", "successMessage", 8000);
                                    date.Text = "";
                                }
                                else
                                {
                                    DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                                    DDL3.clearcoreskill();
                                    DataSet DsMealDate = objHotelStoreProcedure.get_Sight_Dates(txtphu_CheckIn.Text, txtphu_CheckOut.Text, date.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC3.DDList.DataSource = list;
                                    DDC3.DDList.DataTextField = "Text";
                                    DDC3.DDList.DataValueField = "Value";
                                    DDC3.DDList.DataBind();

                                    DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                    drptime.Items.Clear();
                                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                                    {
                                        if (ds.Tables[1].Rows[i]["AutoSearchResult"] != "" || ds.Tables[1].Rows[i]["AutoSearchResult"] != null)
                                        {
                                            drptime.Items.Add(ds.Tables[1].Rows[i]["AutoSearchResult"].ToString());
                                        }
                                    }
                                    drptime.Focus();
                                }
                                upSS_phuket.Update();
                            }
                        }
                        catch
                        {
                            Master.DisplayMessage("Date is not in correct format" + " " + packagename.Text, "successMessage", 8000);
                            date.Text = "";
                            upSS_phuket.Update();
                            break;
                        }
                        finally
                        {
                        }
                    }
                }
            }
        }

        protected void txtSS_kbv_date_TextChanged(object sender, EventArgs e)
        {
            TextBox tx = (TextBox)sender;


            GridViewRow row = (GridViewRow)tx.NamingContainer;

            int indx = row.DataItemIndex;

            foreach (GridViewRow item in GridView3.Rows)
            {
                if (indx == item.DataItemIndex)
                {

                    TextBox date = (TextBox)item.FindControl("txtSS_kbv_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                        try
                        {

                            System.DateTime today = DateTime.ParseExact(date.Text, "dd/MM/yyyy", null);
                            DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Krabi");
                            if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                            {
                                Master.DisplayMessage(packagename.Text + " " + "Sight see is not operated on this day", "successMessage", 8000);
                            }
                            else if (txtkbv_CheckIn.Text != "" && txtkbv_CheckOut.Text != "")
                            {
                                if ((DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Date must be with in check-in & check-out dates of Krabi.", "successMessage", 8000);
                                    date.Text = "";
                                }
                                else
                                {
                                    DDL4 = (MulticheckDropdown)item.FindControl("DDL4");
                                    DDL4.clearcoreskill();
                                    DataSet DsMealDate = objHotelStoreProcedure.get_Sight_Dates(txtkbv_CheckIn.Text, txtkbv_CheckOut.Text, date.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC4.DDList.DataSource = list;
                                    DDC4.DDList.DataTextField = "Text";
                                    DDC4.DDList.DataValueField = "Value";
                                    DDC4.DDList.DataBind();

                                    DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                    drptime.Items.Clear();
                                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                                    {
                                        if (ds.Tables[1].Rows[i]["AutoSearchResult"] != "" || ds.Tables[1].Rows[i]["AutoSearchResult"] != null)
                                        {
                                            drptime.Items.Add(ds.Tables[1].Rows[i]["AutoSearchResult"].ToString());
                                        }
                                    }
                                    drptime.Focus();
                                }
                                upSS_Kbv.Update();
                            }
                        }
                        catch
                        {
                            Master.DisplayMessage("Date is not in correct format" + " " + packagename.Text, "successMessage", 8000);
                            date.Text = "";
                            upSS_Kbv.Update();
                            break;
                        }
                        finally
                        {
                        }
                    }
                }
            }
        }

        protected void txtSS_usm_date_TextChanged(object sender, EventArgs e)
        {
            TextBox tx = (TextBox)sender;


            GridViewRow row = (GridViewRow)tx.NamingContainer;

            int indx = row.DataItemIndex;

            foreach (GridViewRow item in GridView4.Rows)
            {
                if (indx == item.DataItemIndex)
                {

                    TextBox date = (TextBox)item.FindControl("txtSS_usm_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                        try
                        {
                            System.DateTime today = DateTime.ParseExact(date.Text, "dd/MM/yyyy", null);

                            DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Samui");
                            if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                            {
                                Master.DisplayMessage(packagename.Text + " " + "Sight see is not operated on this day", "successMessage", 8000);
                            }
                            else if (txtusm_CheckIn.Text != "" && txtusm_CheckOut.Text != "")
                            {
                                if ((DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Date must be with in check-in & check-out dates of Samui.", "successMessage", 8000);
                                    date.Text = "";
                                }
                                else
                                {
                                    DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                                    DDL5.clearcoreskill();
                                    DataSet DsMealDate = objHotelStoreProcedure.get_Sight_Dates(txtusm_CheckIn.Text, txtusm_CheckOut.Text, date.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC5.DDList.DataSource = list;
                                    DDC5.DDList.DataTextField = "Text";
                                    DDC5.DDList.DataValueField = "Value";
                                    DDC5.DDList.DataBind();


                                    DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                    drptime.Items.Clear();
                                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                                    {
                                        if (ds.Tables[1].Rows[i]["AutoSearchResult"] != "" || ds.Tables[1].Rows[i]["AutoSearchResult"] != null)
                                        {
                                            drptime.Items.Add(ds.Tables[1].Rows[i]["AutoSearchResult"].ToString());
                                        }
                                    }
                                    drptime.Focus();
                                }
                                upSS_usm.Update();
                            }
                        }
                        catch
                        {
                            Master.DisplayMessage("Date is not in correct format" + " " + packagename.Text, "successMessage", 8000);
                            date.Text = "";
                            upSS_usm.Update();
                            break;
                        }
                        finally
                        {
                        }
                    }
                }
            }
        }

        protected void txtSS_cnx_date_TextChanged(object sender, EventArgs e)
        {
            TextBox tx = (TextBox)sender;


            GridViewRow row = (GridViewRow)tx.NamingContainer;

            int indx = row.DataItemIndex;

            foreach (GridViewRow item in GridView5.Rows)
            {
                if (indx == item.DataItemIndex)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_cnx_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                        try
                        {
                            System.DateTime today = DateTime.ParseExact(date.Text, "dd/MM/yyyy", null);
                            DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Chiangmai");
                            if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                            {
                                Master.DisplayMessage(packagename.Text + " " + "Sight see is not operated on this day", "successMessage", 8000);
                            }
                            else if (txtcnx_CheckIn.Text != "" && txtcnx_CheckOut.Text != "")
                            {
                                if ((DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Date must be with in check-in & check-out dates of Chiangmai.", "successMessage", 8000);
                                    date.Text = "";
                                }
                                else
                                {
                                    DDL6 = (MulticheckDropdown)item.FindControl("DDL6");
                                    DDL6.clearcoreskill();
                                    DataSet DsMealDate = objHotelStoreProcedure.get_Sight_Dates(txtcnx_CheckIn.Text, txtcnx_CheckOut.Text, date.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC6.DDList.DataSource = list;
                                    DDC6.DDList.DataTextField = "Text";
                                    DDC6.DDList.DataValueField = "Value";
                                    DDC6.DDList.DataBind();

                                    DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                    drptime.Items.Clear();
                                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                                    {
                                        if (ds.Tables[1].Rows[i]["AutoSearchResult"] != "" || ds.Tables[1].Rows[i]["AutoSearchResult"] != null)
                                        {
                                            drptime.Items.Add(ds.Tables[1].Rows[i]["AutoSearchResult"].ToString());
                                        }
                                    }
                                    drptime.Focus();
                                }
                                upSS_cnx.Update();
                            }
                        }
                        catch
                        {
                            Master.DisplayMessage("Date is not in correct format" + " " + packagename.Text, "successMessage", 8000);
                            date.Text = "";
                            upSS_cnx.Update();
                            break;
                        }
                        finally
                        {
                        }
                    }
                }
            }
        }

        protected void txtSS_etc_date_TextChanged(object sender, EventArgs e)
        {
            TextBox tx = (TextBox)sender;


            GridViewRow row = (GridViewRow)tx.NamingContainer;

            int indx = row.DataItemIndex;

            foreach (GridViewRow item in GridView6.Rows)
            {
                if (indx == item.DataItemIndex)
                {

                    TextBox date = (TextBox)item.FindControl("txtSS_etc_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                        try
                        {

                            DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Hua Hin");
                            if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                            {
                                Master.DisplayMessage("Sight see is not operated on this day", "successMessage", 8000);
                            }
                            else if (txtetc_CheckIn.Text != "" && txtetc_CheckOut.Text != "")
                            {
                                if ((DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Date must be with in check-in & check-out dates of Hua Hin.", "successMessage", 8000);
                                    date.Text = "";
                                }
                                else
                                {

                                    DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                                    DDL7.clearcoreskill();
                                    DataSet DsMealDate = objHotelStoreProcedure.get_Sight_Dates(txtetc_CheckIn.Text, txtetc_CheckOut.Text, date.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC7.DDList.DataSource = list;
                                    DDC7.DDList.DataTextField = "Text";
                                    DDC7.DDList.DataValueField = "Value";
                                    DDC7.DDList.DataBind();

                                    DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                    drptime.Items.Clear();
                                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                                    {
                                        if (ds.Tables[1].Rows[i]["AutoSearchResult"] != "" || ds.Tables[1].Rows[i]["AutoSearchResult"] != null)
                                        {
                                            drptime.Items.Add(ds.Tables[1].Rows[i]["AutoSearchResult"].ToString());
                                        }
                                    }
                                    drptime.Focus();
                                }
                                upSS_Etc.Update();
                            }
                        }
                        catch
                        {
                            Master.DisplayMessage("Date is not in correct format" + " " + packagename.Text, "successMessage", 8000);
                            date.Text = "";
                            upSS_Etc.Update();
                            break;
                        }
                        finally
                        {
                        }
                    }

                }
            }
        }

        protected void txtSS_s_date_TextChanged(object sender, EventArgs e)
        {
            TextBox tx = (TextBox)sender;


            GridViewRow row = (GridViewRow)tx.NamingContainer;
            int indx = row.DataItemIndex;

            foreach (GridViewRow item in GridView7.Rows)
            {
                if (indx == item.DataItemIndex)
                {

                    TextBox date = (TextBox)item.FindControl("txtSS_s_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                        try
                        {
                            DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Kanchanburi");
                            if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                            {
                                Master.DisplayMessage("Sight see is not operated on this day", "successMessage", 8000);
                            }
                            else if (txtss_CheckIn.Text != "" && txtss_CheckOut.Text != "")
                            {
                                if ((DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Date must be with in check-in & check-out dates of Kanchanburi.", "successMessage", 8000);
                                    date.Text = "";
                                }
                                else
                                {
                                    DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                                    DDL8.clearcoreskill();
                                    DataSet DsMealDate = objHotelStoreProcedure.get_Sight_Dates(txtss_CheckIn.Text, txtss_CheckOut.Text, date.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC8.DDList.DataSource = list;
                                    DDC8.DDList.DataTextField = "Text";
                                    DDC8.DDList.DataValueField = "Value";
                                    DDC8.DDList.DataBind();

                                    DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                    drptime.Items.Clear();
                                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                                    {
                                        if (ds.Tables[1].Rows[i]["AutoSearchResult"] != "" || ds.Tables[1].Rows[i]["AutoSearchResult"] != null)
                                        {
                                            drptime.Items.Add(ds.Tables[1].Rows[i]["AutoSearchResult"].ToString());
                                        }
                                    }
                                    drptime.Focus();
                                }
                                upSS_Etc.Update();
                            }
                        }
                        catch
                        {
                            Master.DisplayMessage("Date is not in correct format" + packagename.Text, "successMessage", 8000);
                            date.Text = "";
                            upSS_Etc.Update();
                            break;
                        }
                        finally
                        {
                        }
                    }

                }
            }
        }

        protected void txtSS_sps_date_TextChanged(object sender, EventArgs e)
        {
            TextBox tx = (TextBox)sender;


            GridViewRow row = (GridViewRow)tx.NamingContainer;
            int indx = row.DataItemIndex;

            foreach (GridViewRow item in GridView8.Rows)
            {
                if (indx == item.DataItemIndex)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_sps_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                        try
                        {
                            DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Chingrai");
                            if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                            {
                                Master.DisplayMessage("Sight see is not operated on this day", "successMessage", 8000);
                            }
                            else if (txtsps_CheckIn.Text != "" && txtsps_CheckOut.Text != "")
                            {
                                if ((DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(date.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Date must be with in check-in & check-out dates of Kanchanburi.", "successMessage", 8000);
                                    date.Text = "";
                                }
                                else
                                {
                                    DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                                    DDL9.clearcoreskill();
                                    DataSet DsMealDate = objHotelStoreProcedure.get_Sight_Dates(txtsps_CheckIn.Text, txtsps_CheckOut.Text, date.Text);
                                    ListItemCollection list = new ListItemCollection();
                                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                                    {
                                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                        list.Add(listitem);
                                    }
                                    DDC9.DDList.DataSource = list;
                                    DDC9.DDList.DataTextField = "Text";
                                    DDC9.DDList.DataValueField = "Value";
                                    DDC9.DDList.DataBind();


                                    DropDownList drptime = (DropDownList)item.FindControl("drp_ss_time");
                                    drptime.Items.Clear();
                                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                                    {
                                        if (ds.Tables[1].Rows[i]["AutoSearchResult"] != "" || ds.Tables[1].Rows[i]["AutoSearchResult"] != null)
                                        {
                                            drptime.Items.Add(ds.Tables[1].Rows[i]["AutoSearchResult"].ToString());
                                        }
                                    }
                                    drptime.Focus();
                                }
                                upSS_Etc.Update();
                            }
                        }
                        catch
                        {
                            Master.DisplayMessage("Date is not in correct format" + " " + packagename.Text, "successMessage", 8000);
                            date.Text = "";
                            upSS_Etc.Update();
                            break;
                        }
                        finally
                        {
                        }
                    }

                }
            }
        }

        #endregion

        #region dropdown event

        // BANGKOK
        protected void ddrbkk_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Bangkok", Session["fromdate"].ToString(), Session["todate"].ToString(), ddrbkk_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddrbkk_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());

            binddropdownlist(ddrbkk_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddrbkk_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {

                }
                Td37.Attributes.Add("style", "display");
                Td38.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating10.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating10.Enabled = false;

                    }
                    else
                    {
                        RadRating10.Value = 0;
                        RadRating10.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        lblLocBkk.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();
                        tdLocBkk1.Attributes.Add("style", "display");
                        tdLocBkk.Attributes.Add("style", "display");
                    }
                    else
                    {
                        tdLocBkk1.Attributes.Add("style", "display:none");
                        tdLocBkk.Attributes.Add("style", "display:none");
                        lblLocBkk.Text = "";
                    }
                }
                else
                {
                    RadRating10.Value = 0;
                    RadRating10.Enabled = false;
                }
                uphotelBkk.Update();
            }
        }
        //pattaya
        protected void ddrpty_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Pattaya", Session["fromdate"].ToString(), Session["todate"].ToString(), ddrpty_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddrpty_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());

            binddropdownlist(ddrpty_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddrpty_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {

                }
                TdStarPattaya.Attributes.Add("style", "display");
                lblStarPattya1.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating1.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating1.Enabled = false;
                    }
                    else
                    {
                        RadRating1.Value = 0;
                        RadRating1.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        lblLocPattaya.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();
                        tdLocPattaya1.Attributes.Add("style", "display");
                        TdLocPattaya.Attributes.Add("style", "display");
                    }
                    else
                    {
                        tdLocPattaya1.Attributes.Add("style", "display:none");
                        TdLocPattaya.Attributes.Add("style", "display:none");
                        lblLocPattaya.Text = "";
                    }
                }
                else
                {
                    RadRating1.Value = 0;
                    RadRating1.Enabled = false;
                }
                upHotelPty.Update();
            }

        }
        //phuket
        protected void ddrphu_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Phuket", Session["fromdate"].ToString(), Session["todate"].ToString(), ddrphu_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddrphu_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());

            binddropdownlist(ddrphu_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddrphu_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {
                }
                Td21.Attributes.Add("style", "display");
                Td22.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating2.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating2.Enabled = false;
                    }
                    else
                    {
                        RadRating2.Value = 0;
                        RadRating2.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        tdLocPhuket.Attributes.Add("style", "display");
                        tdLocPhuket1.Attributes.Add("style", "display");
                        lblLocPhuket.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();

                    }
                    else
                    {
                        tdLocPhuket.Attributes.Add("style", "display:none");
                        tdLocPhuket1.Attributes.Add("style", "display:none");

                        lblLocPhuket.Text = "";


                    }
                }
                else
                {
                    RadRating2.Value = 0;
                    RadRating2.Enabled = false;
                }
                upHotelPhuket.Update();
            }
        }
        //kbv
        protected void ddrkbv_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Krabi", Session["fromdate"].ToString(), Session["todate"].ToString(), ddrkbv_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddrkbv_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());

            binddropdownlist(ddrkbv_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddrkbv_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {

                }

                Td23.Attributes.Add("style", "display");
                Td24.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating3.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating3.Enabled = false;
                    }
                    else
                    {
                        RadRating3.Value = 0;
                        RadRating3.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        tdLocKrabi.Attributes.Add("style", "display");
                        tdLocKrabi1.Attributes.Add("style", "display");
                        lblLocKrabi.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();

                    }
                    else
                    {
                        tdLocKrabi.Attributes.Add("style", "display:none");
                        tdLocKrabi1.Attributes.Add("style", "display:none");
                        lblLocKrabi.Text = "";
                    }
                }
                else
                {
                    RadRating3.Value = 0;
                    RadRating3.Enabled = false;
                }
                upHotelkBV.Update();
            }
        }
        //usm
        protected void ddrusm_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Samui", Session["fromdate"].ToString(), Session["todate"].ToString(), ddrusm_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddrusm_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());

            binddropdownlist(ddrusm_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddrusm_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {

                }
                Td25.Attributes.Add("style", "display");
                Td26.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating4.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating4.Enabled = false;
                    }
                    else
                    {
                        RadRating4.Value = 0;
                        RadRating4.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        tdLocUsm.Attributes.Add("style", "display");
                        tdLocUsm1.Attributes.Add("style", "display");
                        lblLocUsm.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();

                    }
                    else
                    {
                        tdLocUsm.Attributes.Add("style", "display:none");
                        tdLocUsm1.Attributes.Add("style", "display:none");
                        lblLocUsm.Text = "";
                    }
                }
                else
                {
                    RadRating4.Value = 0;
                    RadRating4.Enabled = false;
                }
                upHotelUsm.Update();
            }
        }
        //cnx
        protected void ddrcnx_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Chiangmai", Session["fromdate"].ToString(), Session["todate"].ToString(), ddrcnx_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddrcnx_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());

            binddropdownlist(ddrcnx_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddrcnx_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {
                }
                Td27.Attributes.Add("style", "display");
                Td28.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating5.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating5.Enabled = false;
                    }
                    else
                    {
                        RadRating5.Value = 0;
                        RadRating5.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        tdLocCnx.Attributes.Add("style", "display");
                        tdLocCnx1.Attributes.Add("style", "display");
                        lblLocCnx.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();

                    }
                    else
                    {
                        tdLocCnx.Attributes.Add("style", "display:none");
                        tdLocCnx1.Attributes.Add("style", "display:none");
                        lblLocCnx.Text = "";
                    }
                }
                else
                {
                    RadRating5.Value = 0;
                    RadRating5.Enabled = false;
                }

                uphotelCnx.Update();
            }
        }
        //etc
        protected void ddretc_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Hua Hin", Session["fromdate"].ToString(), Session["todate"].ToString(), ddretc_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddretc_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());

            binddropdownlist(ddretc_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddretc_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {

                }
                Td29.Attributes.Add("style", "display");
                Td30.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating6.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating6.Enabled = false;
                    }
                    else
                    {
                        RadRating6.Value = 0;
                        RadRating6.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        tdLocEtc.Attributes.Add("style", "display");
                        tdLocEtc1.Attributes.Add("style", "display");
                        lblLocEtc.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();

                    }
                    else
                    {
                        tdLocEtc.Attributes.Add("style", "display:none");
                        tdLocEtc1.Attributes.Add("style", "display:none");
                        lblLocEtc.Text = "";
                    }
                }
                else
                {
                    RadRating6.Value = 0;
                    RadRating6.Enabled = false;
                }
                uphotelEtc.Update();
            }
        }
        //ss
        protected void ddrss_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Kanchanburi", Session["fromdate"].ToString(), Session["todate"].ToString(), ddrss_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddrss_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());
            binddropdownlist(ddrss_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddrss_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {

                }
                Td31.Attributes.Add("style", "display");
                Td32.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating7.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating7.Enabled = false;
                    }
                    else
                    {
                        RadRating7.Value = 0;
                        RadRating7.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        tdLocSs.Attributes.Add("style", "display");
                        tdLocSs1.Attributes.Add("style", "display");
                        lblLocSs.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();

                    }
                    else
                    {
                        tdLocSs.Attributes.Add("style", "display:none");
                        tdLocSs1.Attributes.Add("style", "display:none");
                        lblLocSs.Text = "";
                    }
                }
                else
                {
                    RadRating7.Value = 0;
                    RadRating7.Enabled = false;
                }
                upHotelSS.Update();
            }
        }
        //sps
        protected void ddrsps_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Chiangrai", Session["fromdate"].ToString(), Session["todate"].ToString(), ddrsps_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddrsps_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());
            binddropdownlist(ddrsps_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddrsps_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {
                }
                Td33.Attributes.Add("style", "display");
                Td34.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating8.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating8.Enabled = false;
                    }
                    else
                    {
                        RadRating8.Value = 0;
                        RadRating8.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        tdLocSps.Attributes.Add("style", "display");
                        tdLocSps1.Attributes.Add("style", "display");
                        lblLocSps.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();

                    }
                    else
                    {
                        tdLocSps.Attributes.Add("style", "display:none");
                        tdLocSps1.Attributes.Add("style", "display:none");
                        lblLocSps.Text = "";
                    }
                }
                else
                {
                    RadRating8.Value = 0;
                    RadRating8.Enabled = false;
                }
                uphotelsps.Update();
            }
        }
        //zz
        protected void ddrzz_HotelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataSet ds0 = objHotelStoreProcedure.fetchComboDataforHotel_Star("FETCH_HOTEL_STAR", "Phi Phi Island", Session["fromdate"].ToString(), Session["todate"].ToString(), ddrzz_HotelName.Text);

            DataSet ds = objHotelStoreProcedure.fetchComboDataforHotelroomtype("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE", ddrzz_HotelName.SelectedValue, Session["fromdate"].ToString(), Session["todate"].ToString());
            binddropdownlist(ddrzz_RoomType, ds);
            if (ds.Tables[0].Rows.Count != 0)
            {
                if (ds.Tables[0].Rows[0]["IS_DEFAULT"].ToString() == "True")
                {
                    ddrzz_RoomType.SelectedValue = ds.Tables[0].Rows[0]["AutoSearchResult"].ToString();
                }
                else
                {
                }
                Td35.Attributes.Add("style", "display");
                Td36.Attributes.Add("style", "display");

                if (ds0.Tables[0].Rows.Count > 0)
                {
                    if (ds0.Tables[0].Rows[0]["RATING_STAR"].ToString() != "")
                    {
                        RadRating9.Value = int.Parse(ds0.Tables[0].Rows[0]["RATING_STAR"].ToString());
                        RadRating9.Enabled = false;
                    }
                    else
                    {
                        RadRating9.Value = 0;
                        RadRating9.Enabled = false;
                    }

                    if (ds0.Tables[0].Rows[0]["LOCATION"].ToString() != "")
                    {
                        tdLocZz.Attributes.Add("style", "display");
                        tdLocZz1.Attributes.Add("style", "display");
                        lblLoczz.Text = ds0.Tables[0].Rows[0]["LOCATION"].ToString();

                    }
                    else
                    {
                        tdLocZz.Attributes.Add("style", "display:none");
                        tdLocZz1.Attributes.Add("style", "display:none");
                        lblLoczz.Text = "";
                    }
                }
                else
                {
                    RadRating9.Value = 0;
                    RadRating9.Enabled = false;
                }
                uphotelZZ.Update();
            }
        }

        #endregion

        #region SIGHT SEEING DROPDOWN

        public void DropDownList1_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView1.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList1");
                if (ddl.Text == "PVT")
                {
                    upSSbkk.Update();
                }
                else
                {
                    upSSbkk.Update();
                }
            }
        }

        public void DropDownList2_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GV_Result.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList2");
                if (ddl.Text == "PVT")
                {
                    upSSPty.Update();
                }
                else
                {
                    upSSPty.Update();
                }
            }
        }

        public void DropDownList3_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView2.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList3");
                if (ddl.Text == "PVT")
                {
                    upSS_phuket.Update();
                }
                else
                {
                    upSS_phuket.Update();
                }
            }
        }

        public void DropDownList4_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView3.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList4");
                if (ddl.Text == "PVT")
                {
                    upSS_Kbv.Update();
                }
                else
                {
                    upSS_Kbv.Update();
                }
            }
        }

        public void DropDownList5_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView4.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList5");
                if (ddl.Text == "PVT")
                {
                    upSS_usm.Update();
                }
                else
                {
                    upSS_usm.Update();
                }
            }
        }

        public void DropDownList6_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView5.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList6");
                if (ddl.Text == "PVT")
                {
                    upSS_cnx.Update();
                }
                else
                {
                    upSS_cnx.Update();
                }
            }
        }

        public void DropDownList7_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView6.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList7");
                if (ddl.Text == "PVT")
                {
                    upSS_Etc.Update();
                }
                else
                {
                    upSS_Etc.Update();
                }
            }
        }

        public void DropDownList8_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView7.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList8");
                if (ddl.Text == "PVT")
                {
                    upSS_s.Update();
                }
                else
                {
                    upSS_s.Update();
                }
            }
        }

        public void DropDownList9_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView8.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList9");
                if (ddl.Text == "PVT")
                {
                    upSS_sps.Update();
                }
                else
                {
                    upSS_sps.Update();
                }
            }
        }

        public void DropDownList10_SelectedIndexChanged(Object sender, EventArgs e)
        {

            foreach (GridViewRow item in GridView9.Rows)
            {
                DropDownList ddl = (DropDownList)item.FindControl("DropDownList10");
                if (ddl.Text == "PVT")
                {
                    upSS_zz.Update();
                }
                else
                {
                    upSS_zz.Update();
                }
            }
        }

        #endregion


        #region sightseeing time vs transfer time

        protected void drp_bkk_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GridView1.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_Bkkdate");
                Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        Label id = (Label)item1.FindControl("lbltp_priceid");
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        Label lbl_flg = (Label)item1.FindControl("lbltp_flag");
                        if (rbtn1.Checked)
                        {
                            instpid = id.Text;
                            if (lbl_flg.Text == "A")
                            {
                                if (t1.Text == t2.Text)
                                {
                                    if (txtbkk_CheckOut.Text == t1.Text)
                                    {
                                        if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                        {
                                            Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                        }
                                    }
                                    else
                                    {
                                        if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                        {
                                            Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);

                                        }
                                    }
                                }
                            }
                        }
                        //else if (instpid == id.Text)
                        //{
                        //    if (t1.Text == t2.Text)
                        //    {
                        //        if (lbl_flg.Text == "D")
                        //        {

                        //            if (txtbkk_CheckOut.Text == t1.Text)
                        //            {
                        //                if (int.Parse(ddpty.Text) <= (int.Parse(ddtransfer.Text) - 400))
                        //                {
                        //                    Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                        //                }
                        //            }
                        //            else
                        //            {
                        //                //if (int.Parse(ddpty.Text)+400 < (int.Parse(ddtransfer.Text) + 400))
                        //                //{
                        //                //    Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);

                        //                //}
                        //            }
                        //        }
                        //    }
                        //}
                    }

                }
            }
        }

        protected void drp_pty_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GV_Result.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_Ptydate");
                Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        if (rbtn1.Checked)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (txtpty_CheckOut.Text == t1.Text)
                                {
                                    if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                    {
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                                else
                                {
                                    if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                    {
                                        //Master.DisplayMessage("Time is Not Allowed.", "successMessage", 8000);
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        protected void drp_phu_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GridView2.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_phuketdate");
                Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        if (rbtn1.Checked)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (txtphu_CheckOut.Text == t1.Text)
                                {
                                    if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                    {
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                                else
                                {
                                    if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                    {
                                        // Master.DisplayMessage("Time is Not Allowed.", "successMessage", 8000);
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        protected void drp_kbv_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GridView3.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_kbv_date");
                Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        if (rbtn1.Checked)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (txtkbv_CheckOut.Text == t1.Text)
                                {
                                    if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                    {
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                                else
                                {
                                    if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                    {
                                        //Master.DisplayMessage("Time is Not Allowed.", "successMessage", 8000);
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        protected void drp_usm_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GridView4.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_usm_date");
                Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        if (rbtn1.Checked)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (txtusm_CheckOut.Text == t1.Text)
                                {
                                    if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                    {
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                                else
                                {
                                    if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                    {
                                        // Master.DisplayMessage("Time is Not Allowed.", "successMessage", 8000);
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        protected void drp_cnx_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GridView5.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_cnx_date");
                Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        if (rbtn1.Checked)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (txtcnx_CheckOut.Text == t1.Text)
                                {
                                    if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                    {
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                                else
                                {
                                    if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                    {
                                        //Master.DisplayMessage("Time is Not Allowed.", "successMessage", 8000);
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        protected void drp_etc_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GridView6.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_etc_date");
                Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        if (rbtn1.Checked)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (txtetc_CheckOut.Text == t1.Text)
                                {
                                    if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                    {
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                                else
                                {
                                    if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                    {
                                        // Master.DisplayMessage("Time is Not Allowed.", "successMessage", 8000);
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        protected void drp_ss_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GridView7.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_s_date");
                Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        if (rbtn1.Checked)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (txtss_CheckOut.Text == t1.Text)
                                {
                                    if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                    {
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                                else
                                {
                                    if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                    {
                                        //Master.DisplayMessage("Time is Not Allowed.", "successMessage", 8000);
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        protected void drp_sps_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GridView8.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_sps_date");
                Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        if (rbtn1.Checked)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (txtsps_CheckOut.Text == t1.Text)
                                {
                                    if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                    {
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                                else
                                {
                                    if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                    {
                                        //Master.DisplayMessage("Time is Not Allowed.", "successMessage", 8000);
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        protected void drp_zz_time_selectedindexchanged(object sender, EventArgs e)
        {
            DropDownList ddpty = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddpty.NamingContainer).DataItemIndex;
            foreach (GridViewRow item in GridView9.Rows)
            {
                TextBox t1 = (TextBox)item.FindControl("txtSS_zz_date");
                Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    foreach (GridViewRow item1 in GridView10.Rows)
                    {
                        TextBox t2 = (TextBox)item1.FindControl("txtTPdate");
                        DropDownList ddtransfer = (DropDownList)item1.FindControl("tpdrp_time");
                        CheckBox rbtn1 = (CheckBox)item1.FindControl("rbtnTPselect");
                        if (rbtn1.Checked)
                        {
                            if (t1.Text == t2.Text)
                            {
                                if (txtzz_CheckOut.Text == t1.Text)
                                {
                                    if (int.Parse(ddpty.Text) > (int.Parse(ddtransfer.Text) - 400))
                                    {
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                                else
                                {
                                    if (int.Parse(ddpty.Text) < (int.Parse(ddtransfer.Text) + 400))
                                    {
                                        //Master.DisplayMessage("Time is Not Allowed.", "successMessage", 8000);
                                        Master.DisplayMessage("Time is Not Allowed For " + packagename.Text + ".", "successMessage", 8000);
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }

        /// <summary>
        /// sightseeng validation function
        /// </summary>
        /// <param name="bcc"></param>

        #endregion


        #region ALL EMAILS

        #region On Book Email

        protected void SendMail(string bcc)
        {
            DataSet ds_eventName1 = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate1 = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName1.Tables[0].Rows[3]["AutoSearchResult"].ToString());

            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");

            string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
            string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
            string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
            string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();

            string EmailQoute_id = Session["updateid"].ToString();

            DataTable dt_supplier_id = new DataTable();
            SqlConnection conn = new SqlConnection(str);
            conn.Open();

            DataTable dt_agent = new DataTable();

            SqlCommand agent_comm = new SqlCommand("AGENT_BOOKING_EMAIL", conn);
            agent_comm.CommandType = CommandType.StoredProcedure;
            agent_comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
            SqlDataReader agent_rdr = agent_comm.ExecuteReader();
            dt_agent.Load(agent_rdr);

            SqlCommand comm = new SqlCommand("FETCH_SUPPLIER_ID", conn);
            comm.CommandType = CommandType.StoredProcedure;
            comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
            SqlDataReader rdr = comm.ExecuteReader();
            dt_supplier_id.Load(rdr);

            SqlCommand cmd = new SqlCommand("FETCH_BOOK_EMAIL_ID_ON_QUOTE_ID", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
            SqlDataReader dr = cmd.ExecuteReader();
            DataTable d = new DataTable();
            d.Load(dr);


            String cc = "";
           
            int count = 0;
            if (ds_mailTemplate1.Tables[0].Rows[1]["IS_ON"].ToString() != "False")
            {
                objHotelStoreProcedure.Update_Email_On_Book(int.Parse(Session["updateid"].ToString()), int.Parse(bcc));

                for (int i_supp = 0; i_supp < dt_supplier_id.Rows.Count; i_supp++)
                {
                    count = i_supp + 1;
                    supplier_id = dt_supplier_id.Rows[i_supp]["SUPPLIER_ID"].ToString();
                    DataTable dt_hotelEmails = new DataTable();

                    SqlCommand email = new SqlCommand("FETCH_SUPPLIER_EMAIL_FOR_MAIL", conn);
                    email.CommandType = CommandType.StoredProcedure;
                    email.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
                    SqlDataReader rdremail = email.ExecuteReader();
                    dt_hotelEmails.Load(rdremail);

                    if (dt_hotelEmails.Rows.Count != 0)
                    {
                        hotelsupplier_id = dt_hotelEmails.Rows[i_supp]["SUPPLIER_ID"].ToString();
                        supplier_email = dt_hotelEmails.Rows[i_supp]["SUPPLIER_REL_EMAIL"].ToString();

                        if (hotelsupplier_id == supplier_id)
                        {
                            DataTable dt_hotelDetails = new DataTable();

                            SqlCommand details = new SqlCommand("FETCH_HOTEL_DETAILS_FOR_MAIL", conn);
                            details.CommandType = CommandType.StoredProcedure;
                            details.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
                            details.Parameters.Add("@SUPPLIER_ID", SqlDbType.Int).Value = int.Parse(hotelsupplier_id);
                            SqlDataReader rdrdetails = details.ExecuteReader();

                            dt_hotelDetails.Load(rdrdetails);

                            single_rooms = dt_hotelDetails.Rows[0]["SINGLE_ROOMS"].ToString();
                            double_rooms = dt_hotelDetails.Rows[0]["DOUBLE_ROOMS"].ToString();
                            tripal_rooms = dt_hotelDetails.Rows[0]["TRIPAL_ROOMS"].ToString();
                            room_type = dt_hotelDetails.Rows[0]["ROOM_TYPE_NAME"].ToString();
                            hotel_name = dt_hotelDetails.Rows[0]["CHAIN_NAME"].ToString();
                            pessanger_name = dt_hotelDetails.Rows[0]["CLIENT_NAME"].ToString();
                            check_in_date = dt_hotelDetails.Rows[0]["CHECK_IN_DATE"].ToString();
                            check_out_date = dt_hotelDetails.Rows[0]["CHECK_OUT_DATE"].ToString();
                            adults = dt_hotelDetails.Rows[0]["NO_OF_ADULTS"].ToString();
                            cwb = dt_hotelDetails.Rows[0]["NO_OF_CWB"].ToString();
                            cnb = dt_hotelDetails.Rows[0]["NO_OF_CNB"].ToString();
                            infant = dt_hotelDetails.Rows[0]["NO_OF_INFANT"].ToString();
                        }

                        string fromemail = "";
                        if (ds_mailTemplate1.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate1.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString());

                            if (ds_mailTemplate1.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                            {
                                if (bcc == "1")
                                {
                                    fromemail = "reservation@travelzunlimited.com";
                                }
                                else if (bcc == "2")
                                {
                                    fromemail = "reservation1@travelzunlimited.com";
                                }
                            }
                            else if (ds_mailTemplate1.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Agent")
                            {
                                fromemail = dt_agent.Rows[0]["CUST_REL_EMAIL"].ToString();
                            }
                            else if (ds_mailTemplate1.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Supplier")
                            {
                                fromemail = supplier_email;
                            }
                            else
                            {
                                fromemail = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                            }
                        }

                        string toemail1 = "";
                        if (ds_mailTemplate1.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate1.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString());

                            if (ds_mailTemplate1.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Agent")
                            {
                                toemail1 = dt_agent.Rows[0]["CUST_REL_EMAIL"].ToString();
                            }
                            else if (ds_mailTemplate1.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Backoffice")
                            {
                                if (bcc == "1")
                                {
                                    toemail1 = "reservation@travelzunlimited.com";
                                }
                                else if (bcc == "2")
                                {
                                    toemail1 = "reservation1@travelzunlimited.com";
                                }
                            }
                            else if (ds_mailTemplate1.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Supplier")
                            {
                                toemail1 = supplier_email;
                            }
                            else
                            {
                                toemail1 = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                            }
                        }

                        if (ds_mailTemplate1.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate1.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString());
                            if (ds_mailTemplate1.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Agent")
                            {
                                cc = dt_agent.Rows[0]["CUST_REL_EMAIL"].ToString();
                            }

                            else if (ds_mailTemplate1.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Backoffice")
                            {
                                if (bcc == "1")
                                {
                                    cc = "reservation@travelzunlimited.com";
                                }
                                else if (bcc == "2")
                                {
                                    cc = "reservation1@travelzunlimited.com";
                                }
                            }

                            //else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Supplier")
                            //{
                            //    cc = dt_hotelEmails.Rows[i_supp]["SUPPLIER_REL_EMAIL"].ToString();
                            //}

                            else
                            {
                                cc = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                            }


                        }

                        string bcc1 = "";
                        if (ds_mailTemplate1.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate1.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString());

                            if (ds_mailTemplate1.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Agent")
                            {
                                bcc1 = dt_agent.Rows[0]["CUST_REL_EMAIL"].ToString();
                            }

                            else if (ds_mailTemplate1.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                            {
                                if (bcc == "1")
                                {
                                    bcc1 = "reservation@travelzunlimited.com";
                                }
                                else if (bcc == "2")
                                {
                                    bcc1 = "reservation1@travelzunlimited.com";
                                }
                            }

                            else if (ds_mailTemplate1.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Supplier")
                            {
                                bcc = supplier_email;
                            }

                            else
                            {
                                bcc1 = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                            }
                        }
                        string body = "";

                        //  body = "Dear Reservation,<br><br> Please Confirm as Below <br><br>" + hotel_name + "<br><br> Our Reference Number:" + EmailQoute_id + "<br>Name of the passenger :" + pessanger_name + "<br>Room Type:" + room_type + "<br>No of Single Rooms:" + single_rooms + "<br>No of Double Rooms:" + double_rooms + "<br>No of Triple Rooms:" + tripal_rooms + "<br>Check In Date : " + check_in_date + "<br>Check out Date :" + check_out_date + "<br><br>Please advise the Cut of Date : <br><br>Please advice the Last Payment Date : <br><br>Please send Confirmation No : <br><br> Best Reagrds <br>Travelz Unlmited";
                        string strEmailTemplate = ds_mailTemplate1.Tables[0].Rows[1]["EMAIL_CONTENT"].ToString();
                        //  body = FormatEmail(strEmailTemplate, Tourname, AgentName);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%HOTELNAME%&gt;", hotel_name);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%QUOTEID%&gt;", EmailQoute_id);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENTNAME%&gt;", pessanger_name);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOMTYPE%&gt;", room_type);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLEROOMS%&gt;", single_rooms);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLEROOMS%&gt;", double_rooms);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLEROOMS%&gt;", tripal_rooms);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%CHECKINDATE%&gt;", check_in_date);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%CHECKOUTDATE%&gt;", check_out_date);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFADULT%&gt;", adults);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCWB%&gt;", cwb);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCNB%&gt;", cnb);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFINFANT%&gt;", infant);

                        body = strEmailTemplate;
                        try
                        {
                            MailMessage message = new MailMessage();
                           
                            message.From = new MailAddress(fromemail);
                           
                            message.To.Add(new MailAddress(toemail1));
                            if (cc != "")
                            {
                                message.CC.Add(new MailAddress(cc));
                            }

                            if (bcc1 != "")
                            {
                                message.Bcc.Add(new MailAddress(bcc1));
                            }

                            string subjct = "";
                            subjct = ds_mailTemplate1.Tables[0].Rows[1]["EMAIL_SUBJECT"].ToString();

                            //  message.Subject = "Booking for : " + clientname + " Check in date : " + fromdate + " Check out date : " + todate;
                            subjct = subjct.Replace("<%CLIENTNAME%>", pessanger_name);
                            subjct = subjct.Replace("<%CHECKINDATE%>", check_in_date);
                            subjct = subjct.Replace("<%CHECKOUTDATE%>", check_out_date);

                            message.Subject = subjct;
                           
                            message.Body = body;
                            message.IsBodyHtml = true;

                            SmtpClient client = new SmtpClient();
                            NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                            client.Credentials = info;
                            client.Host = smtphost;
                            client.Port = int.Parse(smtpport);
                            client.DeliveryMethod = SmtpDeliveryMethod.Network;
                            client.Send(message);

                            if (count == 1)
                            {
                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate1.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc1, subjct, body, int.Parse(EmailQoute_id), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                            }
                            if (count != 0)
                            {
                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate1.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc1, subjct, body, int.Parse(EmailQoute_id), "", "", "", int.Parse(Session["usersid"].ToString()), 2);
                            }


                        }
                        catch (Exception ex)
                        {

                        }
                    }
                }
            }
            #region AgentMail

            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[3]["AutoSearchResult"].ToString());
            if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
            {
                #region AgentEmail Variable
                string agentEmail = Session["email"].ToString();
                string fromdate;
                string todate;
                string clientname;
                string agentname;
                string agentbody = "";
                string filename = HttpContext.Current.Request.MapPath("~/Views/FIT/Quotes/" + EmailQoute_id.ToString() + "/Quotation.pdf");
                Attachment attachFile = new Attachment(filename);

                string filename1 = "~/Views/FIT/Quotes/" + EmailQoute_id.ToString() + "/Quotation.pdf";

                #endregion

                try
                {
                    //DataTable dt_agent = new DataTable();

                    //SqlCommand agent_comm = new SqlCommand("AGENT_BOOKING_EMAIL", conn);
                    //agent_comm.CommandType = CommandType.StoredProcedure;
                    //agent_comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
                    //SqlDataReader agent_rdr = agent_comm.ExecuteReader();
                    //dt_agent.Load(agent_rdr);

                    fromdate = dt_agent.Rows[0]["TOUR_FROM_DATE"].ToString();
                    todate = dt_agent.Rows[0]["TOUR_TO_DATE"].ToString();
                    clientname = dt_agent.Rows[0]["CLIENT_NAME"].ToString();
                    agentname = dt_agent.Rows[0]["CUST_REL_NAME"].ToString();

                    string fromemail = "";
                    if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString());


                        if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            if (bcc == "1")
                            {
                                fromemail = "reservation@travelzunlimited.com";
                            }
                            else if (bcc == "2")
                            {
                                fromemail = "reservation1@travelzunlimited.com";
                            }
                        }
                        else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                        {
                            fromemail = dt_agent.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }
                        else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Supplier")
                        {
                            fromemail = supplier_email;
                        }
                        else
                        {
                            fromemail = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                        }
                    }

                    string toemail1 = "";
                    if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString());

                        if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                        {
                            toemail1 = dt_agent.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }
                        else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            if (bcc == "1")
                            {
                                toemail1 = "reservation@travelzunlimited.com";
                            }
                            else if (bcc == "2")
                            {
                                toemail1 = "reservation1@travelzunlimited.com";
                            }
                        }
                        else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Supplier")
                        {
                            toemail1 = supplier_email;
                        }
                        else
                        {
                            toemail1 = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                        }
                    }

                    if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());
                        if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Agent")
                        {
                            cc = dt_agent.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }

                        else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            if (bcc == "1")
                            {
                                cc = "reservation@travelzunlimited.com";
                            }
                            else if (bcc == "2")
                            {
                                cc = "reservation1@travelzunlimited.com";
                            }
                        }

                        else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Supplier")
                        {
                            cc = supplier_email;
                        }

                        else
                        {
                            cc = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                        }


                    }

                    string bcc1 = "";
                    if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString());

                        if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                        {
                            bcc1 = dt_agent.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }

                        else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            if (bcc == "1")
                            {
                                bcc1 = "reservation@travelzunlimited.com";
                            }
                            else if (bcc == "2")
                            {
                                bcc1 = "reservation1@travelzunlimited.com";
                            }
                        }

                        else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Supplier")
                        {
                            bcc1 = supplier_email;
                        }

                        else
                        {
                            bcc1 = ds_Mail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                        }
                    }


                    // agentbody = "Dear   " + agentname + ",<br><br>We have received your booking as per the attached file. <br>Confirmations Shall be updated Shortly. <br><br>Best Regards<br>Travelz Unlimited";
                    agentbody = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();
                    agentbody = agentbody.Replace("&lt;%AGENTNAME%&gt;", agentname);

                    MailMessage message = new MailMessage();

                    message.From = new MailAddress(fromemail);
                    // message.To.Add(agentEmail.ToString());
                    message.To.Add(new MailAddress(toemail1));
                    if (cc != "")
                    {
                        message.CC.Add(new MailAddress(cc));
                    }

                    if (bcc1 != "")
                    {
                        message.Bcc.Add(new MailAddress(bcc1));
                    }

                    string subjct1 = "";
                    subjct1 = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();

                    //  message.Subject = "Booking for : " + clientname + " Check in date : " + fromdate + " Check out date : " + todate;
                    subjct1 = subjct1.Replace("<%CLIENTNAME%>", clientname);
                    subjct1 = subjct1.Replace("<%CHECKINDATE%>", fromdate);
                    subjct1 = subjct1.Replace("<%CHECKOUTDATE%>", todate);

                    message.Subject = subjct1;
                    message.Body = agentbody;
                    message.IsBodyHtml = true;
                    message.Attachments.Add(attachFile);
                    SmtpClient client = new SmtpClient();
                    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                    client.Credentials = info;
                    client.Host = smtphost;
                    client.Port = int.Parse(smtpport);
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.Send(message);

                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, subjct1, agentbody, quote_id, "", filename1, "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 1);
                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, subjct1, agentbody, quote_id, "", filename1, "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 2);
                }
                catch (Exception ex)
                {

                }

            }
            #endregion

            #region BACKOFFICE EMAIL

            //String cc1 = "";
            //if (bcc == "1")
            //{
            //    cc1 = "reservation@travelzunlimited.com";
            //}
            //else if (bcc == "2")
            //{
            //    cc1 = "reservation1@travelzunlimited.com";
            //}

            //string BACKPFFICE = cc1;
            //DataTable DTEMP = objHotelStoreProcedure.FETCH_EMP_NAME_oF_backoffice(cc);
            //string Employee = DTEMP.Rows[0]["EMP_NAME"].ToString();
            //string fromdate1;
            //string todate1;
            //string clientname1;
            //string agentname1;
            //string agentbody1;
            //string filename1 = HttpContext.Current.Request.MapPath("~/Views/FIT/Quotes/" + Session["updateid"].ToString() + "/Quotation.pdf");
            //Attachment attachFile1 = new Attachment(filename1);

            //try
            //{
            //    DataTable dt_agent = new DataTable();
            //    DataTable dt = new DataTable();

            //    SqlCommand agent_comm = new SqlCommand("AGENT_BOOKING_EMAIL", conn);
            //    agent_comm.CommandType = CommandType.StoredProcedure;
            //    agent_comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
            //    SqlDataReader agent_rdr = agent_comm.ExecuteReader();
            //    dt_agent.Load(agent_rdr);

            //    SqlCommand comm1 = new SqlCommand("FETCH_AGENT_QUOTATION_DETAILS", conn);
            //    comm1.CommandType = CommandType.StoredProcedure;

            //    comm1.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = Convert.ToInt32(EmailQoute_id);

            //    SqlDataReader rdr1 = comm1.ExecuteReader();
            //    dt.Load(rdr1);

            //    agentname1 = dt.Rows[0]["CUST_REL_NAME"].ToString();
            //    Tourname = dt.Rows[0]["TOUR_SHORT_NAME"].ToString();


            //    fromdate1 = dt_agent.Rows[0]["TOUR_FROM_DATE"].ToString();
            //    todate1 = dt_agent.Rows[0]["TOUR_TO_DATE"].ToString();
            //    clientname1 = dt_agent.Rows[0]["CLIENT_NAME"].ToString();
            //    agentname1 = dt_agent.Rows[0]["CUST_REL_NAME"].ToString();

            //    agentbody1 = "Dear   " + Employee + ",<br><br>" + agentname1 + " has Booked FIT Package as per the attached file. <br>Kindly update the Hotel Confirmations ASAP. <br><br>Best Regards<br>Travelz Unlimited";


            //    MailMessage message = new MailMessage();
            //    message.From = new MailAddress(cc1);
            //    message.To.Add(BACKPFFICE.ToString());
            //    message.Subject = "Booking for : " + clientname1 + " Check in date : " + fromdate1 + " Check out date : " + todate1;
            //    message.Body = agentbody1;
            //    message.IsBodyHtml = true;

            //    message.Attachments.Add(new Attachment(filename1));



            //    //message.Attachments.Add(attachFile);
            //    SmtpClient client = new SmtpClient();
            //    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
            //    client.Credentials = info;
            //    client.Host = smtphost;
            //    client.Port = 587;
            //    client.DeliveryMethod = SmtpDeliveryMethod.Network;
            //    client.Send(message);
            //}
            //catch (Exception ex)
            //{

            //}


            #endregion

            conn.Close();
        }
        #endregion

        #region On Confirm Mail


        protected void ConfirmButtonEmail()
        {
            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");

            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[2]["AutoSearchResult"].ToString());


            SqlConnection confirmemailconn = new SqlConnection(str);
            confirmemailconn.Open();

            DataTable Confirm = new DataTable();
            SqlCommand Confirm_comm = new SqlCommand("AGENT_BOOKING_EMAIL", confirmemailconn);
            Confirm_comm.CommandType = CommandType.StoredProcedure;
            Confirm_comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(Session["updateid"].ToString());
            SqlDataReader Confirm_rdr = Confirm_comm.ExecuteReader();
            Confirm.Load(Confirm_rdr);

            if (Confirm.Rows[0]["AGENT_RECONFIRMATION_DATE"].ToString() != "")
            {
                objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", Session["updateid"].ToString(), Confirm.Rows[0]["AGENT_RECONFIRMATION_DATE"].ToString(), "To Be Reconfirmed");
                if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
                {


                    #region ConfirmVariable

                    string ConfirmagentEmail = Session["email"].ToString();
                    string Confirmfromdate;
                    string Confirmtodate;
                    string Confirmclientname;
                    string Confirmagentname;
                    string Confirmagentbody;
                    string AgentReconfirmation;
                    string singlerooms;
                    string doublerooms;
                    string triplarooms;
                    string refrenceno;
                    string hotelroomtype;
                    string EmailQoute_id = Session["updateid"].ToString();
                    #endregion



                    DataTable dtemail = objHotelStoreProcedure.fetch_backoffice_for_book(Session["updateid"].ToString());
                    string a;
                    if (dtemail.Rows.Count != 0)
                    {
                        if (dtemail.Rows[0]["BOOK_EMAIL_TO_BACKOFFICE"].ToString() == "1")
                        {
                            //DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["updateid"].ToString()), "2");
                            a = dtemail.Rows[0]["BOOK_EMAIL_TO_BACKOFFICE"].ToString();
                        }
                        else
                        {
                            //DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["updateid"].ToString()), "1");
                            a = dtemail.Rows[0]["BOOK_EMAIL_TO_BACKOFFICE"].ToString();
                        }
                    }
                    else
                    {
                        DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["updateid"].ToString()), "1");
                        a = dt1.Rows[0]["BOOK_EMAIL_TO_BACKOFFICE"].ToString();
                    }
                    String cc = "";


                    string filename = "~/Views/FIT/Quotes/" + Session["updateid"].ToString() + "/Quotation.pdf";

                    try
                    {

                        string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
                        string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
                        string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
                        string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();



                        Confirmfromdate = Confirm.Rows[0]["ARIVAL_DATE"].ToString();
                        Confirmtodate = Confirm.Rows[0]["DEPARTURE_DATE"].ToString();
                        Confirmclientname = Confirm.Rows[0]["CLIENT_NAME"].ToString();
                        Confirmagentname = Confirm.Rows[0]["CUST_REL_NAME"].ToString();



                        AgentReconfirmation = Confirm.Rows[0]["AGENT_RECONFIRMATION_DATE"].ToString();
                        singlerooms = Confirm.Rows[0]["SINGLE_ROOMS"].ToString();
                        doublerooms = Confirm.Rows[0]["DOUBLE_ROOMS"].ToString();
                        triplarooms = Confirm.Rows[0]["TRIPAL_ROOMS"].ToString();
                        refrenceno = Confirm.Rows[0]["QUOTE_ID"].ToString();
                        hotelroomtype = Confirm.Rows[0]["ROOM_TYPE_NAME"].ToString();


                        DataTable dt = new DataTable();
                        SqlCommand comm1 = new SqlCommand("FETCH_AGENT_QUOTATION_DETAILS", confirmemailconn);
                        comm1.CommandType = CommandType.StoredProcedure;

                        comm1.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = Convert.ToInt32(EmailQoute_id);

                        SqlDataReader rdr1 = comm1.ExecuteReader();
                        dt.Load(rdr1);

                        AgentName = dt.Rows[0]["CUST_REL_NAME"].ToString();
                        Tourname = dt.Rows[0]["TOUR_SHORT_NAME"].ToString();

                        string to = "";
                        if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Supplier")
                            {

                                to = ConfirmagentEmail.ToString();
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                            {
                                to = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                            }
                            else
                            {
                                to = ds_boMail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                            }
                        }

                        if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                            {

                                if (a == "1")
                                {
                                    cc = "reservation@travelzunlimited.com";
                                }
                                else if (a == "2")
                                {
                                    cc = "reservation1@travelzunlimited.com";
                                }
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                            {
                                cc = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Supplier")
                            {
                                cc = ConfirmagentEmail.ToString();
                            }
                            else
                            {
                                cc = ds_boMail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                            }
                        }

                        string from = "";
                        if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                            {

                                if (a == "1")
                                {
                                    from = "reservation@travelzunlimited.com";
                                }
                                else if (a == "2")
                                {
                                    from = "reservation1@travelzunlimited.com";
                                }
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                            {
                                from = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Supplier")
                            {
                                from = ConfirmagentEmail.ToString();
                            }
                            else
                            {
                                from = ds_boMail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                            }
                        }
                        string bcc = "";
                        if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                            {

                                if (a == "1")
                                {
                                    bcc = "reservation@travelzunlimited.com";
                                }
                                else if (a == "2")
                                {
                                    bcc = "reservation1@travelzunlimited.com";
                                }
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                            {
                                bcc = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Supplier")
                            {
                                bcc = ConfirmagentEmail.ToString();
                            }
                            else
                            {
                                bcc = ds_boMail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                            }
                        }

                        Confirmagentbody = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();
                        //   Confirmagentbody = "Dear   " + Confirmagentname + ",<br><br>We are pleased to confirm the booking for  " + Confirmclientname + "  as attached.<br><br> Please Check All Booking details Stated in attached file <br><br> Please reconfirm before Cut of date :  " + AgentReconfirmation + "<br><br> Our Refrence No:" + refrenceno + " <br> Passenger Name :  " + Confirmclientname + "<br> Single Rooms :  " + singlerooms + "<br>Double Rooms : " + doublerooms + "<br> Tripal Rooms : " + triplarooms + "<br> Arival Date : " + Confirmfromdate + "<br> Departure Date : " + Confirmtodate + "<br><br>Best Regards<br>Travelz Unlimited";
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%QUOTEID%&gt;", EmailQoute_id);
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%AGENTNAME%&gt;", Confirmagentname);
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%CLIENTNAME%&gt;", Confirmclientname);
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%RECONFIRMDATE%&gt;", AgentReconfirmation);
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%CLIENTNAME%&gt;", refrenceno);
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%SINGLEROOMS%&gt;", singlerooms);
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%DOUBLEROOMS%&gt;", doublerooms);
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%TRIPALROOMS%&gt;", triplarooms);
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%ARRIVALDATE%&gt;", Confirmfromdate);
                        Confirmagentbody = Confirmagentbody.Replace("&lt;%DEPARTUREDATE%&gt;", Confirmtodate);

                        string reportType = "PDF";
                        string mimeType;
                        string encoding;
                        string fileNameExtension;

                        Warning[] warnings;
                        string[] streams;
                        byte[] renderedBytes;

                        string deviceInfo =
                        "<DeviceInfo>" +
                        "  <OutputFormat>PDF</OutputFormat>" +
                        "  <PageWidth>10in</PageWidth>" +
                        "  <PageHeight>9in</PageHeight>" +
                        "  <MarginTop>0.50in</MarginTop>" +
                        "  <MarginLeft>0.50in</MarginLeft>" +
                        "  <MarginRight>0.50in</MarginRight>" +
                        "  <MarginBottom>0.50in</MarginBottom>" +
                        "</DeviceInfo>";

                        ReportParameter[] parm = new ReportParameter[1];
                        parm[0] = new ReportParameter("QOUTE_ID", EmailQoute_id.ToString());
                        rptViewer1.ShowCredentialPrompts = false;
                        rptViewer1.ShowParameterPrompts = false;

                        rptViewer1.ServerReport.ReportServerCredentials = new ReportCredentials(WebConfigurationManager.AppSettings["ReportServerUsername"].ToString(), WebConfigurationManager.AppSettings["ReportServerPassword"].ToString(), WebConfigurationManager.AppSettings["ReportServerDomain"].ToString());

                        rptViewer1.ProcessingMode = Microsoft.Reporting.WebForms.ProcessingMode.Remote;
                        rptViewer1.ServerReport.ReportServerUrl = new System.Uri(WebConfigurationManager.AppSettings["ReportServer"].ToString());
                        rptViewer1.ServerReport.ReportPath = "/ThailandReport/Invoice";
                        rptViewer1.ServerReport.SetParameters(parm);
                        rptViewer1.ServerReport.Refresh();


                        //Render the report
                        //Clear the response stream and write the bytes to the outputstream
                        //Set content-disposition to "attachment" so that user is prompted to take an action
                        //on the file (open or save)
                        renderedBytes = rptViewer1.ServerReport.Render(reportType, deviceInfo, out mimeType, out encoding, out fileNameExtension, out streams, out warnings);
                        rptViewer1.Visible = false;

                        MailMessage message = new MailMessage();

                        message.From = new MailAddress(from);
                        message.To.Add(new MailAddress(to));
                        if (cc != "")
                        {
                            message.CC.Add(new MailAddress(cc));
                        }

                        if (bcc != "")
                        {
                            message.Bcc.Add(new MailAddress(bcc));
                        }

                        string subjct = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();
                        subjct = subjct.Replace("<%CLIENTNAME%>", Confirmclientname);
                        subjct = subjct.Replace("<%ARRIVALDATE%>", Confirmfromdate);
                        subjct = subjct.Replace("<%DEPARTUREDATE%>", Confirmtodate);

                        //message.Subject = "Booking for : " + Confirmclientname + " Arrival date : " + Confirmfromdate + " Departure date : " + Confirmtodate;
                        message.Subject = subjct;
                        message.Body = Confirmagentbody;
                        message.IsBodyHtml = true;

                        message.Attachments.Add(new Attachment(new MemoryStream(renderedBytes), Tourname + ".pdf"));

                        SmtpClient client = new SmtpClient();
                        NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                        client.Credentials = info;
                        client.Host = smtphost;
                        client.Port = int.Parse(smtpport);
                        client.DeliveryMethod = SmtpDeliveryMethod.Network;
                        client.Send(message);

                        confirmemailconn.Close();

                        objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), from, to, cc, bcc, subjct, Confirmagentbody, int.Parse(EmailQoute_id), "", filename, "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 1);
                        objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), from, to, cc, bcc, subjct, Confirmagentbody, int.Parse(EmailQoute_id), "", filename, "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 2);
                    }
                    catch (Exception ex)
                    {


                    }

                }
            }
        }
        #endregion

        #region On ReConfirm Mail

        protected void ReconfirmEmail()
        {
            string EmailQoute_id = Session["updateid"].ToString();
            try
            {
                DataTable dt_supplier_id = new DataTable();
                SqlConnection conn = new SqlConnection(str);
                conn.Open();


                SqlCommand comm = new SqlCommand("FETCH_SUPPLIER_ID", conn);
                comm.CommandType = CommandType.StoredProcedure;
                comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
                SqlDataReader rdr = comm.ExecuteReader();
                dt_supplier_id.Load(rdr);




                for (int i_supp = 0; i_supp < dt_supplier_id.Rows.Count; i_supp++)
                {

                    supplier_id = dt_supplier_id.Rows[i_supp]["SUPPLIER_ID"].ToString();
                    DataTable dt_hotelEmails = new DataTable();

                    SqlCommand email = new SqlCommand("FETCH_SUPPLIER_EMAIL_FOR_MAIL", conn);
                    email.CommandType = CommandType.StoredProcedure;
                    email.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
                    SqlDataReader rdremail = email.ExecuteReader();
                    dt_hotelEmails.Load(rdremail);

                    hotelsupplier_id = dt_hotelEmails.Rows[i_supp]["SUPPLIER_ID"].ToString();
                    supplier_email = dt_hotelEmails.Rows[i_supp]["SUPPLIER_REL_EMAIL"].ToString();

                    if (hotelsupplier_id == supplier_id)
                    {
                        DataTable dt_hotelDetails = new DataTable();

                        SqlCommand details = new SqlCommand("FETCH_HOTEL_DETAILS_FOR_MAIL", conn);
                        details.CommandType = CommandType.StoredProcedure;
                        details.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
                        details.Parameters.Add("@SUPPLIER_ID", SqlDbType.Int).Value = int.Parse(hotelsupplier_id);
                        SqlDataReader rdrdetails = details.ExecuteReader();

                        dt_hotelDetails.Load(rdrdetails);

                        single_rooms = dt_hotelDetails.Rows[0]["SINGLE_ROOMS"].ToString();
                        double_rooms = dt_hotelDetails.Rows[0]["DOUBLE_ROOMS"].ToString();
                        tripal_rooms = dt_hotelDetails.Rows[0]["TRIPAL_ROOMS"].ToString();
                        room_type = dt_hotelDetails.Rows[0]["ROOM_TYPE_NAME"].ToString();
                        hotel_name = dt_hotelDetails.Rows[0]["CHAIN_NAME"].ToString();
                        pessanger_name = dt_hotelDetails.Rows[0]["CLIENT_NAME"].ToString();
                        check_in_date = dt_hotelDetails.Rows[0]["CHECK_IN_DATE"].ToString();
                        check_out_date = dt_hotelDetails.Rows[0]["CHECK_OUT_DATE"].ToString();

                    }

                    string body = "";
                    body = "Dear Reservation,<br><br> Please Re Confirm as Below <br><br> Our Reference Number:" + EmailQoute_id + "<br>Name of the passenger :" + pessanger_name + "<br>No of Single Rooms:" + single_rooms + "<br>No of Double Rooms:" + double_rooms + "<br>No of Triple Rooms:" + tripal_rooms + "<br>Check In Date : " + check_in_date + "<br>Check out Date :" + check_out_date + "<br><br> Please Send the Invoice to our account for the above booking on acccount@travelzunlimited.com <br><br> Best Reagrds <br>Travelz Unlmited";


                    MailMessage message = new MailMessage();
                    //      message.From = new MailAddress(fromemail);
                    message.To.Add(new MailAddress(dt_hotelEmails.Rows[i_supp]["SUPPLIER_REL_EMAIL"].ToString()));
                    message.CC.Add(new MailAddress("fitops@travelzunlimited.com"));
                    message.Subject = "Booking for : " + pessanger_name + " Check in date : " + check_in_date + " Check out date : " + check_out_date;
                    message.Body = body;
                    message.IsBodyHtml = true;

                    SmtpClient client = new SmtpClient();
                    //      NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                    //       client.Credentials = info;
                    //       client.Host = smtphost;
                    client.Port = 587;
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.Send(message);


                }
                conn.Close();
            }
            catch (Exception ex)
            {


            }


        }
        #endregion

        #region SendEmail

        protected void SendMailQuote(byte[] _file1)
        {
            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");

            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[4]["AutoSearchResult"].ToString());

            if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
            {



                DataTable dt = new DataTable();
                SqlConnection conn = new SqlConnection(str);
                conn.Open();

                SqlCommand comm = new SqlCommand("FETCH_AGENT_QUOTATION_DETAILS", conn);
                comm.CommandType = CommandType.StoredProcedure;

                comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = Convert.ToInt32(quote_id);

                SqlDataReader rdr = comm.ExecuteReader();
                dt.Load(rdr);

                AgentName = dt.Rows[0]["CUST_REL_NAME"].ToString();
                Tourname = dt.Rows[0]["TOUR_SHORT_NAME"].ToString();

                string cc = "";

                if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());

                        cc = "info@travelzunlimited.com";
                       
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Agent")
                    {
                        cc = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                    }

                    else
                    {
                        DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());
                        cc = ds_boMail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }

                string empflag = Session["FLAG"].ToString();
                string body = "";
              

                string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();
                body = FormatEmail(strEmailTemplate, Tourname, "Sudhir");

                string filename = "~/Views/FIT/Quotes/" + Session["updateid"].ToString() + "/Quotation.pdf";

                try
                {



                    string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
                    string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
                    string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
                    string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();

                    string fromemail = "";
                    if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString());
                        if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                        {
                            fromemail = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }
                        else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            fromemail = "info@travelzunlimited.com";
                           
                        }
                       
                    }


                    string toemail1 = "";
                    if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString());
                        if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                        {
                            toemail1 = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }
                        else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            toemail1 = "info@travelzunlimited.com";
                          
                        }
                        else
                        {
                            
                            toemail1 = ds_Mail.Tables[0].Rows[0][0].ToString();
                        }


                    }
                   

                    string bcc = "";
                    if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString());
                        if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                        {
                            bcc = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }


                        else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            bcc = "info@travelzunlimited.com";
                           
                        }
                        else
                        {
                            
                            bcc = ds_Mail.Tables[0].Rows[0][0].ToString();
                        }
                    }

                   
                    MailMessage message = new MailMessage();
                    message.From = new MailAddress(fromemail);
                    message.To.Add(new MailAddress(toemail1.ToString()));

                    if (cc != "")
                    {
                        message.CC.Add(new MailAddress(cc.ToString()));
                    }
                    if (bcc != "")
                    {
                        message.Bcc.Add(new MailAddress(bcc.ToString()));
                    }

                    String mail_subject = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();
                    mail_subject = mail_subject.Replace("<%QUOTEID%>", quote_id.ToString());
                    message.Subject = mail_subject;
                    //   message.Subject = "FIT - Quotation - Reference No - " + quote_id;
                    message.Attachments.Add(new Attachment(new MemoryStream(_file1), Tourname + ".pdf"));
                    message.Body = body;
                    message.IsBodyHtml = true;

                    SmtpClient client = new SmtpClient();
                    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                    client.Credentials = info;
                    client.Host = smtphost;
                    client.Port = int.Parse(smtpport);
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.Send(message);

                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, mail_subject, body, quote_id, "", filename, "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 1);
                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, mail_subject, body, quote_id, "", filename, "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 2);
                }
                catch (Exception ex)
                {
                    
                }
            }
        }

        // ON BUTTON CLICK

        protected void SendMailQuoteforagent()
        {
            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");

            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[0][0].ToString());

            if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
            {

                string CarbonC = TextBox4.Text;

                DataTable dt = new DataTable();
                SqlConnection conn = new SqlConnection(str);
                conn.Open();

                SqlCommand comm = new SqlCommand("FETCH_AGENT_QUOTATION_DETAILS", conn);
                comm.CommandType = CommandType.StoredProcedure;
                quote_id = int.Parse(Session["updateid"].ToString());
                string filename = HttpContext.Current.Request.MapPath("~/Views/FIT/Quotes/" + quote_id.ToString() + "/Quotation.pdf");

                string filename1 = "~/Views/FIT/Quotes/" + quote_id.ToString() + "/Quotation.pdf";

                Attachment attachFile = new Attachment(filename);
                comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = Convert.ToInt32(quote_id);

                SqlDataReader rdr = comm.ExecuteReader();
                dt.Load(rdr);

                AgentName = dt.Rows[0]["CUST_REL_NAME"].ToString();
                Tourname = dt.Rows[0]["TOUR_SHORT_NAME"].ToString();
                string empflag = Session["FLAG"].ToString();
                DataTable dtad = objHotelStoreProcedure.objfetchusername("FETCH_USER_NAME_FOR_MAIL", Session["rel_sr_no"].ToString());
                Session["email"] = dtad.Rows[0]["CUST_REL_EMAIL"].ToString();
               
                String cc = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());
                        cc = "info@travelzunlimited.com";
                      
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Agent")
                    {
                        cc = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                    }

                    else
                    {
                        DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());
                        cc = ds_boMail.Tables[0].Rows[0]["EMAIL_ADDRESS"].ToString();
                    }
                }
                if (TextBox4.Text != "")
                {
                    if (cc != "")
                    {
                        cc = cc + "," + TextBox4.Text;
                    }
                    else
                    {
                        cc = TextBox4.Text;
                    }
                }
                else
                {
                    
                }



                string body = "";
                




                string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();

                body = FormatEmail(strEmailTemplate, Tourname, AgentName);

              

                try
                {


                    //string smtpemail = "support@travelzunlimited.com"; //ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
                    //string smtppass = "30112011";//ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
                    //string smtphost = "mail.travelzunlimited.com";//ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
                    //string smtpport = "25"; //ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();

                    string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
                    string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
                    string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
                    string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();

                    string fromemail = "";
                    if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString());
                        if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                        {
                            fromemail = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }
                        else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            fromemail = "info@travelzunlimited.com";
                            
                        }
                      
                    }


                    string toemail1 = "";
                    if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString());
                        if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                        {
                            toemail1 = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }
                        else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            toemail1 = "info@travelzunlimited.com";
                      
                        }
                        else
                        {
                          
                            toemail1 = ds_Mail.Tables[0].Rows[0][0].ToString();
                        }


                    }
                  

                    string bcc = "";
                    if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                    {
                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString());
                        if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                        {
                            bcc = dt.Rows[0]["CUST_REL_EMAIL"].ToString();
                        }


                        else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                        {
                            bcc = "info@travelzunlimited.com";
                           
                        }
                        else
                        {
                            
                            bcc = ds_Mail.Tables[0].Rows[0][0].ToString();
                        }
                    }
                   
                    MailMessage message = new MailMessage();

                    message.From = new MailAddress(fromemail);
                    message.To.Add(new MailAddress(toemail1.ToString()));

                    if (cc != "")
                    {
                        message.CC.Add(new MailAddress(cc.ToString()));
                    }
                    if (bcc != "")
                    {
                        message.Bcc.Add(new MailAddress(bcc.ToString()));
                    }


                    String mail_subject = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();
                    mail_subject = mail_subject.Replace("<%QUOTEID%>", quote_id.ToString());

                    
                    message.Subject = mail_subject;
                    message.Attachments.Add(attachFile);
                    message.Body = body;
                    message.IsBodyHtml = true;

                    SmtpClient client = new SmtpClient();
                    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                    client.Credentials = info;
                    client.Host = smtphost;
                    client.Port = int.Parse(smtpport);
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.Send(message);

                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, mail_subject, body, quote_id, "", filename1, "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 1);
                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, mail_subject, body, quote_id, "", filename1, "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 2);

                    Master.DisplayMessage("Quote Sent To Agent Successfully.", "successMessage", 8000);
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        #endregion

        #endregion


        #region TRANSFER PACKAGE DROPDOWN
        public void drptransfer_SelectedIndexChanged(Object sender, EventArgs e)
        {
            DropDownList ddl1 = (DropDownList)sender;
            int repeaterItemIndex = ((GridViewRow)ddl1.NamingContainer).DataItemIndex;

            foreach (GridViewRow item in GridView10.Rows)
            {
                if (repeaterItemIndex == item.DataItemIndex)
                {
                    Label chk = (Label)item.FindControl("lbltp_flag");
                    Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                    DropDownList ddl = (DropDownList)item.FindControl("drptransfer");
                    DropDownList drp_time = (DropDownList)item.FindControl("tpdrp_time");
                    if (ddl.Text == "SIC")
                    {
                        DataSet ds0 = objHotelStoreProcedure.transfer_gettime("FETCH_TRANSFER_PACKAGE_TIME", int.Parse(tp_fromto_id.Text), chk.Text, "SIC");
                        binddropdownlist(drp_time, ds0);
                        uptransferPackage.Update();
                    }
                    else if (ddl.Text == "PVT")
                    {
                        DataSet ds0 = objHotelStoreProcedure.transfer_gettime("FETCH_TRANSFER_PACKAGE_TIME", int.Parse(tp_fromto_id.Text), chk.Text, "PVT");
                        binddropdownlist(drp_time, ds0);
                        uptransferPackage.Update();
                    }
                    else if (ddl.Text == "")
                    {
                        drp_time.Items.Clear();
                        uptransferPackage.Update();
                    }

                }
            }

        }
        #endregion

        #region transferPackage sachin

        protected void FillTransferPackageDetails()
        {
            #region transferPackage sachin new grid

            int i = 0;
            foreach (GridViewRow item in GridView10.Rows)
            {
                DataTable dttra = objHotelStoreProcedure.fetchTransferPackageforedit("FETCH_ALL_DATA_FOR_TRANSFERPACKAGE_EDIT_NEW", quoteid);
                if (dttra.Rows.Count != 0)
                {
                    Label priceid = (Label)item.FindControl("lbltp_priceid");
                    
                    DropDownList drpsic = (DropDownList)item.FindControl("drptransfer");
                    TextBox datebkk = (TextBox)item.FindControl("txtTPdate");
                    DropDownList drptime = (DropDownList)item.FindControl("tpdrp_time");
                    Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                    Label lblFlag = (Label)item.FindControl("lbltp_flag");

                    if (priceid.Text == dttra.Rows[0]["TRANSFER_PACKAGE_PRICE_ID"].ToString())
                    {
                        RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                        if (i == 0)
                        {
                            rbtn.Checked = true;
                        }
                        drpsic.SelectedValue = dttra.Rows[i]["SIC_PVT_FLAG"].ToString();
                        datebkk.Text = dttra.Rows[i]["START_DATE"].ToString();
                        drptime.SelectedValue = dttra.Rows[i]["START_TIME"].ToString();
                        if (drpsic.Text == "SIC")
                        {
                            DropDownList drp_time = (DropDownList)item.FindControl("tpdrp_time");
                            DataSet ds0 = objHotelStoreProcedure.transfer_gettime("FETCH_TRANSFER_PACKAGE_TIME", int.Parse(tp_fromto_id.Text), dttra.Rows[i]["FLAG"].ToString(), "SIC");
                            binddropdownlist(drptime, ds0);
                            uptransferPackage.Update();
                        }
                        else if (drpsic.Text == "PVT")
                        {
                            DropDownList drp_time = (DropDownList)item.FindControl("tpdrp_time");
                            DataSet ds0 = objHotelStoreProcedure.transfer_gettime("FETCH_TRANSFER_PACKAGE_TIME", int.Parse(tp_fromto_id.Text), dttra.Rows[i]["FLAG"].ToString(), "PVT");
                            binddropdownlist(drptime, ds0);
                            uptransferPackage.Update();
                        }
                        else
                        {
                            DropDownList drp_time = (DropDownList)item.FindControl("tpdrp_time");
                            drp_time.Items.Clear();
                            uptransferPackage.Update();
                        }
                        i = i + 1;
                       // datebkk.Enabled = false;
                    }
                    else
                    {
                        if (lblFlag.Text == " " || lblFlag.Text == "")
                        {
                            for (int j = 0; j < dttra.Rows.Count; j++)
                            {
                                if (dttra.Rows[j]["FLAG"].ToString() == " " || dttra.Rows[j]["FLAG"].ToString() == "")
                                {
                                    datebkk.Text = dttra.Rows[j]["START_DATE"].ToString();
                                }
                            }
                        }
                    }
                }
            }
            #endregion
        }
        #endregion


        #region DATE VALIDATION FOR SITE SEE

        private void site_date_validation()
        {
            foreach (GridViewRow item in GridView1.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_Bkkdate");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Bangkok");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }


                    }
                }
            }



            foreach (GridViewRow item in GV_Result.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_Ptydate");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");
                        //  TextBox datebkk = (TextBox)item.FindControl("txtSS_phuketdate");

                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Pattaya");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }

                    }
                }
            }




            foreach (GridViewRow item in GridView2.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_phuketdate");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                        //  TextBox datebkk = (TextBox)item.FindControl("txtSS_phuketdate");

                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Phuket");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }
                    }

                }
            }



            foreach (GridViewRow item in GridView3.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_kbv_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Krabi");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }

                    }

                }
            }


            foreach (GridViewRow item in GridView4.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_usm_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Samui");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }
                    }

                }
            }


            foreach (GridViewRow item in GridView5.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_cnx_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");

                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Chiangmai");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }

                    }
                }
            }



            foreach (GridViewRow item in GridView6.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_etc_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Hua Hin");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }

                    }
                }

            }
            foreach (GridViewRow item in GridView7.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_s_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Kanchanburi");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }

                    }
                }

            }
            foreach (GridViewRow item in GridView8.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_sps_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "Chingrai");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }

                    }
                }

            }
            foreach (GridViewRow item in GridView9.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                if (rbtn.Checked)
                {
                    TextBox date = (TextBox)item.FindControl("txtSS_zz_date");
                    if (date.Text != "")
                    {
                        Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                        DataSet ds = objHotelStoreProcedure.getdate(packagename.Text, date.Text, "zz");
                        if (ds.Tables[0].Rows[0]["ANSWER"].ToString() == "0")
                        {
                            ssdateflag = false;
                            ViewState["sitedateerror"] = packagename.Text + "Sight see is not operated on this day";
                            break;
                        }

                    }
                }

            }

        }
        #endregion

      

        #region DATE VALIDATION FOR HOTELS

        // PATTYA
        protected void txtpty_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (package_id == 6)
                {

                    Master.DisplayMessage("Please select Bangkok Hotels First", "successMessage", 8000);
                    txtpty_CheckIn.Text = "";
                }
                else
                {
                    System.DateTime today = DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null);

                    if (txtpty_CheckIn.Text == "")
                    {
                        Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                    }
                    else if ((DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        Master.DisplayMessage("Pattaya's hotel Check-In date must be within Tour Date.", "successMessage", 8000);
                        
                    }
                }
            }
            catch
            {
                txtpty_CheckIn.Text = "";
                Master.DisplayMessage("Pattaya's hotel Check-in date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        protected void txtpty_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null);
                if (txtpty_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Pattaya's hotel Check-Out date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Pattaya's hotel Check-Out date must be within Tour date.", "successMessage", 8000);
                    
                }
                else if ((DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Pattya's Hotel Check-Out date must be after Check-In date.", "successMessage", 8000);
                    
                }
                else
                {
                    if (txtphu_CheckIn.Visible == true)
                    {
                        txtphu_CheckIn.Text = txtpty_CheckOut.Text;
                        upHotelPhuket.Update();
                    }

                    else if (txtkbv_CheckIn.Visible == true)
                    {
                        txtkbv_CheckIn.Text = txtpty_CheckOut.Text;
                        upHotelkBV.Update();
                    }
                    else if (txtusm_CheckIn.Visible == true)
                    {
                        txtusm_CheckIn.Text = txtpty_CheckOut.Text;
                        upHotelUsm.Update();
                    }
                    else if (txtcnx_CheckIn.Visible == true)
                    {
                        txtcnx_CheckIn.Text = txtpty_CheckOut.Text;
                        uphotelCnx.Update();
                    }
                    else if (txtetc_CheckIn.Visible == true)
                    {
                        txtetc_CheckIn.Text = txtpty_CheckOut.Text;
                        uphotelEtc.Update();
                    }
                    else if (txtss_CheckIn.Visible == true)
                    {
                        txtss_CheckIn.Text = txtpty_CheckOut.Text;
                        upHotelSS.Update();
                    }
                    else if (txtsps_CheckIn.Visible == true)
                    {
                        txtsps_CheckIn.Text = txtpty_CheckOut.Text;
                        uphotelsps.Update();
                    }
                    else if (txtzz_CheckIn.Visible == true)
                    {
                        txtzz_CheckIn.Text = txtpty_CheckOut.Text;
                        uphotelZZ.Update();
                    }
                    else if (txtbkk_CheckIn.Visible == true)
                    {
                        txtbkk_CheckIn.Text = txtpty_CheckOut.Text;
                        uphotelBkk.Update();
                    }

                    FillSiteSeeingDateDropDown();
                   
                    //==================== new sachin grid=============//

                    foreach (GridViewRow item in GridView10.Rows)
                    {
                        Label chk = (Label)item.FindControl("lbltp_flag");
                        Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");

                        if (chk.Text == " " || chk.Text == "")
                        {
                            DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                            if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PATTAYA")
                            {
                                TextBox date = (TextBox)item.FindControl("txtTPdate");
                                date.Text = txtpty_CheckOut.Text;
                                date.Enabled = false;
                                uptransferPackage.Update();

                            }
                        }
                    }

                }
            }
            catch
            {
                txtpty_CheckOut.Text = "";
                Master.DisplayMessage("Pattaya's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        // PHUKET
        protected void txtphu_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null);

                if (txtphu_CheckIn.Text == "")
                {
                    Master.DisplayMessage("Phuket's hotel Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Phuket's hotel Check-In date must be Within Tour date.", "successMessage", 8000);
                    
                }
            }
            catch
            {
                txtphu_CheckIn.Text = "";
                Master.DisplayMessage("Phuket's hotel Check-In date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        protected void txtphu_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null);

                if (txtphu_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Phuket's hotel Check-Out Date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Phuket's hotel Check-Out Date Must Be Within tour Date.", "successMessage", 8000);
                   
                }
                else if ((DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Phuket's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                   
                }
                else
                {
                    if (txtkbv_CheckIn.Visible == true)
                    {
                        txtkbv_CheckIn.Text = txtphu_CheckOut.Text;
                        upHotelkBV.Update();
                    }
                    else if (txtusm_CheckIn.Visible == true)
                    {
                        txtusm_CheckIn.Text = txtphu_CheckOut.Text;
                        upHotelUsm.Update();
                    }
                    else if (txtcnx_CheckIn.Visible == true)
                    {
                        txtcnx_CheckIn.Text = txtphu_CheckOut.Text;
                        uphotelCnx.Update();
                    }
                    else if (txtetc_CheckIn.Visible == true)
                    {
                        txtetc_CheckIn.Text = txtphu_CheckOut.Text;
                        uphotelEtc.Update();
                    }
                    else if (txtss_CheckIn.Visible == true)
                    {
                        txtss_CheckIn.Text = txtphu_CheckOut.Text;
                        upHotelSS.Update();
                    }
                    else if (txtsps_CheckIn.Visible == true)
                    {
                        txtsps_CheckIn.Text = txtphu_CheckOut.Text;
                        uphotelsps.Update();
                    }
                    else if (txtzz_CheckIn.Visible == true)
                    {
                        txtzz_CheckIn.Text = txtphu_CheckOut.Text;
                        uphotelZZ.Update();
                    }
                    else if (txtbkk_CheckIn.Visible == true)
                    {
                        txtbkk_CheckIn.Text = txtphu_CheckOut.Text;
                        uphotelBkk.Update();
                    }


                  

                    FillSiteSeeingDateDropDown();

                    //==================== new tp grid ====================
                    foreach (GridViewRow item in GridView10.Rows)
                    {
                        Label chk = (Label)item.FindControl("lbltp_flag");
                        Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                        if (chk.Text == " " || chk.Text == "")
                        {
                            DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                            if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PHUKET" || ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PHUKET HOTEL")
                            {
                                TextBox date = (TextBox)item.FindControl("txtTPdate");
                                date.Text = txtphu_CheckOut.Text;
                                date.Enabled = false;
                                uptransferPackage.Update();

                            }
                        }
                    }
                }

            }
            catch
            {
                txtphu_CheckOut.Text = "";
                Master.DisplayMessage("Phuket's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        // KRABI
        protected void txtkbv_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null);
                if (txtkbv_CheckIn.Text == "")
                {
                    Master.DisplayMessage("Krabi's hotel Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Krabi's hotel Check-In date must be within tour Date.", "successMessage", 8000);
                   
                }
            }
            catch
            {
                txtkbv_CheckIn.Text = "";
                Master.DisplayMessage("Krabi's hotel Check-in date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        protected void txtkbv_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null);

                if (txtkbv_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Krabi's hotel Check-Out date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Krabi's hotel Check-Out date must be within tour date.", "successMessage", 8000);
                    
                }
                else if ((DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Krabi's Hotel Check-Out date must be after Check-In date.", "successMessage", 8000);
                   
                }
                else
                {
                    if (txtusm_CheckIn.Visible == true)
                    {
                        txtusm_CheckIn.Text = txtkbv_CheckOut.Text;
                        upHotelUsm.Update();
                    }
                    else if (txtcnx_CheckIn.Visible == true)
                    {
                        txtcnx_CheckIn.Text = txtkbv_CheckOut.Text;
                        uphotelCnx.Update();
                    }
                    else if (txtetc_CheckIn.Visible == true)
                    {
                        txtetc_CheckIn.Text = txtkbv_CheckOut.Text;
                        uphotelEtc.Update();
                    }
                    else if (txtss_CheckIn.Visible == true)
                    {
                        txtss_CheckIn.Text = txtkbv_CheckOut.Text;
                        upHotelSS.Update();
                    }
                    else if (txtsps_CheckIn.Visible == true)
                    {
                        txtsps_CheckIn.Text = txtkbv_CheckOut.Text;
                        uphotelsps.Update();
                    }
                    else if (txtzz_CheckIn.Visible == true)
                    {
                        txtzz_CheckIn.Text = txtkbv_CheckOut.Text;
                        uphotelZZ.Update();
                    }
                    else if (txtbkk_CheckIn.Visible == true)
                    {
                        txtbkk_CheckIn.Text = txtkbv_CheckOut.Text;
                        uphotelBkk.Update();
                    }

                    if (package_id == 33)
                    {
                        txtphu_CheckIn.Text = txtkbv_CheckOut.Text;
                        upHotelPhuket.Update();
                    }
                   

                    FillSiteSeeingDateDropDown();

                    foreach (GridViewRow item in GridView10.Rows)
                    {
                        Label chk = (Label)item.FindControl("lbltp_flag");
                        Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                        if (chk.Text == " " || chk.Text == "")
                        {
                            DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                            if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "KRABI HOTEL" || ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "KRABI")
                            {
                                TextBox date = (TextBox)item.FindControl("txtTPdate");
                                date.Text = txtkbv_CheckOut.Text;
                                date.Enabled = false;
                                uptransferPackage.Update();

                            }
                        }
                    }
                }

            }
            catch
            {
                Master.DisplayMessage("Krabi's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        // SAMUI
        protected void txtusm_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null);

                if (txtusm_CheckIn.Text == "")
                {
                    Master.DisplayMessage("Samui's hotel Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Samui's hotel Check-In date must be within tour date.", "successMessage", 8000);
                    
                }
            }
            catch
            {
                txtusm_CheckIn.Text = "";
                Master.DisplayMessage("Samui's hotel Check-in date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        protected void txtusm_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null);

                if (txtusm_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Samui's hotel Check-Out date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Samui's hotel Check-Out date must be within Tour date.", "successMessage", 8000);
                    
                }
                else if ((DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Samui's Hotel Check-Out date must be after Check-In date.", "successMessage", 8000);
                    
                }
                else
                {
                    if (txtcnx_CheckIn.Visible == true)
                    {
                        txtcnx_CheckIn.Text = txtusm_CheckOut.Text;
                        uphotelCnx.Update();
                    }
                    else if (txtetc_CheckIn.Visible == true)
                    {
                        txtetc_CheckIn.Text = txtusm_CheckOut.Text;
                        uphotelEtc.Update();
                    }
                    else if (txtss_CheckIn.Visible == true)
                    {
                        txtss_CheckIn.Text = txtusm_CheckOut.Text;
                        upHotelSS.Update();
                    }
                    else if (txtsps_CheckIn.Visible == true)
                    {
                        txtsps_CheckIn.Text = txtusm_CheckOut.Text;
                        uphotelsps.Update();
                    }
                    else if (txtzz_CheckIn.Visible == true)
                    {
                        txtzz_CheckIn.Text = txtusm_CheckOut.Text;
                        uphotelZZ.Update();
                    }
                    else if (txtbkk_CheckIn.Visible == true)
                    {
                        txtbkk_CheckIn.Text = txtusm_CheckOut.Text;
                        uphotelBkk.Update();
                    }

                   

                    FillSiteSeeingDateDropDown();
                    //======================= new coding in grid ===============
                    foreach (GridViewRow item in GridView10.Rows)
                    {
                        Label chk = (Label)item.FindControl("lbltp_flag");
                        Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                        if (chk.Text == " " || chk.Text == "")
                        {
                            DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                            if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "SAMUI")
                            {
                                TextBox date = (TextBox)item.FindControl("txtTPdate");
                                date.Text = txtusm_CheckOut.Text;
                                date.Enabled = false;
                                uptransferPackage.Update();

                            }
                        }
                    }
                }
            }
            catch
            {
                Master.DisplayMessage("Samui's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        // Chiangmai
        protected void txtcnx_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null);

                if (txtcnx_CheckIn.Text == "")
                {
                    Master.DisplayMessage("Chiang Mai's hotel Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Chiang Mai's hotel Check-In date must Be within Tour date.", "successMessage", 8000);
                   
                }
            }
            catch
            {
                txtcnx_CheckIn.Text = "";
                Master.DisplayMessage("Chiang Mai's hotel Check-in date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        protected void txtcnx_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null);

                if (txtcnx_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Chiang Mai's hotel Check-Out Date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Chiang Mai's hotel Check-Out date must be within Tour date.", "successMessage", 8000);
                    
                }
                else if ((DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Chiang Mai's Hotel Check-Out date must be after Check-In date.", "successMessage", 8000);
                   
                }
                else
                {
                    if (txtetc_CheckIn.Visible == true)
                    {
                        txtetc_CheckIn.Text = txtcnx_CheckOut.Text;
                        uphotelEtc.Update();
                    }
                    else if (txtss_CheckIn.Visible == true)
                    {
                        txtss_CheckIn.Text = txtcnx_CheckOut.Text;
                        upHotelSS.Update();
                    }
                    else if (txtsps_CheckIn.Visible == true)
                    {
                        txtsps_CheckIn.Text = txtcnx_CheckOut.Text;
                        uphotelsps.Update();
                    }
                    else if (txtzz_CheckIn.Visible == true)
                    {
                        txtzz_CheckIn.Text = txtcnx_CheckOut.Text;
                        uphotelZZ.Update();
                    }
                    else if (txtbkk_CheckIn.Visible == true)
                    {
                        txtbkk_CheckIn.Text = txtcnx_CheckOut.Text;
                        uphotelBkk.Update();
                    }

                   
                    FillSiteSeeingDateDropDown();

                    foreach (GridViewRow item in GridView10.Rows)
                    {
                        Label chk = (Label)item.FindControl("lbltp_flag");
                        Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");

                        if (chk.Text == " " || chk.Text == "")
                        {
                            DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                            if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "CHAINGMAI")
                            {
                                TextBox date = (TextBox)item.FindControl("txtTPdate");
                                date.Text = txtcnx_CheckOut.Text;
                                date.Enabled = false;
                                uptransferPackage.Update();

                            }
                        }
                    }
                }
            }
            catch
            {
                Master.DisplayMessage("Chiangmai's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        // HUA HIN
        protected void txtetc_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null);

                if (txtetc_CheckIn.Text == "")
                {
                    Master.DisplayMessage("Hua Hin's hotel Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Hua Hin's hotel Check-In date must be within Tour date.", "successMessage", 8000);
                   
                }
            }
            catch
            {
                txtetc_CheckIn.Text = "";
                Master.DisplayMessage("Hua Hin's hotel Check-in date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        protected void txtetc_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null);

                if (txtetc_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Hua Hin's hotel Check-Out date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Hua Hin's hotel Check-Out date must be within Tour date.", "successMessage", 8000);
                  
                }
                else if ((DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Hua Hin's Hotel Check-Out date must be after Check-In date.", "successMessage", 8000);
                    
                }
                else
                {
                    if (txtss_CheckIn.Visible == true)
                    {
                        txtss_CheckIn.Text = txtetc_CheckOut.Text;
                        upHotelSS.Update();
                    }
                    else if (txtsps_CheckIn.Visible == true)
                    {
                        txtsps_CheckIn.Text = txtetc_CheckOut.Text;
                        uphotelsps.Update();
                    }
                    else if (txtzz_CheckIn.Visible == true)
                    {
                        txtzz_CheckIn.Text = txtetc_CheckOut.Text;
                        uphotelZZ.Update();
                    }
                    else if (txtbkk_CheckIn.Visible == true)
                    {
                        txtbkk_CheckIn.Text = txtetc_CheckOut.Text;
                        uphotelBkk.Update();
                    }

                    FillSiteSeeingDateDropDown();
                    foreach (GridViewRow item in GridView10.Rows)
                    {
                        Label chk = (Label)item.FindControl("lbltp_flag");
                        Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");

                        if (chk.Text == " " || chk.Text == "")
                        {
                            DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                            if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "HUA HIN")
                            {
                                TextBox date = (TextBox)item.FindControl("txtTPdate");
                                date.Text = txtetc_CheckOut.Text;
                                date.Enabled = false;
                                uptransferPackage.Update();

                            }
                        }
                    }
                  
                }
            }
            catch
            {
                Master.DisplayMessage("Hua Hin's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        

        // Kanchanburi
        protected void txtss_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null);

                if (txtsps_CheckIn.Text == "")
                {
                    Master.DisplayMessage("Kanchanburi's hotel Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Kanchanburi's hotel Check-In date must Be within Tour Date.", "successMessage", 8000);
                   
                }
            }
            catch
            {
                txtsps_CheckIn.Text = "";
                Master.DisplayMessage("Kanchanburi's hotel Check-in date is not in correct format", "successMessage", 8000);


            }
            finally
            {
            }
        }

        protected void txtss_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null);

                if (txtsps_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Kanchanburi's hotel Check-Out date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Kanchanburi's hotel Check-Out date must be within Tour date.", "successMessage", 8000);
                   
                }
                else if ((DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Kanchanburi's Hotel Check-Out date must be after Check-In date.", "successMessage", 8000);
                  
                }
                else
                {
                    if (txtzz_CheckIn.Visible == true)
                    {
                        txtzz_CheckIn.Text = txtsps_CheckOut.Text;
                        uphotelZZ.Update();
                    }
                    else if (txtbkk_CheckIn.Visible == true)
                    {
                        txtbkk_CheckIn.Text = txtsps_CheckOut.Text;
                        uphotelBkk.Update();
                    }

                    FillSiteSeeingDateDropDown();
                    foreach (GridViewRow item in GridView10.Rows)
                    {
                        Label chk = (Label)item.FindControl("lbltp_flag");
                        Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");

                        if (chk.Text == " " || chk.Text == "")
                        {
                            DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                            if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "KANCHANBURI")
                            {
                                TextBox date = (TextBox)item.FindControl("txtTPdate");
                                date.Text = txtsps_CheckOut.Text;
                                date.Enabled = false;
                                uptransferPackage.Update();

                            }
                        }
                    }
                   
                }
            }
            catch
            {
                Master.DisplayMessage("Kanchanburi's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        // Chingrai
        protected void txtsps_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null);

                if (txtss_CheckIn.Text == "")
                {
                    Master.DisplayMessage("Chingrai's hotel Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Chingrai's hotel Check-In date must be within tour date.", "successMessage", 8000);

                }
            }
            catch
            {
                txtss_CheckIn.Text = "";
                Master.DisplayMessage("Chingrai's hotel Check-in date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        protected void txtsps_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null);

                if (txtss_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Chingrai's hotel Check-Out date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Chingrai's hotel Check-Out date must be within Tour date.", "successMessage", 8000);

                }
                else if ((DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Chingrai's Hotel Check-Out date must be after Check-In date.", "successMessage", 8000);

                }
                else
                {
                    if (txtsps_CheckIn.Visible == true)
                    {
                        txtsps_CheckIn.Text = txtss_CheckOut.Text;
                        uphotelsps.Update();
                    }
                    else if (txtzz_CheckIn.Visible == true)
                    {
                        txtzz_CheckIn.Text = txtss_CheckOut.Text;
                        uphotelZZ.Update();
                    }
                    else if (txtbkk_CheckIn.Visible == true)
                    {
                        txtbkk_CheckIn.Text = txtss_CheckOut.Text;
                        uphotelBkk.Update();
                    }

                    FillSiteSeeingDateDropDown();
                    foreach (GridViewRow item in GridView10.Rows)
                    {
                        Label chk = (Label)item.FindControl("lbltp_flag");
                        Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");

                        if (chk.Text == " " || chk.Text == "")
                        {
                            DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                            if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "CHINGRAI")
                            {
                                TextBox date = (TextBox)item.FindControl("txtTPdate");
                                date.Text = txtss_CheckOut.Text;
                                date.Enabled = false;
                                uptransferPackage.Update();

                            }
                        }
                    }

                }
            }
            catch
            {
                Master.DisplayMessage("Chingrai's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        // Phi Phi Island
        protected void txtzz_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null);

                if (txtzz_CheckIn.Text == "")
                {
                    Master.DisplayMessage("Phi Phi Island's hotel Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Phi Phi Island's hotel Check-In date must be within Tour date.", "successMessage", 8000);
                   
                }
            }
            catch
            {
                txtzz_CheckIn.Text = "";
                Master.DisplayMessage("Phi Phi Island's hotel Check-in date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        protected void txtzz_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null);

                if (txtzz_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Phi Phi Island's hotel Check-Out date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Phi Phi Island's hotel Check-Out date must be within Tour date.", "successMessage", 8000);
                    
                }
                else if ((DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Phi Phi Island's Hotel Check-Out date must be after Check-In date.", "successMessage", 8000);
                    
                }
                else
                {
                    if (txtbkk_CheckIn.Visible == true)
                    {
                        txtbkk_CheckIn.Text = txtzz_CheckOut.Text;
                        uphotelBkk.Update();
                    }
                    if (package_id == 34)
                    {
                        txtphu_CheckIn.Text = txtzz_CheckOut.Text;
                        upHotelPhuket.Update();
                    }
                    FillSiteSeeingDateDropDown();
                    foreach (GridViewRow item in GridView10.Rows)
                    {
                        Label chk = (Label)item.FindControl("lbltp_flag");
                        Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");

                        if (chk.Text == " " || chk.Text == "")
                        {
                            DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                            if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "PHI PHI ISLAND")
                            {
                                TextBox date = (TextBox)item.FindControl("txtTPdate");
                                date.Text = txtzz_CheckOut.Text;
                                date.Enabled = false;
                                uptransferPackage.Update();

                            }
                        }
                    }
                  
                }
            }
            catch
            {
                Master.DisplayMessage("ZZ's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        // BANGKOK
        protected void txtbkk_CheckIn_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null);

                if (txtbkk_CheckIn.Text == "")
                {
                    Master.DisplayMessage("Bangkok's hotel Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Bangkok's hotel Check-In date must be within Tour date.", "successMessage", 8000);
                    // bkkin1 = false;
                }
            }
            catch
            {
                txtbkk_CheckIn.Text = "";
                Master.DisplayMessage("Bangkok's hotel Check-in date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }

        protected void txtbkk_CheckOut_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null);

                if (txtbkk_CheckOut.Text == "")
                {
                    Master.DisplayMessage("Bangkok's hotel Check-Out date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Bangkok's hotel Check-Out date must be within Tour date.", "successMessage", 8000);
                    // bkkin1 = false;
                }
                else if ((DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null) > (DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null))))
                {
                    Master.DisplayMessage("Bangkok's hotel Check-Out date must be after Check-In date.", "successMessage", 8000);
                    //  zzout2 = false;
                }
                else
                {
                    if (package_id == 6)
                    {
                        txtpty_CheckIn.Text = txtbkk_CheckOut.Text;
                        upHotelPty.Update();
                        
                        foreach (GridViewRow item in GridView10.Rows)
                        {
                            Label chk = (Label)item.FindControl("lbltp_flag");
                            Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                            DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");

                            if (chk.Text == " " || chk.Text == "")
                            {
                                DataSet ds = objHotelStoreProcedure.get_transfer_city("GET_TRANSFER_CITY", int.Parse(tp_fromto_id.Text));
                                if (ds.Tables[0].Rows[0]["TRANSFER_PACKAGE_FROM_TO_NAME"].ToString() == "BANGKOK")
                                {
                                    TextBox date = (TextBox)item.FindControl("txtTPdate");
                                    date.Text = txtbkk_CheckOut.Text;
                                    date.Enabled = false;
                                    uptransferPackage.Update();

                                }
                            }
                        }
                        foreach (GridViewRow item in GV_Result.Rows)
                        {


                            int i = item.DataItemIndex;
                            DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                            DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtpty_CheckIn.Text, txtpty_CheckOut.Text);
                            ListItemCollection list = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                                list.Add(listitem);
                            }
                            DDC2.DDList.DataSource = list;
                            DDC2.DDList.DataTextField = "Text";
                            DDC2.DDList.DataValueField = "Value";
                            DDC2.DDList.DataBind();
                            upSSPty.Update();
                        }

                        foreach (GridViewRow item in GridView1.Rows)
                        {
                            int i = item.DataItemIndex;
                            DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                            DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtbkk_CheckIn.Text, txtbkk_CheckOut.Text);
                            ListItemCollection listbkk = new ListItemCollection();
                            for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                            {
                                ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                                listbkk.Add(listitem);

                            }
                            DDC1.DDList.DataSource = listbkk;
                            DDC1.DDList.DataTextField = "Text";
                            DDC1.DDList.DataValueField = "Value";
                            DDC1.DDList.DataBind();
                            upSSbkk.Update();
                        }
                    }
                }
            }
            catch
            {
                Master.DisplayMessage("Bangkok's hotel Check-out date is not in correct format", "successMessage", 8000);
            }
            finally
            {
            }
        }


        #endregion


        public void FillSiteSeeingDateDropDown()
        {
            if (txtpty_CheckIn.Text != "" && txtpty_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GV_Result.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtpty_CheckIn.Text, txtpty_CheckOut.Text);
                    ListItemCollection list = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                        list.Add(listitem);
                    }
                    DDC2.DDList.DataSource = list;
                    DDC2.DDList.DataTextField = "Text";
                    DDC2.DDList.DataValueField = "Value";
                    DDC2.DDList.DataBind();
                    upSSPty.Update();
                }

            }

            if (txtbkk_CheckIn.Text != "" && txtbkk_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GridView1.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                    DataSet DsMealDatebkk = objHotelStoreProcedure.getALLdateFORmEAL(txtbkk_CheckIn.Text, txtbkk_CheckOut.Text);
                    ListItemCollection listbkk = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDatebkk.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDatebkk.Tables[0].Rows[i1]["Date"]));
                        listbkk.Add(listitem);

                    }
                    DDC1.DDList.DataSource = listbkk;
                    DDC1.DDList.DataTextField = "Text";
                    DDC1.DDList.DataValueField = "Value";
                    DDC1.DDList.DataBind();
                    upSSbkk.Update();
                }
            }

            if (txtphu_CheckIn.Text != "" && txtphu_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GridView2.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtphu_CheckIn.Text, txtphu_CheckOut.Text);
                    ListItemCollection list = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                        list.Add(listitem);
                    }
                    DDC3.DDList.DataSource = list;
                    DDC3.DDList.DataTextField = "Text";
                    DDC3.DDList.DataValueField = "Value";
                    DDC3.DDList.DataBind();
                    upSS_phuket.Update();
                }
            }

            if (txtkbv_CheckIn.Text != "" && txtkbv_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GridView3.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL4 = (MulticheckDropdown)item.FindControl("DDL4");
                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtkbv_CheckIn.Text, txtkbv_CheckOut.Text);
                    ListItemCollection list = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                        list.Add(listitem);
                    }
                    DDC4.DDList.DataSource = list;
                    DDC4.DDList.DataTextField = "Text";
                    DDC4.DDList.DataValueField = "Value";
                    DDC4.DDList.DataBind();
                    upSS_Kbv.Update();
                }
            }

            if (txtusm_CheckIn.Text != "" && txtusm_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GridView4.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtusm_CheckIn.Text, txtusm_CheckOut.Text);
                    ListItemCollection list = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                        list.Add(listitem);
                    }
                    DDC5.DDList.DataSource = list;
                    DDC5.DDList.DataTextField = "Text";
                    DDC5.DDList.DataValueField = "Value";
                    DDC5.DDList.DataBind();
                    upSS_usm.Update();
                }
            }

            if (txtcnx_CheckIn.Text != "" && txtcnx_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GridView5.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL6 = (MulticheckDropdown)item.FindControl("DDL6");
                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtcnx_CheckIn.Text, txtcnx_CheckOut.Text);
                    ListItemCollection list = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                        list.Add(listitem);
                    }
                    DDC6.DDList.DataSource = list;
                    DDC6.DDList.DataTextField = "Text";
                    DDC6.DDList.DataValueField = "Value";
                    DDC6.DDList.DataBind();
                    upSS_cnx.Update();
                }
            }

            if (txtetc_CheckIn.Text != "" && txtetc_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GridView6.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtetc_CheckIn.Text, txtetc_CheckOut.Text);
                    ListItemCollection list = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                        list.Add(listitem);
                    }
                    DDC7.DDList.DataSource = list;
                    DDC7.DDList.DataTextField = "Text";
                    DDC7.DDList.DataValueField = "Value";
                    DDC7.DDList.DataBind();
                    upSS_Etc.Update();
                }
            }

            if (txtss_CheckIn.Text != "" && txtss_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GridView7.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtss_CheckIn.Text, txtss_CheckOut.Text);
                    ListItemCollection list = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                        list.Add(listitem);
                    }
                    DDC8.DDList.DataSource = list;
                    DDC8.DDList.DataTextField = "Text";
                    DDC8.DDList.DataValueField = "Value";
                    DDC8.DDList.DataBind();
                    upSS_s.Update();
                }
            }

            if (txtsps_CheckIn.Text != "" && txtsps_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GridView8.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtsps_CheckIn.Text, txtsps_CheckOut.Text);
                    ListItemCollection list = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                        list.Add(listitem);
                    }
                    DDC9.DDList.DataSource = list;
                    DDC9.DDList.DataTextField = "Text";
                    DDC9.DDList.DataValueField = "Value";
                    DDC9.DDList.DataBind();
                    upSS_sps.Update();
                }
            }

            if (txtzz_CheckIn.Text != "" && txtzz_CheckOut.Text != "")
            {
                foreach (GridViewRow item in GridView8.Rows)
                {
                    int i = item.DataItemIndex;
                    DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                    DataSet DsMealDate = objHotelStoreProcedure.getALLdateFORmEAL(txtzz_CheckIn.Text, txtzz_CheckOut.Text);
                    ListItemCollection list = new ListItemCollection();
                    for (int i1 = 0; i1 < DsMealDate.Tables[0].Rows.Count; i1++)
                    {
                        ListItem listitem = new ListItem(Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]), Convert.ToString(DsMealDate.Tables[0].Rows[i1]["Date"]));
                        list.Add(listitem);
                    }
                    DDC10.DDList.DataSource = list;
                    DDC10.DDList.DataTextField = "Text";
                    DDC10.DDList.DataValueField = "Value";
                    DDC10.DDList.DataBind();
                    upSS_zz.Update();
                }
            }
        }

        #region DATE VALIDATION FOR TRANSFER PACKAGE

        protected void txtTPdate_TextChanged(object sender, EventArgs e)
        {
            DateTime Result;
            DateTimeFormatInfo info = new DateTimeFormatInfo();
            CultureInfo culture;
            culture = CultureInfo.CreateSpecificCulture("en-US");
            info.ShortDatePattern = "dd/MM/yyyy";



            foreach (GridViewRow item in GridView10.Rows)
            {
                DataTable dttp = objHotelStoreProcedure.fetchTransferPackage(Session["fromdate"].ToString(), Session["todate"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), package_id.ToString());
                int i = item.DataItemIndex;
                string cityname = dttp.Rows[i]["CITY_NAME"].ToString();
                Label chk = (Label)item.FindControl("lbltp_flag");
                Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                DropDownList ddl = (DropDownList)item.FindControl("drptransfer");
                DropDownList drp_time = (DropDownList)item.FindControl("tpdrp_time");
                TextBox datebox = (TextBox)item.FindControl("txtTPdate");
                try
                {
                    if (datebox.Text == "")
                    {


                    }
                    else
                    {
                        System.DateTime today = DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null);
                    }
                    if (chk.Text == " " || chk.Text == "")
                    {
                        if (datebox.Text == "")
                        {
                        }

                        else if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) <= DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                        {
                            Master.DisplayMessage("Date must be within tour date", "successMessage", 8000);
                            break;
                        }
                    }
                    else if (chk.Text == "S")
                    {
                        foreach (GridViewRow item1 in GridView10.Rows)
                        {
                            TextBox datebkk1 = (TextBox)item.FindControl("txtTPdate");
                            TextBox temp = (TextBox)item1.FindControl("txtTPdate"); ;
                            int index1 = item1.DataItemIndex;
                            DropDownList drrpold = (DropDownList)item1.FindControl("tpdrp_time");

                            if (temp.Text != "")
                            {
                                if (i == index1)
                                {

                                }
                            }
                            if (datebox.Text != "")
                            {
                                if (cityname == "Pattaya")
                                {
                                    if (txtsps_CheckIn.Text != "" && txtbkk_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of pattaya.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Phuket")
                                {
                                    if (txtphu_CheckIn.Text != "" && txtphu_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Phuket.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Krabi")
                                {
                                    if (txtkbv_CheckIn.Text != "" && txtkbv_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Krabi.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }

                                else if (cityname == "Samui")
                                {
                                    if (txtusm_CheckIn.Text != "" && txtusm_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Samui.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Chiangmai")
                                {
                                    if (txtcnx_CheckIn.Text != "" && txtcnx_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Chiangmai.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Hua Hin")
                                {
                                    if (txtetc_CheckIn.Text != "" && txtetc_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Hua Hin.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Kanchanburi")
                                {
                                    if (txtss_CheckIn.Text != "" && txtss_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Kanchanburi.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Chingrai")
                                {
                                    if (txtsps_CheckIn.Text != "" && txtsps_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Chingrai.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Bangkok")
                                {
                                    if (txtbkk_CheckIn.Text != "" && txtbkk_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Bangkok.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }

                            }
                            if (datebox.Text != "")
                            {
                                if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates.", "successMessage", 8000);
                                    break;
                                }
                                else
                                {
                                    if (temp.Text != "")
                                    {
                                        if (i != index1)
                                        {
                                            if (datebox.Text == "")
                                            {
                                            }
                                            else
                                            {

                                                if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(temp.Text, "dd/MM/yyyy", null)))
                                                {
                                                    DropDownList drrp = (DropDownList)item.FindControl("tpdrp_time");
                                                    DropDownList ddlfill = (DropDownList)item.FindControl("drptransfer");
                                                    Label chkfill = (Label)item.FindControl("lbltp_flag");
                                                    Label tp_fromto_idfill = (Label)item.FindControl("lbltp_detialid");

                                                    if (drrp.SelectedIndex == 0)
                                                    {
                                                        if (ddlfill.Text == "SIC")
                                                        {
                                                            drrp.Items.Clear();
                                                            DataSet ds0 = objHotelStoreProcedure.transfer_gettime_from_other_time("FETCH_TRANSFER_PACKAGE_TIME_ON_OTHER_TIME", int.Parse(tp_fromto_idfill.Text), chkfill.Text, "SIC", drrpold.Text);
                                                            binddropdownlist(drrp, ds0);
                                                            uptransferPackage.Update();
                                                        }
                                                        else if (ddlfill.Text == "PVT")
                                                        {
                                                            drrp.Items.Clear();
                                                            DataSet ds0 = objHotelStoreProcedure.transfer_gettime_from_other_time("FETCH_TRANSFER_PACKAGE_TIME_ON_OTHER_TIME", int.Parse(tp_fromto_idfill.Text), chkfill.Text, "PVT", drrpold.Text);
                                                            binddropdownlist(drrp, ds0);
                                                            uptransferPackage.Update();
                                                        }
                                                        else if (ddlfill.Text == "")
                                                        {
                                                            drrp.Items.Clear();
                                                            uptransferPackage.Update();
                                                        }
                                                        break;
                                                    }
                                                }
                                                else if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) != DateTime.ParseExact(temp.Text, "dd/MM/yyyy", null)))
                                                {
                                                    DropDownList drrp = (DropDownList)item.FindControl("tpdrp_time");
                                                    DropDownList ddlfill = (DropDownList)item.FindControl("drptransfer");
                                                    Label chkfill = (Label)item.FindControl("lbltp_flag");
                                                    Label tp_fromto_idfill = (Label)item.FindControl("lbltp_detialid");

                                                    if (drrp.SelectedIndex == 0)
                                                    {
                                                        if (ddlfill.Text == "SIC")
                                                        {
                                                            DataSet ds0 = objHotelStoreProcedure.transfer_gettime("FETCH_TRANSFER_PACKAGE_TIME", int.Parse(tp_fromto_idfill.Text), chkfill.Text, "SIC");
                                                            binddropdownlist(drrp, ds0);
                                                            uptransferPackage.Update();
                                                        }
                                                        else if (ddlfill.Text == "PVT")
                                                        {
                                                            DataSet ds0 = objHotelStoreProcedure.transfer_gettime("FETCH_TRANSFER_PACKAGE_TIME", int.Parse(tp_fromto_idfill.Text), chkfill.Text, "PVT");
                                                            binddropdownlist(drrp, ds0);
                                                            uptransferPackage.Update();
                                                        }
                                                        else if (ddlfill.Text == "")
                                                        {
                                                            drp_time.Items.Clear();
                                                            uptransferPackage.Update();
                                                        }

                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }

                }

                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                    datebox.Text = "";
                    uptransferPackage.Update();
                    break;
                }
                finally
                {
                }

            }
        }
        #endregion

        protected void TextBox1_TextChanged(object sender, EventArgs e)
        {

        }

        protected void TextBox3_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox1.Text, "dd/MM/yyyy", null);
            }
            catch
            {
                label63.Text = "Date is not in correct format";
                Updateconfirm.Update();
            }
        }

        #region update booking

        protected void btnUpdateBook_Click(object sender, EventArgs e)
        {
            if (ViewState["upbook"] == null)
            {
                DataTable dt = objHotelStoreProcedure.fetchpacageid(package_id);
                if (dt.Rows.Count > 1)
                {
                    DataSet ds_fit_pack_type = objBookingFitStoreProcedure.fetchComboData("FETCH_FIT_PACKAGE_TYPE");
                    if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[0]["AutoSearchResult"].ToString())
                    {
                        Td1.Attributes.Add("style", "display");
                        Td2.Attributes.Add("style", "display");
                        Td6.Attributes.Add("style", "display");
                        Td8.Attributes.Add("style", "display");
                        Td10.Attributes.Add("style", "display");
                        Td12.Attributes.Add("style", "display");
                        Td14.Attributes.Add("style", "display");
                        Td16.Attributes.Add("style", "display");
                        Td18.Attributes.Add("style", "display");
                        Td20.Attributes.Add("style", "display");

                        Td3.Attributes.Add("style", "display");
                        Td4.Attributes.Add("style", "display");
                        Td5.Attributes.Add("style", "display");
                        Td7.Attributes.Add("style", "display");
                        Td9.Attributes.Add("style", "display");
                        Td11.Attributes.Add("style", "display");
                        Td13.Attributes.Add("style", "display");
                        Td15.Attributes.Add("style", "display");
                        Td17.Attributes.Add("style", "display");
                        Td19.Attributes.Add("style", "display");

                        Master.DisplayMessage("First Select The Hotels.", "successMessage", 8000);
                        upHotelPty.Update();
                        uphotelBkk.Update();
                        upHotelPhuket.Update();
                        upHotelkBV.Update();
                        upHotelUsm.Update();
                        uphotelCnx.Update();
                        uphotelEtc.Update();
                        upHotelSS.Update();
                        uphotelsps.Update();
                        uphotelZZ.Update();
                        ViewState["upbook"] = "Done";
                    }
                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[1]["AutoSearchResult"].ToString())
                    {
                        Td1.Attributes.Add("style", "display");
                        Td2.Attributes.Add("style", "display");
                        Td6.Attributes.Add("style", "display");
                        Td8.Attributes.Add("style", "display");
                        Td10.Attributes.Add("style", "display");
                        Td12.Attributes.Add("style", "display");
                        Td14.Attributes.Add("style", "display");
                        Td16.Attributes.Add("style", "display");
                        Td18.Attributes.Add("style", "display");
                        Td20.Attributes.Add("style", "display");

                        Td3.Attributes.Add("style", "display");
                        Td4.Attributes.Add("style", "display");
                        Td5.Attributes.Add("style", "display");
                        Td7.Attributes.Add("style", "display");
                        Td9.Attributes.Add("style", "display");
                        Td11.Attributes.Add("style", "display");
                        Td13.Attributes.Add("style", "display");
                        Td15.Attributes.Add("style", "display");
                        Td17.Attributes.Add("style", "display");
                        Td19.Attributes.Add("style", "display");

                        Master.DisplayMessage("First Select The Hotels.", "successMessage", 8000);
                        upHotelPty.Update();
                        uphotelBkk.Update();
                        upHotelPhuket.Update();
                        upHotelkBV.Update();
                        upHotelUsm.Update();
                        uphotelCnx.Update();
                        uphotelEtc.Update();
                        upHotelSS.Update();
                        uphotelsps.Update();
                        uphotelZZ.Update();

                        ViewState["upbook"] = "Done";
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[2]["AutoSearchResult"].ToString())
                    {

                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[3]["AutoSearchResult"].ToString())
                    {

                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[4]["AutoSearchResult"].ToString())
                    {
                        Td1.Attributes.Add("style", "display");
                        Td2.Attributes.Add("style", "display");
                        Td6.Attributes.Add("style", "display");
                        Td8.Attributes.Add("style", "display");
                        Td10.Attributes.Add("style", "display");
                        Td12.Attributes.Add("style", "display");
                        Td14.Attributes.Add("style", "display");
                        Td16.Attributes.Add("style", "display");
                        Td18.Attributes.Add("style", "display");
                        Td20.Attributes.Add("style", "display");

                        Td3.Attributes.Add("style", "display");
                        Td4.Attributes.Add("style", "display");
                        Td5.Attributes.Add("style", "display");
                        Td7.Attributes.Add("style", "display");
                        Td9.Attributes.Add("style", "display");
                        Td11.Attributes.Add("style", "display");
                        Td13.Attributes.Add("style", "display");
                        Td15.Attributes.Add("style", "display");
                        Td17.Attributes.Add("style", "display");
                        Td19.Attributes.Add("style", "display");

                        Master.DisplayMessage("First Select The Hotels.", "successMessage", 8000);
                        upHotelPty.Update();
                        uphotelBkk.Update();
                        upHotelPhuket.Update();
                        upHotelkBV.Update();
                        upHotelUsm.Update();
                        uphotelCnx.Update();
                        uphotelEtc.Update();
                        upHotelSS.Update();
                        uphotelsps.Update();
                        uphotelZZ.Update();
                        ViewState["upbook"] = "Done";
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[5]["AutoSearchResult"].ToString())
                    {
                        Td1.Attributes.Add("style", "display");
                        Td2.Attributes.Add("style", "display");
                        Td6.Attributes.Add("style", "display");
                        Td8.Attributes.Add("style", "display");
                        Td10.Attributes.Add("style", "display");
                        Td12.Attributes.Add("style", "display");
                        Td14.Attributes.Add("style", "display");
                        Td16.Attributes.Add("style", "display");
                        Td18.Attributes.Add("style", "display");
                        Td20.Attributes.Add("style", "display");

                        Td3.Attributes.Add("style", "display");
                        Td4.Attributes.Add("style", "display");
                        Td5.Attributes.Add("style", "display");
                        Td7.Attributes.Add("style", "display");
                        Td9.Attributes.Add("style", "display");
                        Td11.Attributes.Add("style", "display");
                        Td13.Attributes.Add("style", "display");
                        Td15.Attributes.Add("style", "display");
                        Td17.Attributes.Add("style", "display");
                        Td19.Attributes.Add("style", "display");

                        Master.DisplayMessage("First Select The Hotels.", "successMessage", 8000);
                        upHotelPty.Update();
                        uphotelBkk.Update();
                        upHotelPhuket.Update();
                        upHotelkBV.Update();
                        upHotelUsm.Update();
                        uphotelCnx.Update();
                        uphotelEtc.Update();
                        upHotelSS.Update();
                        uphotelsps.Update();
                        uphotelZZ.Update();
                        ViewState["upbook"] = "Done";
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[6]["AutoSearchResult"].ToString())
                    {

                    }

                }
            }
            else
            {
                ViewState["upbook"] = null;
            }


            if (ViewState["upbook"] == null)
            {

                int tourupdateid = 0;
                int Quoteupdateid;
                
                Validation();
                roomValidation_onDate_Conflicts();

                transfer_validation();
                transfervalidation();

            //    SightSeeValidation();
                site_date_validation();
         //       site_vs_transfer_date_validation();

                SiteSeeingValidatonForMultiCheckDropdown();
                SiteSeeing_LunchDinner_Validation();
               
                // BANGKOK VALIDATION
                if (dateformat_flag == false)
                {
                    Master.DisplayMessage(ViewState["hotelsdate_error"].ToString(), "successMessage", 8000);
                }
                else if (bkkin == false)
                {
                    Master.DisplayMessage("Bangkok's Hotel Check in Date is Required.", "successMessage", 8000);
                }
                else if (room_flag_conflict == false)
                {
                    Master.DisplayMessage(ViewState["errormessage_conflict"].ToString(), "successMessage", 8000);
                }
                else if (bkkout == false)
                {
                    Master.DisplayMessage("Bangkok's Hotel Check out Date is Required.", "successMessage", 8000);
                }
                else if (bkkin1 == false)
                {
                    Master.DisplayMessage("Bangkok's Hotel Check in Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (bkkout1 == false)
                {
                    Master.DisplayMessage("Bangkok's Hotel Check out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (bkkout2 == false)
                {
                    Master.DisplayMessage("Bangkok's Hotel Check out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }

                //PATTAYA
                else if (ptyin == false)
                {
                    Master.DisplayMessage("Pattaya's Hotel Check In Date Is Required.", "successMessage", 8000);
                }
                else if (ptyout == false)
                {
                    Master.DisplayMessage("Pattaya's Hotel Check Out Date Is Required.", "successMessage", 8000);
                }
                else if (ptyin1 == false)
                {
                    Master.DisplayMessage("Pattaya's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (ptyout1 == false)
                {
                    Master.DisplayMessage("Pattaya's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (ptyout2 == false)
                {
                    Master.DisplayMessage("Pattaya's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d2 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                //PHUKET
                else if (phuin == false)
                {
                    Master.DisplayMessage("Phuket's Hotel Check In Date Is Required.", "successMessage", 8000);
                }
                else if (phuout == false)
                {
                    Master.DisplayMessage("Phuket's Hotel Check Out Date Is Required.", "successMessage", 8000);
                }
                else if (phuin1 == false)
                {
                    Master.DisplayMessage("Phuket's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (phuout1 == false)
                {
                    Master.DisplayMessage("Phuket's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (phuout2 == false)
                {
                    Master.DisplayMessage("Phuket's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d3 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                //BKV
                else if (bkvin == false)
                {
                    Master.DisplayMessage("Krabi's Hotel Check In Date Is Required.", "successMessage", 8000);
                }
                else if (bkvout == false)
                {
                    Master.DisplayMessage("Krabi's Hotel Check Out Date Is Required.", "successMessage", 8000);
                }
                else if (bkvin1 == false)
                {
                    Master.DisplayMessage("Krabi's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (bkvout1 == false)
                {
                    Master.DisplayMessage("Krabi's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (bkvout2 == false)
                {
                    Master.DisplayMessage("Krabi's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d4 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }

                    //USM
                else if (usmin == false)
                {
                    Master.DisplayMessage("Samui's Hotel Check In Date Is Required.", "successMessage", 8000);
                }
                else if (usmout == false)
                {
                    Master.DisplayMessage("Samui's Hotel Check Out Date Is Required.", "successMessage", 8000);
                }
                else if (usmin1 == false)
                {
                    Master.DisplayMessage("Samui's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (usmout1 == false)
                {
                    Master.DisplayMessage("Samui's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (usmout2 == false)
                {
                    Master.DisplayMessage("Samui's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d5 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                //CNX
                else if (cnxin == false)
                {
                    Master.DisplayMessage("Chiangmai's Hotel Check In Date Is Required.", "successMessage", 8000);
                }
                else if (cnxout == false)
                {
                    Master.DisplayMessage("Chiangmai's Hotel Check Out Date Is Required.", "successMessage", 8000);
                }
                else if (cnxin1 == false)
                {
                    Master.DisplayMessage("Chiangmai's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (cnxout1 == false)
                {
                    Master.DisplayMessage("Chiangmai's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (cnxout2 == false)
                {
                    Master.DisplayMessage("Chiangmai's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d6 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                // ETC
                else if (etcin == false)
                {
                    Master.DisplayMessage("Hua Hin's Hotel Check In Date Is Required.", "successMessage", 8000);
                }
                else if (etcout == false)
                {
                    Master.DisplayMessage("Hua Hin's Hotel Check Out Date Is Required.", "successMessage", 8000);
                }
                else if (etcin1 == false)
                {
                    Master.DisplayMessage("Hua Hin's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (etcout1 == false)
                {
                    Master.DisplayMessage("Hua Hin's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (etcout2 == false)
                {
                    Master.DisplayMessage("Hua Hin's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d7 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                //SS
                else if (ssin == false)
                {
                    Master.DisplayMessage("Kanchanburi's Hotel Check In Date Is Required.", "successMessage", 8000);
                }
                else if (ssout == false)
                {
                    Master.DisplayMessage("Kanchanburi's Hotel Check Out Date Is Required.", "successMessage", 8000);
                }
                else if (ssin1 == false)
                {
                    Master.DisplayMessage("Kanchanburi's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (ssout1 == false)
                {
                    Master.DisplayMessage("Kanchanburi's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (ssout2 == false)
                {
                    Master.DisplayMessage("Kanchanburi's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d8 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                //SPS

                else if (spsin == false)
                {
                    Master.DisplayMessage("Chingrai's Hotel Check In Date Is Required.", "successMessage", 8000);
                }
                else if (spsout == false)
                {
                    Master.DisplayMessage("Chingrai's Hotel Check Out Date Is Required.", "successMessage", 8000);
                }
                else if (spsin1 == false)
                {
                    Master.DisplayMessage("Chingrai's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (spsout1 == false)
                {
                    Master.DisplayMessage("Chingrai's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (spsout2 == false)
                {
                    Master.DisplayMessage("Chingrai's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d9 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                //ZZ
                else if (zzin == false)
                {
                    Master.DisplayMessage("Zz's Hotel Check In Date Is Required.", "successMessage", 8000);
                }
                else if (zzout == false)
                {
                    Master.DisplayMessage("Phi Phi Island's Hotel Check Out Date Is Required.", "successMessage", 8000);
                }
                else if (zzin1 == false)
                {
                    Master.DisplayMessage("Phi Phi Island's Hotel Check In Date Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (zzout1 == false)
                {
                    Master.DisplayMessage("Phi Phi Island's Hotel Check Out Must Be Within Tour Date.", "successMessage", 8000);
                }
                else if (zzout2 == false)
                {
                    Master.DisplayMessage("Phi Phi Island's Hotel Check Out Date Must Be After Check In Date.", "successMessage", 8000);
                }
                else if (d10 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                // TRANSFER PACKAGE
                else if (tpdate == false)
                {

                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                // SIGHT SEE
                else if (bkkss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (bkkss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (ptyss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (ptyss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }

                else if (phuss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (phuss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (bkvss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (bkvss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }

                else if (usmss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (usmss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (cnxss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (cnxss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }

                else if (etcss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (etcss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (ssss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (ssss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }

                else if (spsss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (spsss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (zzss == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (zzss1 == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (dropdown_flag == false)
                {
                    Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                }
                else if (ssdateflag == false)
                {
                    Master.DisplayMessage(ViewState["sitedateerror"].ToString(), "successMessage", 8000);
                }

                else if (SightSeeValidationonBook() == false)
                {
                    if (ViewState["errormessage"] != null)
                    {
                        Master.DisplayMessage(ViewState["errormessage"].ToString(), "successMessage", 8000);
                        btnBook.Visible = false;
                        uptransferPackage.Update();
                    }
                    else
                    {
                        Master.DisplayMessage("Site seeing date is not between transfer package dates.", "successMessage", 8000);
                        btnBook.Visible = false;
                        uptransferPackage.Update();
                    }
                }

                else if (CheckBox1.Checked == true && CheckBox2.Checked == true && Session["fit_select_type"].ToString() == "ONE HOTEL ONLY")
                {
                    Master.DisplayMessage("Select only one hotel.", "successMessage", 8000);
                }
                else if (CheckBox1.Checked == false && CheckBox2.Checked == false && Session["fit_select_type"].ToString() == "ONE HOTEL ONLY")
                {
                    Master.DisplayMessage("Select one hotel.", "successMessage", 8000);
                }

                    // SUCCESS
                else
                {
                   
                    btnBook.Attributes.Add("style", "display");
                    lnkbtn.Attributes.Add("style", "display");
                    UpdatePanel1.Update();
                    ViewState["tourid"] = 0;


                    DataSet ds_fit_pack_type = objBookingFitStoreProcedure.fetchComboData("FETCH_FIT_PACKAGE_TYPE");

                  

                    if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[0]["AutoSearchResult"].ToString())
                    {
                        h_flag = true;
                        s_flag = true;
                        t_flag = true;
                    }
                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[1]["AutoSearchResult"].ToString())
                    {
                        h_flag = true;
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[2]["AutoSearchResult"].ToString())
                    {
                        t_flag = true;
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[3]["AutoSearchResult"].ToString())
                    {
                        s_flag = true;
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[4]["AutoSearchResult"].ToString())
                    {
                        h_flag = true;
                        t_flag = true;
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[5]["AutoSearchResult"].ToString())
                    {
                        h_flag = true;
                        s_flag = true;
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[6]["AutoSearchResult"].ToString())
                    {
                        t_flag = true;
                        s_flag = true;
                    }
                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[6]["AutoSearchResult"].ToString())
                    {
                        t_flag = true;
                        s_flag = true;
                    }

                    // INSERT UPDATE HOTEL DETAILS

                    insert_update_hotels();

                    // INSERT UPDATE SIGHT SEEING
                    insert_update_ss_tp_bkk();

                    insert_update_ss_tp_pty();

                    insert_update_ss_tp_phu();

                    insert_update_ss_tp_kbv();

                    insert_update_ss_tp_usm();

                    insert_update_ss_tp_cnx();

                    insert_update_ss_tp_s();

                    insert_update_ss_tp_sps();

                    insert_update_ss_tp_zz();

                    insert_update_ss_tp_etc();

                    // INSERT UPDATE TRANSFER PACKAGE
                    insert_update_ss_tp_tp();

                    if (Session["noofadult"] == "")
                    {
                        Session["noofadult"] = "0";
                    }

                    if (Session["noofcwb"] == "")
                    {
                        Session["noofcwb"] = "0";
                    }

                    if (Session["noofcnb"] == "")
                    {
                        Session["noofcnb"] = "0";
                    }

                    if (Session["noofinfant"] == "")
                    {
                        Session["noofinfant"] = "0";
                    }
                    DataTable DTORDER = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");
                    DataTable DTtobe = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "4");
                    DataTable DtOldStatus = objHotelStoreProcedure.fetcholddetailsfortobe("FETCH_HOTEL_DATA_FOR_TO_BE_RECONFIRMED", Session["quoteid"].ToString());

                    string quote_user_id;
                    if (Request["TOURID"] != null && !string.IsNullOrEmpty(Request["TOURID"].ToString()) && Request["QUOTEID"] != null && !string.IsNullOrEmpty(Request["QUOTEID"].ToString()))
                    {
                        DataTable dt1 = new DataTable();
                        SqlConnection conn = new SqlConnection(str);
                        conn.Open();

                        SqlCommand comm = new SqlCommand("FETCH_AGENT_QUOTATION_DETAILS", conn);
                        comm.CommandType = CommandType.StoredProcedure;

                        comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = Convert.ToInt32(Request.QueryString["QUOTEID"].ToString());

                        SqlDataReader rdr = comm.ExecuteReader();
                        dt1.Load(rdr);

                        quote_user_id = dt1.Rows[0]["USER_ID"].ToString();
                    }
                    else
                    {
                        quote_user_id = usrid;
                    }



                    if (Session["orderstatus"].ToString() == DTtobe.Rows[0]["ORDER_STATUS_NAME"].ToString() || Session["orderstatus"].ToString() == "Approved Cash On Arrival")
                    {
                        DataTable dtgettour = objHotelStoreProcedure.insertupadtegetquotes(tourupdateid.ToString(), Session["tourname"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString(), "3", Session["nights"].ToString(), usrid, Session["noofadult"].ToString(), Session["noofcwb"].ToString(), Session["noofcnb"].ToString(), Session["noofinfant"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["clientname"].ToString(), Session["remarks"].ToString(), int.Parse(Session["packageid"].ToString()), Convert.ToBoolean(Session["favouritepackage"].ToString()), Session["clientsurnameadmin"].ToString(), Session["clienttitleadmin"].ToString(), Session["fit_select_type"].ToString());
                        int tour = int.Parse(dtgettour.Rows[0]["NEW_TOUR_ID"].ToString());
                        DataTable dt = objHotelStoreProcedure.generate_quote_for_hotel(int.Parse(Session["noofadult"].ToString()), int.Parse(Session["noofcwb"].ToString()), int.Parse(Session["noofcnb"].ToString()), int.Parse(Session["noofinfant"].ToString()), int.Parse(usrid), DTtobe.Rows[0]["ORDER_STATUS_NAME"].ToString(), quots_id, tour, package_id);

                        Quoteupdateid = Convert.ToInt32(dt.Rows[0]["QUOTE_ID"]);
                        Session["Quoteupdateid"] = Quoteupdateid;

                        insert_update_additional_service(tour, Quoteupdateid);

                        /*Enter Flight Dates and times*/
                        //objBookingFitStoreProcedure.UpdateTourFlyingAndLandingDate(int.Parse(dtgettour.Rows[0]["NEW_TOUR_ID"].ToString()), Session["flyingDate"].ToString(), Session["landingDate"].ToString());

                    }
                    if (Session["orderstatus"].ToString() == DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString())
                    {

                        DataTable dtgettour = objHotelStoreProcedure.insertupadtegetquotes(tourupdateid.ToString(), Session["tourname"].ToString(), Session["fromdate"].ToString(), Session["todate"].ToString(), "3", Session["nights"].ToString(), usrid, Session["noofadult"].ToString(), Session["noofcwb"].ToString(), Session["noofcnb"].ToString(), Session["noofinfant"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), Session["arrivalflight"].ToString(), Session["departureflight"].ToString(), Session["clientname"].ToString(), Session["remarks"].ToString(), int.Parse(Session["packageid"].ToString()), Convert.ToBoolean(Session["favouritepackage"].ToString()), Session["clientsurnameadmin"].ToString(), Session["clienttitleadmin"].ToString(), Session["fit_select_type"].ToString());
                        int tour = int.Parse(dtgettour.Rows[0]["NEW_TOUR_ID"].ToString());
                        DataTable dt = objHotelStoreProcedure.generate_quote_for_hotel(int.Parse(Session["noofadult"].ToString()), int.Parse(Session["noofcwb"].ToString()), int.Parse(Session["noofcnb"].ToString()), int.Parse(Session["noofinfant"].ToString()), int.Parse(usrid), DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString(), quots_id, tour, package_id);

                        Quoteupdateid = Convert.ToInt32(dt.Rows[0]["QUOTE_ID"]);
                        Session["Quoteupdateid"] = Quoteupdateid;

                        insert_update_additional_service(tour, Quoteupdateid);

                        /*Enter Flight Dates and times*/
                        //objBookingFitStoreProcedure.UpdateTourFlyingAndLandingDate(int.Parse(dtgettour.Rows[0]["NEW_TOUR_ID"].ToString()), Session["flyingDate"].ToString(), Session["landingDate"].ToString());
                    }

                   

                    DataTable DTORDERJUNK = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "14");
                    objHotelStoreProcedure.update_quote(int.Parse(Session["updateid"].ToString()), DTORDERJUNK.Rows[0]["ORDER_STATUS_NAME"].ToString());

                    // open PDF CODE
                    #region pdf
                    /* PDF Save Logic */


                    if (!System.IO.Directory.Exists(Server.MapPath("~/Views/FIT/Quotes/" + Session["Quoteupdateid"].ToString() + "/")))
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Views/FIT/Quotes/" + Session["Quoteupdateid"].ToString() + "/"));

                    string reportType = "PDF";
                    string mimeType;
                    string encoding;
                    string fileNameExtension;
                    Warning[] warnings;
                    string[] streams;
                    byte[] renderedBytes;
                    string deviceInfo =
                    "<DeviceInfo>" +
                    "  <OutputFormat>PDF</OutputFormat>" +
                    "  <PageWidth>10in</PageWidth>" +
                    "  <PageHeight>11in</PageHeight>" +
                    "  <MarginTop>0.50in</MarginTop>" +
                    "  <MarginLeft>0.50in</MarginLeft>" +
                    "  <MarginRight>0.50in</MarginRight>" +
                    "  <MarginBottom>0.50in</MarginBottom>" +
                    "</DeviceInfo>";

                    ReportParameter[] parm = new ReportParameter[1];
                    parm[0] = new ReportParameter("QOUTE_ID", Session["Quoteupdateid"].ToString());
                    rptViewer1.ShowCredentialPrompts = false;
                    rptViewer1.ShowParameterPrompts = false;
                    rptViewer1.ServerReport.ReportServerCredentials = new ReportCredentials(WebConfigurationManager.AppSettings["ReportServerUsername"].ToString(), WebConfigurationManager.AppSettings["ReportServerPassword"].ToString(), WebConfigurationManager.AppSettings["ReportServerDomain"].ToString());
                    rptViewer1.ProcessingMode = Microsoft.Reporting.WebForms.ProcessingMode.Remote;
                    rptViewer1.ServerReport.ReportServerUrl = new System.Uri(WebConfigurationManager.AppSettings["ReportServer"].ToString());
                    rptViewer1.ServerReport.ReportPath = "/ThailandReport/Invoice";
                    rptViewer1.ServerReport.SetParameters(parm);
                    rptViewer1.ServerReport.Refresh();
                    renderedBytes = rptViewer1.ServerReport.Render(reportType, deviceInfo, out mimeType, out encoding, out fileNameExtension, out streams, out warnings);
                    rptViewer1.Visible = false;
                    using (FileStream fs = File.Create(HttpContext.Current.Server.MapPath("~/Views/FIT/Quotes/" + Session["Quoteupdateid"].ToString() + "/Quotation.pdf")))
                    {
                        fs.Write(renderedBytes, 0, (int)renderedBytes.Length);
                    }
                    lnkbtn.HRef = "~/Views/FIT/Quotes/" + Session["Quoteupdateid"].ToString() + "/Quotation.pdf";
                    lnkbtn.Attributes.Add("style", "display");
                    UpdatePanel1.Update();

                    #endregion

                    
                    SendMailUpdateBooking();

                    Master.DisplayMessage("We Have Received Your Updated Booking Successfully.", "successMessage", 8000);

                    if (Session["Quoteupdateid"] != null)
                    {
                        DataSet ds = objHotelStoreProcedure.getQuoteOrderStatus(int.Parse(Session["Quoteupdateid"].ToString()));

                        if (ds.Tables[0].Rows.Count != 0)
                        {
                            if (ds.Tables[0].Rows[0]["ORDER_STATUS"].ToString() == "3")
                            {
                                Response.Redirect("~/Views/FIT/AdminAllBookings.aspx");
                            }
                            else if (ds.Tables[0].Rows[0]["ORDER_STATUS"].ToString() == "4")
                            {
                                Response.Redirect("~/Views/FIT/AdminAllBookingsToBeReconfirmed.aspx");
                            }
                            else
                            {
                                Response.Redirect("~/Views/FIT/AdminAllBookings.aspx");
                            }
                        }
                        else
                        {
                            Response.Redirect("~/Views/FIT/AdminAllBookings.aspx");
                        }
                    }
                    else
                    {
                        Response.Redirect("~/Views/FIT/AdminAllBookings.aspx");
                    }
                }

            }
        }

        protected void SendMailUpdateBooking()
        {
            #region oldQuoteid
            string EmailQoute_id = Session["updateid"].ToString();
            DataTable dt_oldsupplier_id = new DataTable();
            SqlConnection connold = new SqlConnection(str);
            connold.Open();

            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");
            string fromemail = "sudhir@travelzunlimited.com";

            string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
            string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
            string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
            string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();

            SqlCommand commold = new SqlCommand("FETCH_SUPPLIER_ID", connold);
            commold.CommandType = CommandType.StoredProcedure;
            commold.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
            SqlDataReader rdrold = commold.ExecuteReader();
            dt_oldsupplier_id.Load(rdrold);

            DataTable dtemail = objHotelStoreProcedure.fetch_backoffice_for_book(EmailQoute_id);
            string a;
            if (dtemail.Rows.Count != 0)
            {
                if (dtemail.Rows[0]["BOOK_EMAIL_TO_BACKOFFICE"].ToString() == "1")
                {
                    
                    a = dtemail.Rows[0]["BOOK_EMAIL_TO_BACKOFFICE"].ToString();
                    DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["Quoteupdateid"].ToString()), "1");
                }
                else
                {
                    
                    a = dtemail.Rows[0]["BOOK_EMAIL_TO_BACKOFFICE"].ToString();
                    DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["Quoteupdateid"].ToString()), "2");
                }
            }
            else
            {
                
                a = "1";
                DataTable dt1 = objHotelStoreProcedure.update_quote_for_backoffice(int.Parse(Session["Quoteupdateid"].ToString()), "1");
            }



            //new quoteid              
            string EmailQoute_id1 = Session["Quoteupdateid"].ToString();
            DataTable dt_supplier_id = new DataTable();
            SqlConnection conn = new SqlConnection(str);
            conn.Open();


            SqlCommand comm = new SqlCommand("FETCH_SUPPLIER_ID", conn);
            comm.CommandType = CommandType.StoredProcedure;
            comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id1);
            SqlDataReader rdr = comm.ExecuteReader();
            dt_supplier_id.Load(rdr);


            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[11]["AutoSearchResult"].ToString());

            try
            {
               

                if (dt_oldsupplier_id.Rows.Count != 0)
                {


                    DataTable dt_dynamic = new DataTable();
                    bool falg = true;
                    for (int i = 0; i < dt_oldsupplier_id.Rows.Count; i++)
                    {
                        for (int j = 0; j < dt_supplier_id.Rows.Count; j++)
                        {
                            if (dt_supplier_id.Rows[j]["CITY_NAME"].ToString() == dt_oldsupplier_id.Rows[i]["CITY_NAME"].ToString())
                            {
                                string supplier_idold = dt_oldsupplier_id.Rows[i]["SUPPLIER_ID"].ToString();
                                DataTable dt_hotelEmailsold = new DataTable();

                                SqlCommand emailold = new SqlCommand("FETCH_SUPPLIER_EMAIL_FOR_MAIL", connold);
                                emailold.CommandType = CommandType.StoredProcedure;
                                emailold.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
                                SqlDataReader rdremailold = emailold.ExecuteReader();
                                dt_hotelEmailsold.Load(rdremailold);

                                string hotelsupplier_idold = dt_hotelEmailsold.Rows[i]["SUPPLIER_ID"].ToString();
                                string supplier_emailold = dt_hotelEmailsold.Rows[i]["SUPPLIER_REL_EMAIL"].ToString();
                                DataTable dt_hotelDetailsold = new DataTable();
                                if (hotelsupplier_idold == supplier_idold)
                                {


                                    SqlCommand detailsold = new SqlCommand("FETCH_HOTEL_DETAILS_FOR_MAIL", connold);
                                    detailsold.CommandType = CommandType.StoredProcedure;
                                    detailsold.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
                                    detailsold.Parameters.Add("@SUPPLIER_ID", SqlDbType.Int).Value = int.Parse(hotelsupplier_idold);
                                    SqlDataReader rdrdetailsold = detailsold.ExecuteReader();

                                    dt_hotelDetailsold.Load(rdrdetailsold);

                                    single_rooms = dt_hotelDetailsold.Rows[0]["SINGLE_ROOMS"].ToString();
                                    double_rooms = dt_hotelDetailsold.Rows[0]["DOUBLE_ROOMS"].ToString();
                                    tripal_rooms = dt_hotelDetailsold.Rows[0]["TRIPAL_ROOMS"].ToString();
                                    room_type = dt_hotelDetailsold.Rows[0]["ROOM_TYPE_NAME"].ToString();
                                    hotel_name = dt_hotelDetailsold.Rows[0]["CHAIN_NAME"].ToString();
                                    pessanger_name = dt_hotelDetailsold.Rows[0]["CLIENT_NAME"].ToString();
                                    check_in_date = dt_hotelDetailsold.Rows[0]["CHECK_IN_DATE"].ToString();
                                    check_out_date = dt_hotelDetailsold.Rows[0]["CHECK_OUT_DATE"].ToString();

                                    adults = dt_hotelDetailsold.Rows[0]["NO_OF_ADULTS"].ToString();
                                    cwb = dt_hotelDetailsold.Rows[0]["NO_OF_CWB"].ToString();
                                    cnb = dt_hotelDetailsold.Rows[0]["NO_OF_CNB"].ToString();
                                    infant = dt_hotelDetailsold.Rows[0]["NO_OF_INFANT"].ToString();
                                }

                                supplier_idupdate = dt_supplier_id.Rows[j]["SUPPLIER_ID"].ToString();
                                DataTable dt_hotelEmails = new DataTable();
                                SqlCommand email = new SqlCommand("FETCH_SUPPLIER_EMAIL_FOR_MAIL", conn);
                                email.CommandType = CommandType.StoredProcedure;
                                email.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id1);
                                SqlDataReader rdremail = email.ExecuteReader();
                                dt_hotelEmails.Load(rdremail);

                                hotelsupplier_idupdate = dt_hotelEmails.Rows[j]["SUPPLIER_ID"].ToString();
                                supplier_emailupdate = dt_hotelEmails.Rows[j]["SUPPLIER_REL_EMAIL"].ToString();

                                string order_status = "";

                                if (hotelsupplier_idupdate == supplier_idupdate)
                                {
                                    DataTable dt_hotelDetails = new DataTable();
                                    SqlCommand details = new SqlCommand("FETCH_HOTEL_DETAILS_FOR_MAIL", conn);
                                    details.CommandType = CommandType.StoredProcedure;
                                    details.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id1);
                                    details.Parameters.Add("@SUPPLIER_ID", SqlDbType.Int).Value = int.Parse(hotelsupplier_idupdate);
                                    SqlDataReader rdrdetails = details.ExecuteReader();
                                    dt_hotelDetails.Load(rdrdetails);


                                    single_rooms1 = dt_hotelDetails.Rows[0]["SINGLE_ROOMS"].ToString();
                                    double_rooms1 = dt_hotelDetails.Rows[0]["DOUBLE_ROOMS"].ToString();
                                    tripal_rooms1 = dt_hotelDetails.Rows[0]["TRIPAL_ROOMS"].ToString();
                                    room_type1 = dt_hotelDetails.Rows[0]["ROOM_TYPE_NAME"].ToString();
                                    hotel_name1 = dt_hotelDetails.Rows[0]["CHAIN_NAME"].ToString();
                                    pessanger_name1 = dt_hotelDetails.Rows[0]["CLIENT_NAME"].ToString();
                                    check_in_date1 = dt_hotelDetails.Rows[0]["CHECK_IN_DATE"].ToString();
                                    check_out_date1 = dt_hotelDetails.Rows[0]["CHECK_OUT_DATE"].ToString();

                                    adults1 = dt_hotelDetails.Rows[0]["NO_OF_ADULTS"].ToString();
                                    cwb1 = dt_hotelDetails.Rows[0]["NO_OF_CWB"].ToString();
                                    cnb1 = dt_hotelDetails.Rows[0]["NO_OF_CNB"].ToString();
                                    infant1 = dt_hotelDetails.Rows[0]["NO_OF_INFANT"].ToString();

                                    order_status = dt_hotelDetails.Rows[0]["ORDER_STATUS"].ToString();
                                }
                                if (room_type1 == room_type && hotel_name == hotel_name1 && pessanger_name1 == pessanger_name && check_in_date1 == check_in_date && check_out_date1 == check_out_date && single_rooms1 == single_rooms && double_rooms1 == double_rooms && tripal_rooms1 == tripal_rooms && adults1 == adults && cwb1==cwb && cnb1==cnb && infant1 == infant )     // Change 10th Sept
                                {
                                    DataTable DTORDER = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "4");
                                    DataTable DtOldStatus = objHotelStoreProcedure.fetcholddetailsfortobe("FETCH_HOTEL_DATA_FOR_TO_BE_RECONFIRMED", Session["quoteid"].ToString());
                                    DataTable DThotel = objHotelStoreProcedure.fetchorderstatusname("FETCH_HOTEL_STATUS_NAME_FOR_HOTEL", "1");
                                    for (int i1 = 0; i1 < DtOldStatus.Rows.Count; i1++)
                                    {
                                        if (hotel_name1 == DtOldStatus.Rows[i1]["CHAIN_NAME"].ToString())
                                        {
                                            /************************************** INSERT RECONFIRM DATE ***********************************/
                                            if (order_status == "4")
                                            {
                                                objHotelStoreProcedure.insertAgentReconfirmationDate(int.Parse(Session["updateid"].ToString()), int.Parse(Session["Quoteupdateid"].ToString()));
                                                objHotelStoreProcedure.insertreconfirmationdate("INSERT_RECONFIRMATION_DATE", EmailQoute_id1, DtOldStatus.Rows[i1]["HOTEL_RECONFIRMATATION_DATE"].ToString(), DtOldStatus.Rows[i]["CITY_NAME"].ToString(), DThotel.Rows[0]["HOTEL_STATUS"].ToString(), DtOldStatus.Rows[i]["CONFIRMATION_NUMBER"].ToString(), DtOldStatus.Rows[i]["PAYMENT_DUE_DATE"].ToString());
                                            }
                                        }
                                        else
                                        { }
                                    }
                                    if (hotel_name == hotel_name1)
                                    {
                                        try
                                        {
                                            if (ds_mailTemplate.Tables[0].Rows[4]["IS_ON"].ToString() != "False")
                                            {

                                                string fromemail_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[4]["FROM_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[4]["FROM_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[4]["FROM_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        fromemail_agent = Session["email"].ToString();
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[4]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                                                    {

                                                        if (a == "1")
                                                        {
                                                            fromemail_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            fromemail_agent = "reservation1@travelzunlimited.com";

                                                        }

                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[4]["FROM_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        fromemail_agent = supplier_emailupdate;
                                                    }
                                                    else
                                                    {

                                                        fromemail_agent = ds_boMail.Tables[0].Rows[0][0].ToString();
                                                    }

                                                }


                                                string toemail_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[4]["TO_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[4]["TO_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[4]["TO_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        toemail_agent = Session["email"].ToString();
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[4]["TO_ROLE_NAME"].ToString() == "Backoffice")
                                                    {
                                                        if (a == "1")
                                                        {
                                                            toemail_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            toemail_agent = "reservation1@travelzunlimited.com";

                                                        }
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[4]["TO_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        toemail_agent = supplier_emailupdate;
                                                    }

                                                    else
                                                    {

                                                        toemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                    }


                                                }

                                                string cc_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[4]["CC_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[4]["CC_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[4]["CC_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        cc_agent = Session["email"].ToString();
                                                    }


                                                    else if (ds_mailTemplate.Tables[0].Rows[4]["CC_ROLE_NAME"].ToString() == "Backoffice")
                                                    {
                                                        if (a == "1")
                                                        {
                                                            cc_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            cc_agent = "reservation1@travelzunlimited.com";

                                                        }
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[4]["CC_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        cc_agent = supplier_emailupdate;
                                                    }
                                                    else
                                                    {

                                                        cc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                    }
                                                }

                                                string bcc_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[4]["BCC_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[4]["BCC_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[4]["BCC_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        bcc_agent = Session["email"].ToString();
                                                    }


                                                    else if (ds_mailTemplate.Tables[0].Rows[4]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                                                    {


                                                        if (a == "1")
                                                        {
                                                            bcc_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            bcc_agent = "reservation1@travelzunlimited.com";

                                                        }
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[4]["BCC_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        bcc_agent = supplier_emailupdate;
                                                    }
                                                    else
                                                    {

                                                        bcc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                    }
                                                }


                                                MailMessage message = new MailMessage();
                                                message.From = new MailAddress(fromemail_agent);
                                                message.To.Add(new MailAddress(toemail_agent.ToString()));

                                                if (cc_agent != "")
                                                {
                                                    message.CC.Add(new MailAddress(cc_agent.ToString()));
                                                }
                                                if (bcc_agent != "")
                                                {
                                                    message.Bcc.Add(new MailAddress(bcc_agent.ToString()));
                                                }



                                                String mail_subject = ds_mailTemplate.Tables[0].Rows[4]["EMAIL_SUBJECT"].ToString();
                                                //mail_subject = mail_subject.Replace("<%CLIENT_NAME%>", pessanger_name1);
                                                //mail_subject = mail_subject.Replace("<%FROM_DATE%>", check_in_date1);
                                                //mail_subject = mail_subject.Replace("<%TO_DATE%>", check_out_date1);
                                                message.Subject = mail_subject;


                                                string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[4]["EMAIL_CONTENT"].ToString();
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%OLDQUOTEID%&gt;", EmailQoute_id);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NEWQUOTEID%&gt;", EmailQoute_id1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENT_NAME%&gt;", pessanger_name1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOM_TYPE%&gt;", room_type1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLE_ROOMS%&gt;", single_rooms1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLE_ROOMS%&gt;", double_rooms1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLE_ROOMS%&gt;", tripal_rooms1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%FROM_DATE%&gt;", check_in_date1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%TO_DATE%&gt;", check_out_date1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFADULT%&gt;", adults1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCWB%&gt;", cwb1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCNB%&gt;", cnb1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFINFANT%&gt;", infant1);

                                                message.Body = strEmailTemplate;
                                                message.IsBodyHtml = true;

                                                SmtpClient client = new SmtpClient();
                                                NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                                                client.Credentials = info;
                                                client.Host = smtphost;
                                                client.Port = int.Parse(smtpport);
                                                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                                                client.Send(message);

                                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[4]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[4]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "", int.Parse(Session["usersid"].ToString()), 2);
                                            }


                                        }
                                        catch
                                        {

                                        }
                                        finally
                                        {

                                        }
                                    }

                                    /**********************DOING QUOTE STATUS TO BE RECONFIRMED*****************************/
                                    //  objHotelStoreProcedure.insertreconfirmationdateQUOTE("INSERT_RECONFIRMATIONDATE_TOUR_QUOTE", EmailQoute_id1, DtOldStatus.Rows[0]["RE_DATE"].ToString(), DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString());
                                }
                                else
                                {
                                    /*************** SENT MAIL TO OLD HOTEL FOR CANCELLATION***********************************/

                                    if (hotel_name != hotel_name1)
                                    {
                                        ViewState["Mail_HOtel"] = hotel_name;

                                        try
                                        {


                                            if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
                                            {



                                                try
                                                {
                                                    string fromemail_agent = "";
                                                    if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                                                    {
                                                        DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString());
                                                        if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                                                        {
                                                            fromemail_agent = Session["email"].ToString();
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                                                        {

                                                            if (a == "1")
                                                            {
                                                                fromemail_agent = "reservation@travelzunlimited.com";

                                                            }
                                                            else if (a == "2")
                                                            {
                                                                fromemail_agent = "reservation1@travelzunlimited.com";

                                                            }

                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Supplier")
                                                        {
                                                            fromemail_agent = supplier_emailold;
                                                        }
                                                        else
                                                        {

                                                            fromemail_agent = ds_boMail.Tables[0].Rows[0][0].ToString();
                                                        }

                                                    }


                                                    string toemail_agent = "";
                                                    if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                                                    {
                                                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString());
                                                        if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                                                        {
                                                            toemail_agent = Session["email"].ToString();
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Backoffice")
                                                        {
                                                            if (a == "1")
                                                            {
                                                                toemail_agent = "reservation@travelzunlimited.com";

                                                            }
                                                            else if (a == "2")
                                                            {
                                                                toemail_agent = "reservation1@travelzunlimited.com";

                                                            }
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Supplier")
                                                        {
                                                            toemail_agent = supplier_emailold;
                                                        }

                                                        else
                                                        {

                                                            toemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                        }


                                                    }

                                                    string cc_agent = "";
                                                    if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                                                    {
                                                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());
                                                        if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Agent")
                                                        {
                                                            cc_agent = Session["email"].ToString();
                                                        }


                                                        else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                                                        {
                                                            if (a == "1")
                                                            {
                                                                cc_agent = "reservation@travelzunlimited.com";

                                                            }
                                                            else if (a == "2")
                                                            {
                                                                cc_agent = "reservation1@travelzunlimited.com";

                                                            }
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Supplier")
                                                        {
                                                            cc_agent = supplier_emailupdate;
                                                        }
                                                        else
                                                        {

                                                            cc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                        }
                                                    }

                                                    string bcc_agent = "";
                                                    if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                                                    {
                                                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString());
                                                        if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                                                        {
                                                            bcc_agent = Session["email"].ToString();
                                                        }


                                                        else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                                                        {


                                                            if (a == "1")
                                                            {
                                                                bcc_agent = "reservation@travelzunlimited.com";

                                                            }
                                                            else if (a == "2")
                                                            {
                                                                bcc_agent = "reservation1@travelzunlimited.com";

                                                            }
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Supplier")
                                                        {
                                                            bcc_agent = supplier_emailupdate;
                                                        }
                                                        else
                                                        {

                                                            bcc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                        }
                                                    }


                                                    MailMessage message = new MailMessage();
                                                    message.From = new MailAddress(fromemail_agent);
                                                    message.To.Add(new MailAddress(toemail_agent.ToString()));

                                                    if (cc_agent != "")
                                                    {
                                                        message.CC.Add(new MailAddress(cc_agent.ToString()));
                                                    }
                                                    if (bcc_agent != "")
                                                    {
                                                        message.Bcc.Add(new MailAddress(bcc_agent.ToString()));
                                                    }



                                                    String mail_subject = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();
                                                    mail_subject = mail_subject.Replace("<%QUOTEID%>", EmailQoute_id);

                                                    message.Subject = mail_subject;

                                                    //   string bodyold = "";
                                                    //   bodyold = "Dear Reservation,<br><br> Please cancel the Below <br><br>" + hotel_name + " <br><br>Our Reference Number:" + EmailQoute_id + "<br>Name of the passenger :" + pessanger_name + "<br>Room Type:" + room_type + "<br>No of Single Rooms:" + single_rooms + "<br>No of Double Rooms:" + double_rooms + "<br>No of Triple Rooms:" + tripal_rooms + "<br>Check In Date : " + check_in_date + "<br>Check out Date :" + check_out_date + "<br><br>If in case of any requirement we will update you.<br> Best Reagrds <br>Travelz Unlmited";

                                                    string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%HOTEL_NAME%&gt;", hotel_name);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%QUOTE_ID%&gt;", EmailQoute_id);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENT_NAME%&gt;", pessanger_name);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOM_TYPE%&gt;", room_type);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLE_ROOMS%&gt;", single_rooms);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLE_ROOMS%&gt;", double_rooms);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLE_ROOMS%&gt;", tripal_rooms);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%FROM_DATE%&gt;", check_in_date);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%TO_DATE%&gt;", check_out_date);


                                                    message.Body = strEmailTemplate;
                                                    message.IsBodyHtml = true;

                                                    SmtpClient client = new SmtpClient();
                                                    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                                                    client.Credentials = info;
                                                    client.Host = smtphost;
                                                    client.Port = int.Parse(smtpport);
                                                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                                                    client.Send(message);


                                                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                                                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id), "", "", "", int.Parse(Session["usersid"].ToString()), 2);

                                                }
                                                catch (Exception ex)
                                                {

                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                        /*************** SENT MAIL TO NEW HOTEL FOR BOOKING***********************************/
                                        finally
                                        {

                                            // string body = "";
                                            // body = "Dear Reservation,<br><br> Please Confirm as Below <br><br>" + hotel_name1 + "<br><br> Our Reference Number:" + EmailQoute_id1 + "<br>Name of the passenger :" + pessanger_name1 + "<br>Room Type:" + room_type1 + "<br>No of Single Rooms:" + single_rooms1 + "<br>No of Double Rooms:" + double_rooms1 + "<br>No of Triple Rooms:" + tripal_rooms1 + "<br>Check In Date : " + check_in_date1 + "<br>Check out Date :" + check_out_date1 + "<br><br>Please advise the Cut of Date : <br><br>Please advice the Last Payment Date : <br><br>Please send Confirmation No : <br><br> Best Reagrds <br>Travelz Unlmited";

                                            try
                                            {
                                                if (ds_mailTemplate.Tables[0].Rows[1]["IS_ON"].ToString() != "False")
                                                {



                                                    try
                                                    {
                                                        string fromemail_agent = "";
                                                        if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() != "")
                                                        {
                                                            DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString());
                                                            if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Agent")
                                                            {
                                                                fromemail_agent = Session["email"].ToString();
                                                            }
                                                            else if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                                                            {

                                                                if (a == "1")
                                                                {
                                                                    fromemail_agent = "reservation@travelzunlimited.com";

                                                                }
                                                                else if (a == "2")
                                                                {
                                                                    fromemail_agent = "reservation1@travelzunlimited.com";

                                                                }

                                                            }
                                                            else if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Supplier")
                                                            {
                                                                fromemail_agent = supplier_emailupdate;
                                                            }
                                                            else
                                                            {

                                                                fromemail_agent = ds_boMail.Tables[0].Rows[0][0].ToString();
                                                            }

                                                        }


                                                        string toemail_agent = "";
                                                        if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() != "")
                                                        {
                                                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString());
                                                            if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Agent")
                                                            {
                                                                toemail_agent = Session["email"].ToString();
                                                            }
                                                            else if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Backoffice")
                                                            {
                                                                if (a == "1")
                                                                {
                                                                    toemail_agent = "reservation@travelzunlimited.com";

                                                                }
                                                                else if (a == "2")
                                                                {
                                                                    toemail_agent = "reservation1@travelzunlimited.com";

                                                                }
                                                            }
                                                            else if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Supplier")
                                                            {
                                                                toemail_agent = supplier_emailupdate;
                                                            }

                                                            else
                                                            {

                                                                toemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                            }


                                                        }

                                                        string cc_agent = "";
                                                        if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() != "")
                                                        {
                                                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString());
                                                            if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Agent")
                                                            {
                                                                cc_agent = Session["email"].ToString();
                                                            }


                                                            else if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Backoffice")
                                                            {
                                                                if (a == "1")
                                                                {
                                                                    cc_agent = "reservation@travelzunlimited.com";

                                                                }
                                                                else if (a == "2")
                                                                {
                                                                    cc_agent = "reservation1@travelzunlimited.com";

                                                                }
                                                            }
                                                            else if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Supplier")
                                                            {
                                                                cc_agent = supplier_emailupdate;
                                                            }
                                                            else
                                                            {

                                                                cc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                            }
                                                        }

                                                        string bcc_agent = "";
                                                        if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() != "")
                                                        {
                                                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString());
                                                            if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Agent")
                                                            {
                                                                bcc_agent = Session["email"].ToString();
                                                            }


                                                            else if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                                                            {


                                                                if (a == "1")
                                                                {
                                                                    bcc_agent = "reservation@travelzunlimited.com";

                                                                }
                                                                else if (a == "2")
                                                                {
                                                                    bcc_agent = "reservation1@travelzunlimited.com";

                                                                }
                                                            }
                                                            else if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Supplier")
                                                            {
                                                                bcc_agent = supplier_emailupdate;
                                                            }
                                                            else
                                                            {

                                                                bcc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                            }
                                                        }


                                                        MailMessage message = new MailMessage();
                                                        message.From = new MailAddress(fromemail_agent);
                                                        message.To.Add(new MailAddress(toemail_agent.ToString()));

                                                        if (cc_agent != "")
                                                        {
                                                            message.CC.Add(new MailAddress(cc_agent.ToString()));
                                                        }
                                                        if (bcc_agent != "")
                                                        {
                                                            message.Bcc.Add(new MailAddress(bcc_agent.ToString()));
                                                        }



                                                        String mail_subject = ds_mailTemplate.Tables[0].Rows[1]["EMAIL_SUBJECT"].ToString();
                                                        mail_subject = mail_subject.Replace("<%CLIENT_NAME%>", pessanger_name1);
                                                        mail_subject = mail_subject.Replace("<%FROM_DATE%>", check_in_date1);
                                                        mail_subject = mail_subject.Replace("<%TO_DATE%>", check_out_date1);
                                                        message.Subject = mail_subject;

                                                        // string body = "";
                                                        // body = "Dear Reservation,<br><br> Please Confirm as Below <br><br>" + hotel_name1 + "<br><br> Our Reference Number:" + EmailQoute_id1 + "<br>Name of the passenger :" + pessanger_name1 + "<br>Room Type:" + room_type1 + "<br>No of Single Rooms:" + single_rooms1 + "<br>No of Double Rooms:" + double_rooms1 + "<br>No of Triple Rooms:" + tripal_rooms1 + "<br>Check In Date : " + check_in_date1 + "<br>Check out Date :" + check_out_date1 + "<br><br>Please advise the Cut of Date : <br><br>Please advice the Last Payment Date : <br><br>Please send Confirmation No : <br><br> Best Reagrds <br>Travelz Unlmited";
                                                        string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[1]["EMAIL_CONTENT"].ToString();
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%HOTEL_NAME%&gt;", hotel_name1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%QUOTE_ID%&gt;", EmailQoute_id1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENT_NAME%&gt;", pessanger_name1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOM_TYPE%&gt;", room_type1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLE_ROOMS%&gt;", single_rooms1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLE_ROOMS%&gt;", double_rooms1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLE_ROOMS%&gt;", tripal_rooms1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%FROM_DATE%&gt;", check_in_date1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%TO_DATE%&gt;", check_out_date1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFADULT%&gt;", adults1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCWB%&gt;", cwb1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCNB%&gt;", cnb1);
                                                        strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFINFANT%&gt;", infant1);

                                                        message.Body = strEmailTemplate;
                                                        message.IsBodyHtml = true;

                                                        SmtpClient client = new SmtpClient();
                                                        NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                                                        client.Credentials = info;
                                                        client.Host = smtphost;
                                                        client.Port = int.Parse(smtpport);
                                                        client.DeliveryMethod = SmtpDeliveryMethod.Network;
                                                        client.Send(message);

                                                        objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                                                        objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "", int.Parse(Session["usersid"].ToString()), 2);
                                                    }
                                                    catch (Exception ex)
                                                    {

                                                    }
                                                }

                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                        DataTable DTORDER = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");

                                        objHotelStoreProcedure.update_quote(int.Parse(EmailQoute_id1), DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString());

                                        if (dt_dynamic.Columns.Count == 0)
                                        {
                                            DataColumn dc1 = new DataColumn("hotel_id");
                                            dt_dynamic.Columns.Add(dc1);
                                        }

                                        DataRow dr1 = dt_dynamic.NewRow();
                                        dr1["hotel_id"] = j + 1;

                                        dt_dynamic.Rows.Add(dr1);

                                        break;
                                    }


                                    /*************** SENT MAIL TO OLD HOTEL FOR UPDATION***********************************/
                                    else if (room_type1 != room_type || check_in_date1 != check_in_date || check_out_date1 != check_out_date || single_rooms1 != single_rooms || double_rooms != double_rooms1 || tripal_rooms1 != tripal_rooms || pessanger_name1 != pessanger_name || adults1 == adults || cwb1 == cwb || cnb1 == cnb || infant1 == infant)     // Change 10th Sept)
                                    {


                                        try
                                        {
                                            if (ds_mailTemplate.Tables[0].Rows[2]["IS_ON"].ToString() != "False")
                                            {



                                                try
                                                {
                                                    string fromemail_agent = "";
                                                    if (ds_mailTemplate.Tables[0].Rows[2]["FROM_ROLE_NAME"].ToString() != "")
                                                    {
                                                        DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[2]["FROM_ROLE_NAME"].ToString());
                                                        if (ds_mailTemplate.Tables[0].Rows[2]["FROM_ROLE_NAME"].ToString() == "Agent")
                                                        {
                                                            fromemail_agent = Session["email"].ToString();
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[2]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                                                        {

                                                            if (a == "1")
                                                            {
                                                                fromemail_agent = "reservation@travelzunlimited.com";

                                                            }
                                                            else if (a == "2")
                                                            {
                                                                fromemail_agent = "reservation1@travelzunlimited.com";

                                                            }

                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[2]["FROM_ROLE_NAME"].ToString() == "Supplier")
                                                        {
                                                            fromemail_agent = supplier_emailold;
                                                        }
                                                        else
                                                        {

                                                            fromemail_agent = ds_boMail.Tables[0].Rows[0][0].ToString();
                                                        }

                                                    }


                                                    string toemail_agent = "";
                                                    if (ds_mailTemplate.Tables[0].Rows[2]["TO_ROLE_NAME"].ToString() != "")
                                                    {
                                                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[2]["TO_ROLE_NAME"].ToString());
                                                        if (ds_mailTemplate.Tables[0].Rows[2]["TO_ROLE_NAME"].ToString() == "Agent")
                                                        {
                                                            toemail_agent = Session["email"].ToString();
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[2]["TO_ROLE_NAME"].ToString() == "Backoffice")
                                                        {
                                                            if (a == "1")
                                                            {
                                                                toemail_agent = "reservation@travelzunlimited.com";

                                                            }
                                                            else if (a == "2")
                                                            {
                                                                toemail_agent = "reservation1@travelzunlimited.com";

                                                            }
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[2]["TO_ROLE_NAME"].ToString() == "Supplier")
                                                        {
                                                            toemail_agent = supplier_emailupdate;
                                                        }

                                                        else
                                                        {

                                                            toemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                        }


                                                    }

                                                    string cc_agent = "";
                                                    if (ds_mailTemplate.Tables[0].Rows[2]["CC_ROLE_NAME"].ToString() != "")
                                                    {
                                                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[2]["CC_ROLE_NAME"].ToString());
                                                        if (ds_mailTemplate.Tables[0].Rows[2]["CC_ROLE_NAME"].ToString() == "Agent")
                                                        {
                                                            cc_agent = Session["email"].ToString();
                                                        }


                                                        else if (ds_mailTemplate.Tables[0].Rows[2]["CC_ROLE_NAME"].ToString() == "Backoffice")
                                                        {
                                                            if (a == "1")
                                                            {
                                                                cc_agent = "reservation@travelzunlimited.com";

                                                            }
                                                            else if (a == "2")
                                                            {
                                                                cc_agent = "reservation1@travelzunlimited.com";

                                                            }
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[2]["CC_ROLE_NAME"].ToString() == "Supplier")
                                                        {
                                                            cc_agent = supplier_emailupdate;
                                                        }
                                                        else
                                                        {

                                                            cc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                        }
                                                    }

                                                    string bcc_agent = "";
                                                    if (ds_mailTemplate.Tables[0].Rows[2]["BCC_ROLE_NAME"].ToString() != "")
                                                    {
                                                        DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[2]["BCC_ROLE_NAME"].ToString());
                                                        if (ds_mailTemplate.Tables[0].Rows[2]["BCC_ROLE_NAME"].ToString() == "Agent")
                                                        {
                                                            bcc_agent = Session["email"].ToString();
                                                        }


                                                        else if (ds_mailTemplate.Tables[0].Rows[2]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                                                        {


                                                            if (a == "1")
                                                            {
                                                                bcc_agent = "reservation@travelzunlimited.com";

                                                            }
                                                            else if (a == "2")
                                                            {
                                                                bcc_agent = "reservation1@travelzunlimited.com";

                                                            }
                                                        }
                                                        else if (ds_mailTemplate.Tables[0].Rows[2]["BCC_ROLE_NAME"].ToString() == "Supplier")
                                                        {
                                                            bcc_agent = supplier_emailupdate;
                                                        }
                                                        else
                                                        {

                                                            bcc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                        }
                                                    }


                                                    MailMessage message = new MailMessage();
                                                    message.From = new MailAddress(fromemail_agent);
                                                    message.To.Add(new MailAddress(toemail_agent.ToString()));

                                                    if (cc_agent != "")
                                                    {
                                                        message.CC.Add(new MailAddress(cc_agent.ToString()));
                                                    }
                                                    if (bcc_agent != "")
                                                    {
                                                        message.Bcc.Add(new MailAddress(bcc_agent.ToString()));
                                                    }



                                                    String mail_subject = ds_mailTemplate.Tables[0].Rows[2]["EMAIL_SUBJECT"].ToString();
                                                    mail_subject = mail_subject.Replace("<%QUOTE_ID%>", EmailQoute_id);
                                                    mail_subject = mail_subject.Replace("<%FROM_DATE%>", check_in_date);
                                                    mail_subject = mail_subject.Replace("<%TO_DATE%>", check_out_date);
                                                    message.Subject = mail_subject;

                                                    //   string bodyold = "";
                                                    //   bodyold = "Dear Reservation,<br><br> Please check the below updates in Our Eariler Reference Number: " + EmailQoute_id + "<br><br>" + hotel_name + "<br><br> Name of the passenger :" + pessanger_name1 + "<br>Room Type:" + room_type1 + "<br>No of Single Rooms:" + single_rooms1 + "<br>No of Double Rooms:" + double_rooms1 + "<br>No of Triple Rooms:" + tripal_rooms1 + "<br>Check In Date : " + check_in_date1 + "<br>Check out Date :" + check_out_date1 + "<br>For the above updated requirement Our New Reference Number:" + EmailQoute_id1 + "<br><br>Please advise the Cut of Date :<br><br>Please advice the Last Payment Date : <br><br>Please send Confirmation No : <br><br> Best Reagrds <br>Travelz Unlmited";

                                                    string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[2]["EMAIL_CONTENT"].ToString();

                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%QUOTE_ID%&gt;", EmailQoute_id);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENT_NAME%&gt;", pessanger_name1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOM_TYPE%&gt;", room_type1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLE_ROOMS%&gt;", single_rooms1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLE_ROOMS%&gt;", double_rooms1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLE_ROOMS%&gt;", tripal_rooms1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%FROM_DATE%&gt;", check_in_date1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%TO_DATE%&gt;", check_out_date1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFADULT%&gt;", adults1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCWB%&gt;", cwb1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCNB%&gt;", cnb1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFINFANT%&gt;", infant1);
                                                    strEmailTemplate = strEmailTemplate.Replace("&lt;%NEW_QUOTE_ID%&gt;", EmailQoute_id1);

                                                    message.Body = strEmailTemplate;
                                                    message.IsBodyHtml = true;

                                                    SmtpClient client = new SmtpClient();
                                                    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                                                    client.Credentials = info;
                                                    client.Host = smtphost;
                                                    client.Port = int.Parse(smtpport);
                                                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                                                    client.Send(message);


                                                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[2]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                                                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[2]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id), "", "", "", int.Parse(Session["usersid"].ToString()), 2);
                                                }
                                                catch (Exception ex)
                                                {

                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                        DataTable DTORDER = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");

                                        objHotelStoreProcedure.update_quote(int.Parse(EmailQoute_id1), DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString());
                                    }
                                    else
                                    {
                                        //string body = "";
                                        //body = "Dear Reservation,<br><br> Please Confirm as Below <br><br> Our Reference Number:" + EmailQoute_id1 + "<br><br>" + hotel_name1 + "<br>Name of the passenger :" + pessanger_name1 + "<br>Room Type:" + room_type1 + "<br>No of Single Rooms:" + single_rooms1 + "<br>No of Double Rooms:" + double_rooms1 + "<br>No of Triple Rooms:" + tripal_rooms1 + "<br>Check In Date : " + check_in_date1 + "<br>Check out Date :" + check_out_date1 + "<br><br>Please advise the Cut of Date : <br><br>Please advice the Last Payment Date : <br><br>Please send Confirmation No : <br><br> Best Reagrds <br>Travelz Unlmited";

                                        //try
                                        //{
                                        //    //MailMessage message = new MailMessage();
                                        //    //message.From = new MailAddress(fromemail);
                                        //    //message.To.Add(new MailAddress(dt_hotelEmails.Rows[i_supp]["SUPPLIER_REL_EMAIL"].ToString()));
                                        //    //message.Subject = "Booking for : " + pessanger_name1 + " Check in date : " + check_in_date1 + " Check out date : " + check_out_date1;
                                        //    //message.Body = body;
                                        //    //message.IsBodyHtml = true;

                                        //    //SmtpClient client = new SmtpClient();
                                        //    //NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                                        //    //client.Credentials = info;
                                        //    //client.Host = smtphost;
                                        //    //client.Port = 587;
                                        //    //client.DeliveryMethod = SmtpDeliveryMethod.Network;
                                        //    //client.Send(message);
                                        //}
                                        //catch (Exception ex)
                                        //{

                                        //}
                                        DataTable DTORDER = objHotelStoreProcedure.fetchorderstatusname("FETCH_ORDER_STATUS_NAME_FOR_HOTEL", "3");

                                        objHotelStoreProcedure.update_quote(int.Parse(EmailQoute_id1), DTORDER.Rows[0]["ORDER_STATUS_NAME"].ToString());

                                    }

                                    
                                }
                                falg = false;

                                if (dt_dynamic.Columns.Count == 0)
                                {
                                    DataColumn dc11 = new DataColumn("hotel_id");
                                    dt_dynamic.Columns.Add(dc11);
                                }
                                DataRow dr11 = dt_dynamic.NewRow();
                                dr11["hotel_id"] = j;
                                dt_dynamic.Rows.Add(dr11);



                                break;
                            }




                        }





                        if (falg == false)
                        {
                            falg = true;
                        }
                        else
                        {
                            if (dt_oldsupplier_id.Rows.Count > dt_supplier_id.Rows.Count)
                            {
                                SqlCommand detailsold = new SqlCommand("FETCH_HOTEL_DETAILS_FOR_MAIL", connold);
                                detailsold.CommandType = CommandType.StoredProcedure;
                                detailsold.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id);
                                detailsold.Parameters.Add("@SUPPLIER_ID", SqlDbType.Int).Value = int.Parse(dt_oldsupplier_id.Rows[i]["SUPPLIER_ID"].ToString());
                                SqlDataReader rdrdetailsold = detailsold.ExecuteReader();
                                DataTable dt_hotelDetailsold1 = new DataTable();
                                dt_hotelDetailsold1.Load(rdrdetailsold);

                                single_rooms = dt_hotelDetailsold1.Rows[0]["SINGLE_ROOMS"].ToString();
                                double_rooms = dt_hotelDetailsold1.Rows[0]["DOUBLE_ROOMS"].ToString();
                                tripal_rooms = dt_hotelDetailsold1.Rows[0]["TRIPAL_ROOMS"].ToString();
                                room_type = dt_hotelDetailsold1.Rows[0]["ROOM_TYPE_NAME"].ToString();
                                hotel_name = dt_hotelDetailsold1.Rows[0]["CHAIN_NAME"].ToString();
                                pessanger_name = dt_hotelDetailsold1.Rows[0]["CLIENT_NAME"].ToString();
                                check_in_date = dt_hotelDetailsold1.Rows[0]["CHECK_IN_DATE"].ToString();
                                check_out_date = dt_hotelDetailsold1.Rows[0]["CHECK_OUT_DATE"].ToString();


                                if (ViewState["Mail_HOtel"] == null || ViewState["Mail_HOtel"].ToString() != hotel_name)
                                {
                                    ViewState["Mail_HOtel"] = null;


                                    try
                                    {


                                        if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
                                        {



                                            try
                                            {
                                                string fromemail_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        fromemail_agent = Session["email"].ToString();
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                                                    {

                                                        if (a == "1")
                                                        {
                                                            fromemail_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            fromemail_agent = "reservation1@travelzunlimited.com";

                                                        }

                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        fromemail_agent = dt_hotelDetailsold1.Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                                                    }
                                                    else
                                                    {

                                                        fromemail_agent = ds_boMail.Tables[0].Rows[0][0].ToString();
                                                    }

                                                }


                                                string toemail_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        toemail_agent = Session["email"].ToString();
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Backoffice")
                                                    {
                                                        if (a == "1")
                                                        {
                                                            toemail_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            toemail_agent = "reservation1@travelzunlimited.com";

                                                        }
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        toemail_agent = dt_hotelDetailsold1.Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                                                    }

                                                    else
                                                    {

                                                        toemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                    }


                                                }

                                                string cc_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        cc_agent = Session["email"].ToString();
                                                    }


                                                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                                                    {
                                                        if (a == "1")
                                                        {
                                                            cc_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            cc_agent = "reservation1@travelzunlimited.com";

                                                        }
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        cc_agent = dt_hotelDetailsold1.Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                                                    }
                                                    else
                                                    {

                                                        cc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                    }
                                                }

                                                string bcc_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        bcc_agent = Session["email"].ToString();
                                                    }


                                                    else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                                                    {


                                                        if (a == "1")
                                                        {
                                                            bcc_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            bcc_agent = "reservation1@travelzunlimited.com";

                                                        }
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        bcc_agent = dt_hotelDetailsold1.Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                                                    }
                                                    else
                                                    {

                                                        bcc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                    }
                                                }


                                                MailMessage message = new MailMessage();
                                                message.From = new MailAddress(fromemail_agent);
                                                message.To.Add(new MailAddress(toemail_agent.ToString()));

                                                if (cc_agent != "")
                                                {
                                                    message.CC.Add(new MailAddress(cc_agent.ToString()));
                                                }
                                                if (bcc_agent != "")
                                                {
                                                    message.Bcc.Add(new MailAddress(bcc_agent.ToString()));
                                                }



                                                String mail_subject = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();
                                                mail_subject = mail_subject.Replace("<%QUOTEID%>", EmailQoute_id);

                                                message.Subject = mail_subject;

                                                //   string bodyold = "";
                                                //   bodyold = "Dear Reservation,<br><br> Please cancel the Below <br><br>" + hotel_name + " <br><br>Our Reference Number:" + EmailQoute_id + "<br>Name of the passenger :" + pessanger_name + "<br>Room Type:" + room_type + "<br>No of Single Rooms:" + single_rooms + "<br>No of Double Rooms:" + double_rooms + "<br>No of Triple Rooms:" + tripal_rooms + "<br>Check In Date : " + check_in_date + "<br>Check out Date :" + check_out_date + "<br><br>If in case of any requirement we will update you.<br> Best Reagrds <br>Travelz Unlmited";

                                                string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%HOTEL_NAME%&gt;", hotel_name);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%QUOTE_ID%&gt;", EmailQoute_id);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENT_NAME%&gt;", pessanger_name);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOM_TYPE%&gt;", room_type);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLE_ROOMS%&gt;", single_rooms);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLE_ROOMS%&gt;", double_rooms);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLE_ROOMS%&gt;", tripal_rooms);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%FROM_DATE%&gt;", check_in_date);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%TO_DATE%&gt;", check_out_date);


                                                message.Body = strEmailTemplate;
                                                message.IsBodyHtml = true;

                                                SmtpClient client = new SmtpClient();
                                                NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                                                client.Credentials = info;
                                                client.Host = smtphost;
                                                client.Port = int.Parse(smtpport);
                                                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                                                client.Send(message);

                                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id), "", "", "", int.Parse(Session["usersid"].ToString()), 2);
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }

                                    }


                                    catch
                                    {

                                    }

                                    finally
                                    {

                                    }
                                }
                            }
                            else
                            {
                                if (dt_dynamic.Rows.Count != 0)
                                {
                                    int id = int.Parse(dt_dynamic.Rows[0][0].ToString());
                                    DataTable dt_hotelDetails = new DataTable();
                                    SqlCommand details = new SqlCommand("FETCH_HOTEL_DETAILS_FOR_MAIL", conn);
                                    details.CommandType = CommandType.StoredProcedure;
                                    details.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id1);
                                    details.Parameters.Add("@SUPPLIER_ID", SqlDbType.Int).Value = int.Parse(dt_supplier_id.Rows[id]["SUPPLIER_ID"].ToString());
                                    SqlDataReader rdrdetails = details.ExecuteReader();
                                    dt_hotelDetails.Load(rdrdetails);


                                    single_rooms1 = dt_hotelDetails.Rows[0]["SINGLE_ROOMS"].ToString();
                                    double_rooms1 = dt_hotelDetails.Rows[0]["DOUBLE_ROOMS"].ToString();
                                    tripal_rooms1 = dt_hotelDetails.Rows[0]["TRIPAL_ROOMS"].ToString();
                                    room_type1 = dt_hotelDetails.Rows[0]["ROOM_TYPE_NAME"].ToString();
                                    hotel_name1 = dt_hotelDetails.Rows[0]["CHAIN_NAME"].ToString();
                                    pessanger_name1 = dt_hotelDetails.Rows[0]["CLIENT_NAME"].ToString();
                                    check_in_date1 = dt_hotelDetails.Rows[0]["CHECK_IN_DATE"].ToString();
                                    check_out_date1 = dt_hotelDetails.Rows[0]["CHECK_OUT_DATE"].ToString();
                                    adults1 = dt_hotelDetails.Rows[0]["NO_OF_ADULTS"].ToString();
                                    cwb1 = dt_hotelDetails.Rows[0]["NO_OF_CWB"].ToString();
                                    cnb1 = dt_hotelDetails.Rows[0]["NO_OF_CNB"].ToString();
                                    infant1 = dt_hotelDetails.Rows[0]["NO_OF_INFANT"].ToString();

                                    try
                                    {
                                        if (ds_mailTemplate.Tables[0].Rows[1]["IS_ON"].ToString() != "False")
                                        {



                                            try
                                            {
                                                string fromemail_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        fromemail_agent = Session["email"].ToString();
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                                                    {

                                                        if (a == "1")
                                                        {
                                                            fromemail_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            fromemail_agent = "reservation1@travelzunlimited.com";

                                                        }

                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        fromemail_agent = dt_hotelDetails.Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                                                    }
                                                    else
                                                    {

                                                        fromemail_agent = ds_boMail.Tables[0].Rows[0][0].ToString();
                                                    }

                                                }


                                                string toemail_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        toemail_agent = Session["email"].ToString();
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Backoffice")
                                                    {
                                                        if (a == "1")
                                                        {
                                                            toemail_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            toemail_agent = "reservation1@travelzunlimited.com";

                                                        }
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        toemail_agent = dt_hotelDetails.Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                                                    }

                                                    else
                                                    {

                                                        toemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                    }


                                                }

                                                string cc_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        cc_agent = Session["email"].ToString();
                                                    }


                                                    else if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Backoffice")
                                                    {
                                                        if (a == "1")
                                                        {
                                                            cc_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            cc_agent = "reservation1@travelzunlimited.com";

                                                        }
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        cc_agent = dt_hotelDetails.Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                                                    }
                                                    else
                                                    {

                                                        cc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                    }
                                                }

                                                string bcc_agent = "";
                                                if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() != "")
                                                {
                                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString());
                                                    if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Agent")
                                                    {
                                                        bcc_agent = Session["email"].ToString();
                                                    }


                                                    else if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                                                    {


                                                        if (a == "1")
                                                        {
                                                            bcc_agent = "reservation@travelzunlimited.com";

                                                        }
                                                        else if (a == "2")
                                                        {
                                                            bcc_agent = "reservation1@travelzunlimited.com";

                                                        }
                                                    }
                                                    else if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Supplier")
                                                    {
                                                        bcc_agent = dt_hotelDetails.Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                                                    }
                                                    else
                                                    {

                                                        bcc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                                    }
                                                }


                                                MailMessage message = new MailMessage();
                                                message.From = new MailAddress(fromemail_agent);
                                                message.To.Add(new MailAddress(toemail_agent.ToString()));

                                                if (cc_agent != "")
                                                {
                                                    message.CC.Add(new MailAddress(cc_agent.ToString()));
                                                }
                                                if (bcc_agent != "")
                                                {
                                                    message.Bcc.Add(new MailAddress(bcc_agent.ToString()));
                                                }



                                                String mail_subject = ds_mailTemplate.Tables[0].Rows[1]["EMAIL_SUBJECT"].ToString();
                                                mail_subject = mail_subject.Replace("<%CLIENT_NAME%>", pessanger_name1);
                                                mail_subject = mail_subject.Replace("<%FROM_DATE%>", check_in_date1);
                                                mail_subject = mail_subject.Replace("<%TO_DATE%>", check_out_date1);
                                                message.Subject = mail_subject;

                                                // string body = "";
                                                // body = "Dear Reservation,<br><br> Please Confirm as Below <br><br>" + hotel_name1 + "<br><br> Our Reference Number:" + EmailQoute_id1 + "<br>Name of the passenger :" + pessanger_name1 + "<br>Room Type:" + room_type1 + "<br>No of Single Rooms:" + single_rooms1 + "<br>No of Double Rooms:" + double_rooms1 + "<br>No of Triple Rooms:" + tripal_rooms1 + "<br>Check In Date : " + check_in_date1 + "<br>Check out Date :" + check_out_date1 + "<br><br>Please advise the Cut of Date : <br><br>Please advice the Last Payment Date : <br><br>Please send Confirmation No : <br><br> Best Reagrds <br>Travelz Unlmited";
                                                string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[1]["EMAIL_CONTENT"].ToString();
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%HOTEL_NAME%&gt;", hotel_name1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%QUOTE_ID%&gt;", EmailQoute_id1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENT_NAME%&gt;", pessanger_name1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOM_TYPE%&gt;", room_type1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLE_ROOMS%&gt;", single_rooms1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLE_ROOMS%&gt;", double_rooms1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLE_ROOMS%&gt;", tripal_rooms1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%FROM_DATE%&gt;", check_in_date1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%TO_DATE%&gt;", check_out_date1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFADULT%&gt;", adults1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCWB%&gt;", cwb1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCNB%&gt;", cnb1);
                                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFINFANT%&gt;", infant1);

                                                message.Body = strEmailTemplate;
                                                message.IsBodyHtml = true;

                                                SmtpClient client = new SmtpClient();
                                                NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                                                client.Credentials = info;
                                                client.Host = smtphost;
                                                client.Port = int.Parse(smtpport);
                                                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                                                client.Send(message);

                                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "", int.Parse(Session["usersid"].ToString()), 2);
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                    finally
                                    {

                                    }
                                }
                            }
                        }



                    }
                }
                else
                {
                    /***************************************************************** SENT MAIL TO OLD HOTEL FOR RESERVATION****************************************************/
                    for (int j = 0; j < dt_supplier_id.Rows.Count; j++)
                    {

                        supplier_idupdate = dt_supplier_id.Rows[j]["SUPPLIER_ID"].ToString();
                        DataTable dt_hotelEmails = new DataTable();
                        SqlCommand email = new SqlCommand("FETCH_SUPPLIER_EMAIL_FOR_MAIL", conn);
                        email.CommandType = CommandType.StoredProcedure;
                        email.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id1);
                        SqlDataReader rdremail = email.ExecuteReader();
                        dt_hotelEmails.Load(rdremail);

                        hotelsupplier_idupdate = dt_hotelEmails.Rows[j]["SUPPLIER_ID"].ToString();
                        supplier_emailupdate = dt_hotelEmails.Rows[j]["SUPPLIER_REL_EMAIL"].ToString();

                        if (hotelsupplier_idupdate == supplier_idupdate)
                        {
                            DataTable dt_hotelDetails = new DataTable();
                            SqlCommand details = new SqlCommand("FETCH_HOTEL_DETAILS_FOR_MAIL", conn);
                            details.CommandType = CommandType.StoredProcedure;
                            details.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id1);
                            details.Parameters.Add("@SUPPLIER_ID", SqlDbType.Int).Value = int.Parse(hotelsupplier_idupdate);
                            SqlDataReader rdrdetails = details.ExecuteReader();
                            dt_hotelDetails.Load(rdrdetails);


                            single_rooms1 = dt_hotelDetails.Rows[0]["SINGLE_ROOMS"].ToString();
                            double_rooms1 = dt_hotelDetails.Rows[0]["DOUBLE_ROOMS"].ToString();
                            tripal_rooms1 = dt_hotelDetails.Rows[0]["TRIPAL_ROOMS"].ToString();
                            room_type1 = dt_hotelDetails.Rows[0]["ROOM_TYPE_NAME"].ToString();
                            hotel_name1 = dt_hotelDetails.Rows[0]["CHAIN_NAME"].ToString();
                            pessanger_name1 = dt_hotelDetails.Rows[0]["CLIENT_NAME"].ToString();
                            check_in_date1 = dt_hotelDetails.Rows[0]["CHECK_IN_DATE"].ToString();
                            check_out_date1 = dt_hotelDetails.Rows[0]["CHECK_OUT_DATE"].ToString();
                            adults1 = dt_hotelDetails.Rows[0]["NO_OF_ADULTS"].ToString();
                            cwb1 = dt_hotelDetails.Rows[0]["NO_OF_CWB"].ToString();
                            cnb1 = dt_hotelDetails.Rows[0]["NO_OF_CNB"].ToString();
                            infant1 = dt_hotelDetails.Rows[0]["NO_OF_INFANT"].ToString();
                        }




                        if (ds_mailTemplate.Tables[0].Rows[1]["IS_ON"].ToString() != "False")
                        {



                            try
                            {
                                string fromemail_agent = "";
                                if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() != "")
                                {
                                    DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString());
                                    if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Agent")
                                    {
                                        fromemail_agent = Session["email"].ToString();
                                    }
                                    else if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                                    {

                                        if (a == "1")
                                        {
                                            fromemail_agent = "reservation@travelzunlimited.com";

                                        }
                                        else if (a == "2")
                                        {
                                            fromemail_agent = "reservation1@travelzunlimited.com";

                                        }

                                    }
                                    else if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Supplier")
                                    {
                                        fromemail_agent = supplier_emailupdate;
                                    }
                                    else
                                    {

                                        fromemail_agent = ds_boMail.Tables[0].Rows[0][0].ToString();
                                    }

                                }


                                string toemail_agent = "";
                                if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() != "")
                                {
                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString());
                                    if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Agent")
                                    {
                                        toemail_agent = Session["email"].ToString();
                                    }
                                    else if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Backoffice")
                                    {
                                        if (a == "1")
                                        {
                                            toemail_agent = "reservation@travelzunlimited.com";

                                        }
                                        else if (a == "2")
                                        {
                                            toemail_agent = "reservation1@travelzunlimited.com";

                                        }
                                    }
                                    else if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Supplier")
                                    {
                                        toemail_agent = supplier_emailupdate;
                                    }

                                    else
                                    {

                                        toemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                    }


                                }

                                string cc_agent = "";
                                if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() != "")
                                {
                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString());
                                    if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Agent")
                                    {
                                        cc_agent = Session["email"].ToString();
                                    }


                                    else if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Backoffice")
                                    {
                                        if (a == "1")
                                        {
                                            cc_agent = "reservation@travelzunlimited.com";

                                        }
                                        else if (a == "2")
                                        {
                                            cc_agent = "reservation1@travelzunlimited.com";

                                        }
                                    }
                                    else if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Supplier")
                                    {
                                        cc_agent = supplier_emailupdate;
                                    }
                                    else
                                    {

                                        cc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                    }
                                }

                                string bcc_agent = "";
                                if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() != "")
                                {
                                    DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString());
                                    if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Agent")
                                    {
                                        bcc_agent = Session["email"].ToString();
                                    }


                                    else if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                                    {


                                        if (a == "1")
                                        {
                                            bcc_agent = "reservation@travelzunlimited.com";

                                        }
                                        else if (a == "2")
                                        {
                                            bcc_agent = "reservation1@travelzunlimited.com";

                                        }
                                    }
                                    else if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Supplier")
                                    {
                                        bcc_agent = supplier_emailupdate;
                                    }
                                    else
                                    {

                                        bcc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                                    }
                                }


                                MailMessage message = new MailMessage();
                                message.From = new MailAddress(fromemail_agent);
                                message.To.Add(new MailAddress(toemail_agent.ToString()));

                                if (cc_agent != "")
                                {
                                    message.CC.Add(new MailAddress(cc_agent.ToString()));
                                }
                                if (bcc_agent != "")
                                {
                                    message.Bcc.Add(new MailAddress(bcc_agent.ToString()));
                                }



                                String mail_subject = ds_mailTemplate.Tables[0].Rows[1]["EMAIL_SUBJECT"].ToString();
                                mail_subject = mail_subject.Replace("<%CLIENT_NAME%>", pessanger_name1);
                                mail_subject = mail_subject.Replace("<%FROM_DATE%>", check_in_date1);
                                mail_subject = mail_subject.Replace("<%TO_DATE%>", check_out_date1);
                                message.Subject = mail_subject;

                                // string body = "";
                                // body = "Dear Reservation,<br><br> Please Confirm as Below <br><br>" + hotel_name1 + "<br><br> Our Reference Number:" + EmailQoute_id1 + "<br>Name of the passenger :" + pessanger_name1 + "<br>Room Type:" + room_type1 + "<br>No of Single Rooms:" + single_rooms1 + "<br>No of Double Rooms:" + double_rooms1 + "<br>No of Triple Rooms:" + tripal_rooms1 + "<br>Check In Date : " + check_in_date1 + "<br>Check out Date :" + check_out_date1 + "<br><br>Please advise the Cut of Date : <br><br>Please advice the Last Payment Date : <br><br>Please send Confirmation No : <br><br> Best Reagrds <br>Travelz Unlmited";
                                string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[1]["EMAIL_CONTENT"].ToString();
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%HOTEL_NAME%&gt;", hotel_name1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%QUOTE_ID%&gt;", EmailQoute_id1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENT_NAME%&gt;", pessanger_name1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOM_TYPE%&gt;", room_type1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLE_ROOMS%&gt;", single_rooms1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLE_ROOMS%&gt;", double_rooms1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLE_ROOMS%&gt;", tripal_rooms1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%FROM_DATE%&gt;", check_in_date1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%TO_DATE%&gt;", check_out_date1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFADULT%&gt;", adults1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCWB%&gt;", cwb1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFCNB%&gt;", cnb1);
                                strEmailTemplate = strEmailTemplate.Replace("&lt;%NOOFINFANT%&gt;", infant1);
                                //   message.Subject = "FIT - Quotation - Reference No - " + quote_id;
                                //  message.Attachments.Add(new Attachment(new MemoryStream(_file1), Tourname + ".pdf"));
                                message.Body = strEmailTemplate;
                                message.IsBodyHtml = true;
                                //   message.Attachments.Add(attachFile);
                                SmtpClient client = new SmtpClient();
                                NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                                client.Credentials = info;
                                client.Host = smtphost;
                                client.Port = int.Parse(smtpport);
                                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                                client.Send(message);

                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                                objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "", int.Parse(Session["usersid"].ToString()), 2);

                            }
                            catch (Exception ex)
                            {

                            }
                        }
                    }
                }
            }

            catch
            {

            }

            finally
            {
                /***************************************************************** SENT MAIL TO AGENT FOR NEW BOOKING WITH PDF OF QUOTE****************************************************/

                string agentEmail = Session["email"].ToString();
                string fromdate;
                string todate;
                string clientname;
                string agentname;
                string agentbody;
                string filename = HttpContext.Current.Request.MapPath("~/Views/FIT/Quotes/" + EmailQoute_id1.ToString() + "/Quotation.pdf");
                Attachment attachFile = new Attachment(filename);

                try
                {
                    if (ds_mailTemplate.Tables[0].Rows[3]["IS_ON"].ToString() != "False")
                    {

                        DataTable dt_agent = new DataTable();

                        SqlCommand agent_comm = new SqlCommand("AGENT_BOOKING_EMAIL", conn);
                        agent_comm.CommandType = CommandType.StoredProcedure;
                        agent_comm.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(EmailQoute_id1);
                        SqlDataReader agent_rdr = agent_comm.ExecuteReader();
                        dt_agent.Load(agent_rdr);

                        fromdate = dt_agent.Rows[0]["TOUR_FROM_DATE"].ToString();
                        todate = dt_agent.Rows[0]["TOUR_TO_DATE"].ToString();
                        clientname = dt_agent.Rows[0]["CLIENT_NAME"].ToString();
                        agentname = dt_agent.Rows[0]["CUST_REL_NAME"].ToString();




                        string fromemail_agent = "";
                        if (ds_mailTemplate.Tables[0].Rows[3]["FROM_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[3]["FROM_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[3]["FROM_ROLE_NAME"].ToString() == "Agent")
                            {
                                fromemail_agent = agentEmail.ToString();
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[3]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                            {

                                if (a == "1")
                                {
                                    fromemail_agent = "reservation@travelzunlimited.com";

                                }
                                else if (a == "2")
                                {
                                    fromemail_agent = "reservation1@travelzunlimited.com";

                                }

                            }
                            else
                            {

                                fromemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                            }

                        }


                        string toemail_agent = "";
                        if (ds_mailTemplate.Tables[0].Rows[3]["TO_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[3]["TO_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[3]["TO_ROLE_NAME"].ToString() == "Agent")
                            {
                                toemail_agent = agentEmail.ToString();
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[3]["TO_ROLE_NAME"].ToString() == "Backoffice")
                            {
                                if (a == "1")
                                {
                                    toemail_agent = "reservation@travelzunlimited.com";

                                }
                                else if (a == "2")
                                {
                                    toemail_agent = "reservation1@travelzunlimited.com";

                                }
                            }
                            else
                            {

                                toemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                            }


                        }

                        string cc_agent = "";
                        if (ds_mailTemplate.Tables[0].Rows[3]["CC_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[3]["CC_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[3]["CC_ROLE_NAME"].ToString() == "Agent")
                            {
                                cc_agent = agentEmail.ToString();
                            }


                            else if (ds_mailTemplate.Tables[0].Rows[3]["CC_ROLE_NAME"].ToString() == "Backoffice")
                            {
                                if (a == "1")
                                {
                                    cc_agent = "reservation@travelzunlimited.com";

                                }
                                else if (a == "2")
                                {
                                    cc_agent = "reservation1@travelzunlimited.com";

                                }
                            }
                            else
                            {

                                cc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                            }
                        }

                        string bcc_agent = "";
                        if (ds_mailTemplate.Tables[0].Rows[3]["BCC_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[3]["BCC_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[3]["BCC_ROLE_NAME"].ToString() == "Agent")
                            {
                                bcc_agent = agentEmail.ToString();
                            }


                            else if (ds_mailTemplate.Tables[0].Rows[3]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                            {


                                if (a == "1")
                                {
                                    bcc_agent = "reservation@travelzunlimited.com";

                                }
                                else if (a == "2")
                                {
                                    bcc_agent = "reservation1@travelzunlimited.com";

                                }
                            }
                            else
                            {

                                bcc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                            }
                        }


                        MailMessage message = new MailMessage();
                        message.From = new MailAddress(fromemail_agent);
                        message.To.Add(new MailAddress(toemail_agent.ToString()));

                        if (cc_agent != "")
                        {
                            message.CC.Add(new MailAddress(cc_agent.ToString()));
                        }
                        if (bcc_agent != "")
                        {
                            message.Bcc.Add(new MailAddress(bcc_agent.ToString()));
                        }

                        //   agentbody = "Dear   " + agentname + ",<br><br>We have received your updated booking as per the attached file. <br>Our Reference Number:" + EmailQoute_id1 + "<br>Name of the passenger :" + pessanger_name1 + "<br>Room Type:" + room_type1 + "<br>No of Single Rooms:" + single_rooms1 + "<br>No of Double Rooms:" + double_rooms1 + "<br>No of Triple Rooms:" + tripal_rooms1 + "<br>Check In Date : " + check_in_date1 + "<br>Check out Date :" + check_out_date1 + "<br><br>Please advise the Cut of Date : <br><br>Please advice the Last Payment Date : <br><br>Please send Confirmation No : <br><br> Best Reagrds <br>Travelz Unlmited";

                        String mail_subject = ds_mailTemplate.Tables[0].Rows[3]["EMAIL_SUBJECT"].ToString();
                        mail_subject = mail_subject.Replace("<%QUOTE_ID%>", EmailQoute_id1);
                        mail_subject = mail_subject.Replace("<%FROM_DATE%>", check_in_date1);
                        mail_subject = mail_subject.Replace("<%TO_DATE%>", check_out_date1);
                        message.Subject = mail_subject;

                        string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[3]["EMAIL_CONTENT"].ToString();

                        strEmailTemplate = strEmailTemplate.Replace("&lt;%OLD_QUOTE_ID%&gt;", EmailQoute_id); 
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%AGENT_NAME%&gt;", agentname);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%QUOTE_ID%&gt;", EmailQoute_id1);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENT_NAME%&gt;", pessanger_name1);
                        // strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOM_TYPE%&gt;", room_type1);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLE_ROOMS%&gt;", single_rooms1);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLE_ROOMS%&gt;", double_rooms1);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLE_ROOMS%&gt;", tripal_rooms1);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%FROM_DATE%&gt;", check_in_date1);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%TO_DATE%&gt;", check_out_date1);

                        //   message.Subject = "FIT - Quotation - Reference No - " + quote_id;
                        //  message.Attachments.Add(new Attachment(new MemoryStream(_file1), Tourname + ".pdf"));
                        message.Body = strEmailTemplate;
                        message.IsBodyHtml = true;
                        message.Attachments.Add(attachFile);
                        SmtpClient client = new SmtpClient();
                        NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                        client.Credentials = info;
                        client.Host = smtphost;
                        client.Port = int.Parse(smtpport);
                        client.DeliveryMethod = SmtpDeliveryMethod.Network;
                        client.Send(message);


                        objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[3]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 1);
                        objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[3]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(EmailQoute_id1), "", "", "Quotation.pdf", int.Parse(Session["usersid"].ToString()), 2);
                    }
                }
                catch (Exception ex)
                {

                }


            }
        }





            #endregion
        #endregion

        #region for cancellation

        #region update_hotel

        public void insert_update_hotels_for_cancel()
        {


            cityname = "";
            DataTable dt = objHotelStoreProcedure.fetchpacageid(package_id);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                cityname += "," + dt.Rows[i]["CITY_NAME"].ToString();
            }



            string str1 = cityname;
            string[] words = str1.Split(',');

            foreach (string word in words)
            {
                // BANGKOK
                if (word == "Bangkok")
                {

                    bkkflag = true;
                    if (txtfeesbkk.Text != "")
                    {
                        //hotelcartid = hotel_cart_id;
                        cityid = word;
                        hotelid = ddrbkk_HotelName.Text;


                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeesbkk.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Bangkok Hotel.", "successMessage", 8000);
                    }


                }

                // PATTYA
                if (word == "Pattaya")
                {

                    ptyflag = true;
                    if (txtfeespty.Text != "")
                    {
                        hotelcartid = hotel_cart_id;

                        cityid = word;

                        hotelid = ddrpty_HotelName.Text;
                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeespty.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Pattaya Hotel.", "successMessage", 8000);
                    }

                }


                //PHUKET
                if (word == "Phuket")
                {

                    phuflag = true;
                    if (txtfeesphu.Text != "")
                    {
                        hotelcartid = hotel_cart_id;

                        cityid = word;

                        hotelid = ddrphu_HotelName.Text;
                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeesphu.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Phuket Hotel.", "successMessage", 8000);
                    }

                }

                //BKV
                if (word == "Krabi")
                {

                    if (txtfeeskbv.Text != "")
                    {
                        hotelcartid = hotel_cart_id;

                        cityid = word;

                        hotelid = ddrkbv_HotelName.Text;
                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeeskbv.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Krabi Hotel.", "successMessage", 8000);
                    }

                }

                //USM
                if (word == "Samui")
                {

                    if (txtfeesusm.Text != "")
                    {
                        hotelcartid = hotel_cart_id;

                        cityid = word;

                        hotelid = ddrusm_HotelName.Text;

                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeesusm.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Krabi Hotel.", "successMessage", 8000);
                    }

                }

                //CNX
                if (word == "Chiangmai")
                {


                    if (txtfeescnx.Text != "")
                    {
                        hotelcartid = hotel_cart_id;

                        cityid = word;

                        hotelid = ddrcnx_HotelName.Text;
                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeescnx.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Krabi Hotel.", "successMessage", 8000);
                    }

                }
                //ETC
                if (word == "Hua Hin")
                {

                    if (txtfeesetc.Text != "")
                    {
                        hotelcartid = hotel_cart_id;

                        cityid = word;

                        hotelid = ddretc_HotelName.Text;
                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeesetc.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Krabi Hotel.", "successMessage", 8000);
                    }
                }


                // SS
                if (word == "ss")
                {

                    if (txtfeesss.Text != "")
                    {
                        hotelcartid = hotel_cart_id;

                        cityid = word;

                        hotelid = ddrss_HotelName.Text;
                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeesss.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Krabi Hotel.", "successMessage", 8000);
                    }
                }


                // SPS
                if (word == "sps")
                {

                    if (txtfeessps.Text != "")
                    {
                        hotelcartid = hotel_cart_id;

                        cityid = word;

                        hotelid = ddrsps_HotelName.Text;

                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeessps.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Krabi Hotel.", "successMessage", 8000);
                    }
                }


                // ZZ
                if (word == "zz")
                {

                    if (txtfeeszz.Text != "")
                    {
                        hotelcartid = hotel_cart_id;

                        cityid = word;

                        hotelid = ddrzz_HotelName.Text;

                        objHotelStoreProcedure.upadteHotelfees(Session["updateid"].ToString(), cityid, hotelid, txtfeeszz.Text);

                    }
                    else
                    {
                        Master.DisplayMessage("Fill At Least 0 in Fess of Krabi Hotel.", "successMessage", 8000);
                    }
                }

                //if (word != "")
                //{
                //    objHotelStoreProcedure.insertupdate_Hotels(hotelcartid, cityid, hotelid, fromdate, todate, noofroms, orderstatus, userid, roomtype, roomtypeid, startdate, enddate);
                //}
            }



        }

        #endregion

        #region UPDATE TRANSFER PACKAGE METHOD

        public void insert_update_transfer_pac()
        {
            #region sachin old updatate for canceled
            //foreach (DataListItem item in dlhoteldetails.Items)
            //{
            //    //DropDownList drptime = (DropDownList)item.FindControl("tpdrp_time");
            //    RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
            //    Label id = (Label)item.FindControl("lbltp_priceid");
            //    if (rbtn.Checked)
            //    {
            //        instpid = id.Text;
            //        Label tpid = (Label)item.FindControl("lbltp_priceid");
            //        transferpackgeid = int.Parse(tpid.Text);
            //        TextBox txtbkk = (TextBox)item.FindControl("txttrans");

            //        //TextBox datebkk = (TextBox)item.FindControl("txtTPdate");
            //        //TextBox timebkk = (TextBox)item.FindControl("txtTPtime");
            //        Label tp_fromtoid = (Label)item.FindControl("lbltp_detialid");
            //        //DropDownList drp = (DropDownList)item.FindControl("drptransfer");

            //        //if (datebkk.Text == "")
            //        //{
            //        //    Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
            //        //}
            //        ////else if (timebkk.Text == "")
            //        ////{
            //        ////    Master.DisplayMessage("Time Is Required.", "successMessage", 8000);
            //        ////}
            //        //else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
            //        //{
            //        //    Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
            //        //}
            //        //else
            //        //{
            //        serivcecartid = service_cart_id;

            //        packageid = transferpackgeid;
            //        packageflag = "TRANSFER";
            //        //time = drptime.Text;
            //        //date = datebkk.Text;
            //        orderstatus = Session["orderstatus"].ToString();
            //        userid = int.Parse(usrid);
            //        //pack_name = "";

            //        objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtbkk.Text, Session["updateid"].ToString());
            //        break;

            //    }
            //    else if (instpid == id.Text)
            //    {
            //        //Label tpid = (Label)item.FindControl("lbltp_priceid");
            //        //transferpackgeid = int.Parse(tpid.Text);


            //        //TextBox datebkk = (TextBox)item.FindControl("txtTPdate");
            //        //TextBox timebkk = (TextBox)item.FindControl("txtTPtime");
            //        //Label tp_fromtoid = (Label)item.FindControl("lbltp_detialid");
            //        //DropDownList drp = (DropDownList)item.FindControl("drptransfer");

            //        //serivcecartid = service_cart_id;

            //        //packageid = transferpackgeid;
            //        //packageflag = "TRANSFER";
            //        //time = drptime.Text;
            //        //date = datebkk.Text;
            //        //orderstatus = Session["orderstatus"].ToString();
            //        //userid = int.Parse(usrid);
            //        //pack_name = "";

            //        //objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, "0", pack_name, "", int.Parse(tp_fromtoid.Text), drp.Text);
            //    }
            //}
            #endregion

            foreach (GridViewRow item in GridView10.Rows)
            {
                RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                Label id = (Label)item.FindControl("lbltp_priceid");
                if (rbtn.Checked)
                {
                    instpid = id.Text;
                    Label tpid = (Label)item.FindControl("lbltp_priceid");
                    transferpackgeid = int.Parse(tpid.Text);
                    TextBox txtbkk = (TextBox)item.FindControl("txttrans");
                    Label tp_fromtoid = (Label)item.FindControl("lbltp_detialid");
                    serivcecartid = service_cart_id;

                    packageid = transferpackgeid;
                    packageflag = "TRANSFER";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);

                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtbkk.Text, Session["updateid"].ToString(), tpid.Text);
                    break;

                }
            }
        }

        #endregion

        #region UPDATE SIGHT SEEING


        //BANGKOK
        public void update_ss_bkk()
        {

            //DataTable dtbkk = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);

            //datalist_bkk.DataSource = dtbkk;
            //datalist_bkk.DataBind();
            //foreach (DataListItem item in datalist_bkk.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
            //    if (rbtn.Checked)
            //    {
            //        Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
            //        TextBox datebkk = (TextBox)item.FindControl("txtSS_Bkkdate");
            //        TextBox txtssbkk = (TextBox)item.FindControl("txtssbkkfees");

            //            serivcecartid = service_cart_id;

            //            packageid = 0;
            //            packageflag = "SIGHT";
            //            //time = timebkk.Text;
            //            //date = datebkk.Text;
            //            orderstatus = Session["orderstatus"].ToString();
            //            userid = int.Parse(usrid);
            //            pack_name = packagename.Text;
            //            objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtssbkk.Text, Session["updateid"].ToString());
            //            //objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Bangkok", 0, sicpvt_flag.Text);
            //        }
            //    }
            foreach (GridViewRow item in GridView1.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_Bkkdate");
                    TextBox txtssbkk = (TextBox)item.FindControl("txtssbkkfees");
                    Label PRICEID = (Label)item.FindControl("lblBKK_SIGHTID");
                    serivcecartid = service_cart_id;

                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;
                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtssbkk.Text, Session["updateid"].ToString(), PRICEID.Text);
                }
            }


        }

        //PATTYA
        public void update_ss_tp_pty()
        {
            //DataTable dtpty = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
            //datalist_pty.DataSource = dtpty;
            //datalist_pty.DataBind();
            //foreach (DataListItem item in datalist_pty.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
            //    if (rbtn.Checked)
            //    {

            //        Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");

            //        //TextBox datebkk = (TextBox)item.FindControl("txtSS_Ptydate");
            //        //TextBox timebkk = (TextBox)item.FindControl("txtSS_Ptytime");
            //        TextBox txtpty = (TextBox)item.FindControl("txtssptyfees");
            //        TextBox txtmeal = (TextBox)item.FindControl("txtSS_PtynoofMeals");
            //        DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList2");

            //        //if (datebkk.Text == "")
            //        //{
            //        //    Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
            //        //}
            //        ////else if (timebkk.Text == "")
            //        ////{
            //        ////    Master.DisplayMessage("Time Is Required.", "successMessage", 8000);
            //        ////}
            //        //else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
            //        //{
            //        //    Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
            //        //}
            //        //else
            //        //{
            //        serivcecartid = service_cart_id;

            //        packageid = 0;
            //        packageflag = "SIGHT";
            //        //time = timebkk.Text;
            //        //date = datebkk.Text;
            //        orderstatus = Session["orderstatus"].ToString();
            //        userid = int.Parse(usrid);
            //        pack_name = packagename.Text;

            //        objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString());
            //        // objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Pattaya", 0, sicpvt_flag.Text);
            //    }
            //}
            foreach (GridViewRow item in GV_Result.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");
                    TextBox txtpty = (TextBox)item.FindControl("txtssptyfees");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_PtynoofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList2");
                    Label PRICEID = (Label)item.FindControl("lblpty_SIGHTID");

                    serivcecartid = service_cart_id;

                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString(), PRICEID.Text);
                }
            }


        }

        //PHUKET
        public void update_ss_tp_phu()
        {
            //DataTable dtphuket = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
            //datalist_phuket.DataSource = dtphuket;
            //datalist_phuket.DataBind();
            //foreach (DataListItem item in datalist_phuket.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
            //    if (rbtn.Checked)
            //    {
            //        Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
            //        TextBox datebkk = (TextBox)item.FindControl("txtSS_phuketdate");
            //        TextBox timebkk = (TextBox)item.FindControl("txtSS_phukettime");
            //        TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");
            //        DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList3");
            //        TextBox txtpty = (TextBox)item.FindControl("txtssphufees");
            //           serivcecartid = service_cart_id;

            //            packageid = 0;
            //            packageflag = "SIGHT";
            //            time = timebkk.Text;
            //            date = datebkk.Text;
            //            orderstatus = Session["orderstatus"].ToString();
            //            userid = int.Parse(usrid);
            //            pack_name = packagename.Text;

            //            objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString());
            //        }
            //    }


            //}
            foreach (GridViewRow item in GridView2.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_phuketdate");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_phukettime");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList3");
                    TextBox txtpty = (TextBox)item.FindControl("txtssphufees");
                    serivcecartid = service_cart_id;
                    Label PRICEID = (Label)item.FindControl("lblPHU_SIGHTID");

                    packageid = 0;
                    packageflag = "SIGHT";
                    //time = timebkk.Text;
                    //date = datebkk.Text;
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString(), PRICEID.Text);
                }
            }


        }

        //BKV
        public void update_ss_tp_kbv()
        {
            //DataTable dtkbv = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
            //datalist_kbv.DataSource = dtkbv;
            //datalist_kbv.DataBind();
            //foreach (DataListItem item in datalist_kbv.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
            //    if (rbtn.Checked)
            //    {
            //        Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
            //        TextBox datebkk = (TextBox)item.FindControl("txtSS_kbv_date");
            //        TextBox timebkk = (TextBox)item.FindControl("txtSS_kbv_time");
            //        TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");
            //        DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList4");


            //        if (datebkk.Text == "")
            //        {
            //            Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
            //        }
            //        //else if (timebkk.Text == "")
            //        //{
            //        //    Master.DisplayMessage("Time Is Required.", "successMessage", 8000);
            //        //}
            //        else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
            //        {
            //            Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
            //        }
            //        else
            //        {
            //            serivcecartid = service_cart_id;

            //            packageid = 0;
            //            packageflag = "SIGHT";
            //            time = timebkk.Text;
            //            date = datebkk.Text;
            //            orderstatus = Session["orderstatus"].ToString();
            //            userid = int.Parse(usrid);
            //            pack_name = packagename.Text;

            //            objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Krabi", 0, sicpvt_flag.Text);
            //        }
            //    }

            //}
            foreach (GridViewRow item in GridView3.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                    TextBox txtpty = (TextBox)item.FindControl("txtsskbvfees");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_kbv_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList4");
                    Label PRICEID = (Label)item.FindControl("lblKBV_SIGHTID");

                    serivcecartid = service_cart_id;
                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;
                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString(), PRICEID.Text);
                }

            }
        }

        //USM
        public void update_ss_tp_usm()
        {
            //DataTable dtusm = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
            //datalist_usm.DataSource = dtusm;
            //datalist_usm.DataBind();
            //foreach (DataListItem item in datalist_usm.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
            //    if (rbtn.Checked)
            //    {
            //        Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
            //        TextBox datebkk = (TextBox)item.FindControl("txtSS_usm_date");
            //        TextBox timebkk = (TextBox)item.FindControl("txtSS_usm_time");
            //        TextBox txtmeal = (TextBox)item.FindControl("txtSS_usm_noofMeals");
            //        DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList5");

            //        if (datebkk.Text == "")
            //        {
            //            Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
            //        }
            //        //else if (timebkk.Text == "")
            //        //{
            //        //    Master.DisplayMessage("Time Is Required.", "successMessage", 8000);
            //        //}
            //        else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
            //        {
            //            Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
            //        }
            //        else
            //        {
            //            serivcecartid = service_cart_id;

            //            packageid = 0;
            //            packageflag = "SIGHT";
            //            time = timebkk.Text;
            //            date = datebkk.Text;
            //            orderstatus = Session["orderstatus"].ToString();
            //            userid = int.Parse(usrid);
            //            pack_name = packagename.Text;

            //            objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Samui", 0, sicpvt_flag.Text);
            //        }
            //    }
            //}
            foreach (GridViewRow item in GridView4.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                    TextBox txtpty = (TextBox)item.FindControl("txtssusmfees");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_usm_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_usm_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList5");
                    Label PRICEID = (Label)item.FindControl("lblUSM_SIGHTID");

                    serivcecartid = service_cart_id;
                    packageid = 0;
                    packageflag = "SIGHT";
                    //time = timebkk.Text;
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString(), PRICEID.Text);
                }
            }
        }

        //CNX
        public void update_ss_tp_cnx()
        {
            //DataTable dtcnx = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
            //datalist_cnx.DataSource = dtcnx;
            //datalist_cnx.DataBind();
            //foreach (DataListItem item in datalist_cnx.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
            //    if (rbtn.Checked)
            //    {
            //        Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
            //        TextBox datebkk = (TextBox)item.FindControl("txtSS_cnx_date");
            //        TextBox timebkk = (TextBox)item.FindControl("txtSS_cnx_time");
            //        TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
            //        DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList6");

            //        if (datebkk.Text == "")
            //        {
            //            Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
            //        }
            //        //else if (timebkk.Text == "")
            //        //{
            //        //    Master.DisplayMessage("Time Is Required.", "successMessage", 8000);
            //        //}
            //        else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
            //        {
            //            Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
            //        }
            //        else
            //        {
            //            serivcecartid = service_cart_id;

            //            packageid = 0;
            //            packageflag = "SIGHT";
            //            time = timebkk.Text;
            //            date = datebkk.Text;
            //            orderstatus = Session["orderstatus"].ToString();
            //            userid = int.Parse(usrid);
            //            pack_name = packagename.Text;

            //            objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Chiangmai", 0, sicpvt_flag.Text);
            //        }
            //    }

            //}
            foreach (GridViewRow item in GridView5.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                    TextBox txtpty = (TextBox)item.FindControl("txtsscnxfees");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_cnx_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList6");
                    Label PRICEID = (Label)item.FindControl("lblCNX_SIGHTID");

                    serivcecartid = service_cart_id;
                    packageid = 0;
                    packageflag = "SIGHT";
                    //time = timebkk.Text;
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString(), PRICEID.Text);
                }

            }
        }

        //ETC
        public void update_ss_tp_etc()
        {

            //DataTable dtetc = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
            //datalist_ETC.DataSource = dtetc;
            //datalist_ETC.DataBind();
            //foreach (DataListItem item in datalist_ETC.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
            //    if (rbtn.Checked)
            //    {
            //        Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
            //        TextBox datebkk = (TextBox)item.FindControl("txtSS_etc_date");
            //        TextBox timebkk = (TextBox)item.FindControl("txtSS_etc_time");
            //        TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
            //        DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList7");

            //        if (datebkk.Text == "")
            //        {
            //            Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
            //        }
            //        //else if (timebkk.Text == "")
            //        //{
            //        //    Master.DisplayMessage("Time Is Required.", "successMessage", 8000);
            //        //}
            //        else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
            //        {
            //            Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
            //        }
            //        else
            //        {
            //            serivcecartid = service_cart_id;

            //            packageid = 0;
            //            packageflag = "SIGHT";
            //            time = timebkk.Text;
            //            date = datebkk.Text;
            //            orderstatus = Session["orderstatus"].ToString();
            //            userid = int.Parse(usrid);
            //            pack_name = packagename.Text;

            //            objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Hua Hin", 0, sicpvt_flag.Text);
            //        }
            //    }
            //}
            foreach (GridViewRow item in GridView6.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                    TextBox txtpty = (TextBox)item.FindControl("txtssetcfees");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_etc_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList7");
                    Label PRICEID = (Label)item.FindControl("lblETC_SIGHTID");

                    serivcecartid = service_cart_id;
                    packageid = 0;
                    packageflag = "SIGHT";
                    //time = timebkk.Text;
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString(), PRICEID.Text);
                }
            }
        }

        //SS
        public void update_ss_tp_s()
        {
            //DataTable dtss = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
            //datalist_s.DataSource = dtss;
            //datalist_s.DataBind();
            //foreach (DataListItem item in datalist_s.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
            //    if (rbtn.Checked)
            //    {
            //        Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
            //        TextBox datebkk = (TextBox)item.FindControl("txtssssfees");
            //        TextBox timebkk = (TextBox)item.FindControl("txtSS_s_time");
            //        TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
            //        DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList8");

            //        if (datebkk.Text == "")
            //        {
            //            Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
            //        }
            //        //else if (timebkk.Text == "")
            //        //{
            //        //    Master.DisplayMessage("Time Is Required.", "successMessage", 8000);
            //        //}
            //        else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
            //        {
            //            Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
            //        }
            //        else
            //        {
            //            serivcecartid = service_cart_id;

            //            packageid = 0;
            //            packageflag = "SIGHT";
            //            time = timebkk.Text;
            //            date = datebkk.Text;
            //            orderstatus = Session["orderstatus"].ToString();
            //            userid = int.Parse(usrid);
            //            pack_name = packagename.Text;

            //            objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Ss", 0, sicpvt_flag.Text);
            //        }
            //    }
            //}
            foreach (GridViewRow item in GridView7.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                    TextBox txtpty = (TextBox)item.FindControl("txtssssfees");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_s_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList8");
                    serivcecartid = service_cart_id;
                    Label PRICEID = (Label)item.FindControl("lblSS_SIGHTID");

                    packageid = 0;
                    packageflag = "SIGHT";
                    //time = timebkk.Text;
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString(), PRICEID.Text);

                }
            }

        }

        //SPS
        public void update_ss_tp_sps()
        {
            //DataTable dtsps = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
            //datalist_sps.DataSource = dtsps;
            //datalist_sps.DataBind();

            //foreach (DataListItem item in datalist_sps.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
            //    if (rbtn.Checked)
            //    {
            //        Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
            //        TextBox datebkk = (TextBox)item.FindControl("txtSS_sps_date");
            //        TextBox timebkk = (TextBox)item.FindControl("txtSS_sps_time");
            //        TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
            //        DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList9");
            //        TextBox txtpty = (TextBox)item.FindControl("txtssspsfees");
            //        if (datebkk.Text == "")
            //        {
            //            Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
            //        }
            //        //else if (timebkk.Text == "")
            //        //{
            //        //    Master.DisplayMessage("Time Is Required.", "successMessage", 8000);
            //        //}
            //        else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
            //        {
            //            Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
            //        }
            //        else
            //        {
            //            serivcecartid = service_cart_id;

            //            packageid = 0;
            //            packageflag = "SIGHT";
            //            time = timebkk.Text;
            //            date = datebkk.Text;
            //            orderstatus = Session["orderstatus"].ToString();
            //            userid = int.Parse(usrid);
            //            pack_name = packagename.Text;

            //            objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Sps", 0, sicpvt_flag.Text);
            //        }
            //    }
            //}
            foreach (GridViewRow item in GridView8.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList9");
                    TextBox txtpty = (TextBox)item.FindControl("txtssspsfees");
                    Label PRICEID = (Label)item.FindControl("lblSPS_SIGHTID");

                    serivcecartid = service_cart_id;
                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;
                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString(), PRICEID.Text);
                }
            }


        }

        //ZZ
        public void update_ss_tp_zz()
        {
            //DataTable dtzz = objHotelStoreProcedure.fetchsightseeing(Session["fromdate"].ToString(), Session["todate"].ToString(), word);
            //Datalist_zz.DataSource = dtzz;
            //Datalist_zz.DataBind();
            //foreach (DataListItem item in Datalist_zz.Items)
            //{

            //    CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
            //    if (rbtn.Checked)
            //    {
            //        Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
            //        TextBox datebkk = (TextBox)item.FindControl("txtSS_zz_date");
            //        TextBox timebkk = (TextBox)item.FindControl("txtSS_zz_time");
            //        TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
            //        DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList10");

            //        if (datebkk.Text == "")
            //        {
            //            Master.DisplayMessage("Date Is Required.", "successMessage", 8000);
            //        }
            //        //else if (timebkk.Text == "")
            //        //{
            //        //    Master.DisplayMessage("Time Is Required.", "successMessage", 8000);
            //        //}
            //        else if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
            //        {
            //            Master.DisplayMessage("Date Must Between From Date to To Date.", "successMessage", 8000);
            //        }
            //        else
            //        {
            //            serivcecartid = service_cart_id;

            //            packageid = 0;
            //            packageflag = "SIGHT";
            //            time = timebkk.Text;
            //            date = datebkk.Text;
            //            orderstatus = Session["orderstatus"].ToString();
            //            userid = int.Parse(usrid);
            //            pack_name = packagename.Text;

            //            objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Zz", 0, sicpvt_flag.Text);
            //        }
            //    }
            //}
            foreach (GridViewRow item in GridView9.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList10");
                    TextBox txtpty = (TextBox)item.FindControl("txtsszzfees");
                    Label PRICEID = (Label)item.FindControl("lblZZ_SIGHTID");

                    serivcecartid = service_cart_id;
                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackage(packageflag, userid, txtpty.Text, Session["updateid"].ToString(), PRICEID.Text);
                }
            }

        }

        //}
        #endregion

        protected void mailforagentcancellationapproved()
        {
            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");

            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[9]["AutoSearchResult"].ToString());



            if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
            {
                DataTable dtemail = objHotelStoreProcedure.fetchemailusingRoleid("FETCH_EMAIL_ID_FOR_ADMIN", "18");
                string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
                string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
                string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
                string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();

                string fromemail = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        fromemail = "fitops@travelzunlimited.com";
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                    {
                        fromemail = Session["email"].ToString();
                    }
                    else
                    {
                        fromemail = dtemail.Rows[0]["USER_NAME"].ToString();
                    }
                }

                string toemail1 = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        toemail1 = "fitops@travelzunlimited.com";
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                    {
                        toemail1 = Session["email"].ToString();
                    }
                    else
                    {
                        toemail1 = dtemail.Rows[0]["USER_NAME"].ToString();
                    }
                }

                string cc = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        cc = "fitops@travelzunlimited.com";
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Agent")
                    {
                        cc = Session["email"].ToString();
                    }
                    else
                    {
                        cc = dtemail.Rows[0]["USER_NAME"].ToString();
                    }
                }

                string bcc = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        bcc = "fitops@travelzunlimited.com";
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                    {
                        bcc = Session["email"].ToString();
                    }
                    else
                    {
                        bcc = dtemail.Rows[0]["USER_NAME"].ToString();
                    }
                }

                try
                {



                    MailMessage message = new MailMessage();
                    message.From = new MailAddress(fromemail);
                    message.To.Add(new MailAddress(toemail1.ToString()));
                    if (cc != "")
                    {
                        message.CC.Add(new MailAddress(cc.ToString()));
                    }
                    if (bcc != "")
                    {
                        message.Bcc.Add(new MailAddress(bcc.ToString()));
                    }

                    String mail_subject = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();

                    message.Subject = mail_subject;

                    string body = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();

                    

                    body = body.Replace("&lt;%QUOTEID%&gt;", Request.QueryString["QUOTEID"].ToString());
                    body = body.Replace("&lt;%AMOUNT%&gt;", Session["agentfees"].ToString());

                    DataTable DTINVOICE = objHotelStoreProcedure.FECH_INVOICE_FROM_QUOTE(Request.QueryString["QUOTEID"].ToString());
                    string filename = HttpContext.Current.Request.MapPath("~/Views/FIT/Invoices/" + DTINVOICE.Rows[0]["SALES_INVOICE_ID"].ToString() + "/Invoice.pdf");
                    Attachment attachFile1 = new Attachment(filename);
                    


                    message.Body = body;
                    message.IsBodyHtml = true;
                    message.Attachments.Add(attachFile1);
                 
                    SmtpClient client = new SmtpClient();
                    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                    client.Credentials = info;
                    client.Host = smtphost;
                    client.Port = int.Parse(smtpport);
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.Send(message);

                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, mail_subject, body, int.Parse(Request.QueryString["QUOTEID"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, mail_subject, body, int.Parse(Request.QueryString["QUOTEID"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 2);
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        protected void mailforagentcancellationDisapproved()
        {

            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");

            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[10]["AutoSearchResult"].ToString());



            if (ds_mailTemplate.Tables[0].Rows[0]["IS_ON"].ToString() != "False")
            {
                DataTable dtemail = objHotelStoreProcedure.fetchemailusingRoleid("FETCH_EMAIL_ID_FOR_ADMIN", "18");
                string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
                string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
                string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
                string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();

                string fromemail = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        fromemail = "fitops@travelzunlimited.com";
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["FROM_ROLE_NAME"].ToString() == "Agent")
                    {
                        fromemail = Session["email"].ToString();
                    }
                    else
                    {
                        fromemail = dtemail.Rows[0]["USER_NAME"].ToString();
                    }
                }

                string toemail1 = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        toemail1 = "fitops@travelzunlimited.com";
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["TO_ROLE_NAME"].ToString() == "Agent")
                    {
                        toemail1 = Session["email"].ToString();
                    }
                    else
                    {
                        toemail1 = dtemail.Rows[0]["USER_NAME"].ToString();
                    }
                }

                string cc = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        cc = "fitops@travelzunlimited.com";
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["CC_ROLE_NAME"].ToString() == "Agent")
                    {
                        cc = Session["email"].ToString();
                    }
                    else
                    {
                        cc = dtemail.Rows[0]["USER_NAME"].ToString();
                    }
                }

                string bcc = "";
                if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() != "")
                {
                    if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                    {
                        bcc = "fitops@travelzunlimited.com";
                    }
                    else if (ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString() == "Agent")
                    {
                        bcc = Session["email"].ToString();
                    }
                    else
                    {
                        bcc = dtemail.Rows[0]["USER_NAME"].ToString();
                    }
                }



                //string body1 = "";
                //body1 = "Dear Agent<br><br>Your Request for Cancelation Booking is DisApproved By Admin and Backoffice<br><br>Best Regards,<br>Travelz Unlimited";

                try
                {

                    //string toemail2 = "hardik@ambait.com";

                    MailMessage message = new MailMessage();
                    message.From = new MailAddress(fromemail);
                    message.To.Add(new MailAddress(toemail1.ToString()));
                    if (cc != "")
                    {
                        message.CC.Add(new MailAddress(cc.ToString()));
                    }
                    if (bcc != "")
                    {
                        message.Bcc.Add(new MailAddress(bcc.ToString()));
                    }

                    String mail_subject = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_SUBJECT"].ToString();

                    message.Subject = mail_subject;

                    string body = ds_mailTemplate.Tables[0].Rows[0]["EMAIL_CONTENT"].ToString();

                    //     body = body.Replace("&lt;%AGENTNAME%&gt;", AgentName);

                    body = body.Replace("&lt;%QUOTEID%&gt;", Request.QueryString["QUOTEID"].ToString());

                    message.Body = body;
                    message.IsBodyHtml = true;

                    SmtpClient client = new SmtpClient();
                    NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                    client.Credentials = info;
                    client.Host = smtphost;
                    client.Port = int.Parse(smtpport);
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.Send(message);

                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, mail_subject, body, int.Parse(Request.QueryString["QUOTEID"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                    objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[0]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail, toemail1, cc, bcc, mail_subject, body, int.Parse(Request.QueryString["QUOTEID"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 2);
                }
                catch (Exception ex)
                {
                    //lblResult.Text = "Could not serve your request at this time. Please contact webmaster";
                    //lblResult.ForeColor = System.Drawing.Color.Red;
                }
            }
        }

        protected void mailforsupplieroncancelltionapproved()
        {

            DataSet ds_mailconfig = objHotelStoreProcedure.get_emailConfig("FETCH_EMAIL_CONFIGURATION");

            DataSet ds_eventName = objHotelStoreProcedure.get_emailConfig("FETCH_EVENT_NAME_FOR_EMAIL");

            DataSet ds_mailTemplate = objHotelStoreProcedure.get_email_templaet_data("GET_EMAIL_DESCRIPTION_TO_SEND_EMAIL", ds_eventName.Tables[0].Rows[9]["AutoSearchResult"].ToString());

            if (ds_mailTemplate.Tables[0].Rows[1]["IS_ON"].ToString() != "False")
            {
                string smtpemail = ds_mailconfig.Tables[0].Rows[0]["SMTP_USERID"].ToString();
                string smtppass = ds_mailconfig.Tables[0].Rows[0]["SMTP_PASSWORD"].ToString();
                string smtphost = ds_mailconfig.Tables[0].Rows[0]["SMTP_HOST"].ToString();
                string smtpport = ds_mailconfig.Tables[0].Rows[0]["SMTP_PORT"].ToString();

                DataTable DTINVOICE = objHotelStoreProcedure.FECH_INVOICE_FROM_QUOTE(Session["updateid"].ToString());

                DataSet ds = objCancellationStoredProcedure.Get_Purchase_Voucher(DTINVOICE.Rows[0]["INVOICE_NO"].ToString());

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["SUPPLIER_TYPE_NAME"].ToString() == "Hotel")
                    {

                        DataSet ds_email = objCancellationStoredProcedure.Get_Supplier_Email(int.Parse(ds.Tables[0].Rows[i]["SUPPLIER_SR_NO"].ToString()));

                        SqlConnection connold = new SqlConnection(str);
                        connold.Open();
                        SqlCommand detailsold = new SqlCommand("FETCH_HOTEL_DETAILS_FOR_MAIL", connold);
                        detailsold.CommandType = CommandType.StoredProcedure;
                        detailsold.Parameters.Add("@QUOTE_ID", SqlDbType.Int).Value = int.Parse(Session["updateid"].ToString());
                        detailsold.Parameters.Add("@SUPPLIER_ID", SqlDbType.Int).Value = int.Parse(ds.Tables[0].Rows[i]["SUPPLIER_SR_NO"].ToString());
                        SqlDataReader rdrdetailsold = detailsold.ExecuteReader();
                        DataTable dt_hotelDetailsold = new DataTable();
                        dt_hotelDetailsold.Load(rdrdetailsold);

                        single_rooms = dt_hotelDetailsold.Rows[0]["SINGLE_ROOMS"].ToString();
                        double_rooms = dt_hotelDetailsold.Rows[0]["DOUBLE_ROOMS"].ToString();
                        tripal_rooms = dt_hotelDetailsold.Rows[0]["TRIPAL_ROOMS"].ToString();
                        room_type = dt_hotelDetailsold.Rows[0]["ROOM_TYPE_NAME"].ToString();
                        hotel_name = dt_hotelDetailsold.Rows[0]["CHAIN_NAME"].ToString();
                        pessanger_name = dt_hotelDetailsold.Rows[0]["CLIENT_NAME"].ToString();
                        check_in_date = dt_hotelDetailsold.Rows[0]["CHECK_IN_DATE"].ToString();
                        check_out_date = dt_hotelDetailsold.Rows[0]["CHECK_OUT_DATE"].ToString();

                        string fromemail_agent = "";
                        if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_boMail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Agent")
                            {
                                fromemail_agent = Session["email"].ToString();
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Backoffice")
                            {


                                fromemail_agent = "fitops@travelzunlimited.com";



                            }
                            else if (ds_mailTemplate.Tables[0].Rows[1]["FROM_ROLE_NAME"].ToString() == "Supplier")
                            {
                                fromemail_agent = ds_email.Tables[0].Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                            }
                            else
                            {

                                fromemail_agent = ds_boMail.Tables[0].Rows[0][0].ToString();
                            }

                        }


                        string toemail_agent = "";
                        if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Agent")
                            {
                                toemail_agent = Session["email"].ToString();
                            }
                            else if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Backoffice")
                            {

                                toemail_agent = "fitops@travelzunlimited.com";


                            }
                            else if (ds_mailTemplate.Tables[0].Rows[1]["TO_ROLE_NAME"].ToString() == "Supplier")
                            {
                                toemail_agent = ds_email.Tables[0].Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                            }

                            else
                            {

                                toemail_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                            }


                        }

                        string cc_agent = "";
                        if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Agent")
                            {
                                cc_agent = Session["email"].ToString();
                            }


                            else if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Backoffice")
                            {

                                cc_agent = "fitops@travelzunlimited.com";



                            }
                            else if (ds_mailTemplate.Tables[0].Rows[1]["CC_ROLE_NAME"].ToString() == "Supplier")
                            {
                                cc_agent = ds_email.Tables[0].Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                            }
                            else
                            {

                                cc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                            }
                        }

                        string bcc_agent = "";
                        if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() != "")
                        {
                            DataSet ds_Mail = objHotelStoreProcedure.get_email_adress_backoffice("FETCH_EMAIL_ADRESS_DEPARTMENT_VISE", ds_mailTemplate.Tables[0].Rows[0]["BCC_ROLE_NAME"].ToString());
                            if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Agent")
                            {
                                bcc_agent = Session["email"].ToString();
                            }


                            else if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Backoffice")
                            {



                                bcc_agent = "fitops@travelzunlimited.com";


                            }
                            else if (ds_mailTemplate.Tables[0].Rows[1]["BCC_ROLE_NAME"].ToString() == "Supplier")
                            {
                                bcc_agent = ds_email.Tables[0].Rows[0]["SUPPLIER_REL_EMAIL"].ToString();
                            }
                            else
                            {

                                bcc_agent = ds_Mail.Tables[0].Rows[0][0].ToString();
                            }
                        }


                        MailMessage message = new MailMessage();
                        message.From = new MailAddress(fromemail_agent);
                        message.To.Add(new MailAddress(toemail_agent.ToString()));

                        if (cc_agent != "")
                        {
                            message.CC.Add(new MailAddress(cc_agent.ToString()));
                        }
                        if (bcc_agent != "")
                        {
                            message.Bcc.Add(new MailAddress(bcc_agent.ToString()));
                        }



                        String mail_subject = ds_mailTemplate.Tables[0].Rows[1]["EMAIL_SUBJECT"].ToString();

                        message.Subject = mail_subject;

                        //   string bodyold = "";
                        //   bodyold = "Dear Reservation,<br><br> Please cancel the Below <br><br>" + hotel_name + " <br><br>Our Reference Number:" + EmailQoute_id + "<br>Name of the passenger :" + pessanger_name + "<br>Room Type:" + room_type + "<br>No of Single Rooms:" + single_rooms + "<br>No of Double Rooms:" + double_rooms + "<br>No of Triple Rooms:" + tripal_rooms + "<br>Check In Date : " + check_in_date + "<br>Check out Date :" + check_out_date + "<br><br>If in case of any requirement we will update you.<br> Best Reagrds <br>Travelz Unlmited";

                        string strEmailTemplate = ds_mailTemplate.Tables[0].Rows[1]["EMAIL_CONTENT"].ToString();
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%HOTEL_NAME%&gt;", hotel_name);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%QUOTE_ID%&gt;", Session["updateid"].ToString());
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%CLIENT_NAME%&gt;", pessanger_name);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%ROOM_TYPE%&gt;", room_type);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%SINGLE_ROOMS%&gt;", single_rooms);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%DOUBLE_ROOMS%&gt;", double_rooms);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%TRIPLE_ROOMS%&gt;", tripal_rooms);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%FROM_DATE%&gt;", check_in_date);
                        strEmailTemplate = strEmailTemplate.Replace("&lt;%TO_DATE%&gt;", check_out_date);


                        message.Body = strEmailTemplate;
                        message.IsBodyHtml = true;

                        SmtpClient client = new SmtpClient();
                        NetworkCredential info = new NetworkCredential(smtpemail, smtppass);
                        client.Credentials = info;
                        client.Host = smtphost;
                        client.Port = int.Parse(smtpport);
                        client.DeliveryMethod = SmtpDeliveryMethod.Network;
                        client.Send(message);


                        objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(Session["updateid"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 1);
                        objHotelStoreProcedure.insert_email_trail(int.Parse(ds_mailTemplate.Tables[0].Rows[1]["EMAIL_TEMPLATE_MASTER_ID"].ToString()), fromemail_agent, toemail_agent, cc_agent, bcc_agent, mail_subject, strEmailTemplate, int.Parse(Session["updateid"].ToString()), "", "", "", int.Parse(Session["usersid"].ToString()), 2);

                    }
                }
            }
        }

        #endregion

        #region payment date

        protected void btnpaymentdate_click(object sender, EventArgs e)
        {
            insert_update_transfer_payment_date();

            update_ss_bkk_date();

            update_ss_tp_pty_date();

            update_ss_tp_phu_date();

            update_ss_tp_kbv_date();

            update_ss_tp_usm_date();

            update_ss_tp_cnx_date();

            update_ss_tp_etc_date();

            update_ss_tp_s_date();

            update_ss_tp_sps_date();

            update_ss_tp_zz_date();




            Button8.Attributes.Add("style", "display:none");
            Button2.Visible = true;
            Master.DisplayMessage("Transfer Package & SightSeeing Confirmed Successfully.", "successMessage", 8000);
            UpdatePanel1.Update();
        }

        public void insert_update_transfer_payment_date()
        {
            

            foreach (GridViewRow item in GridView10.Rows)
            {
                RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                Label id = (Label)item.FindControl("lbltp_priceid");
                if (rbtn.Checked)
                {
                    instpid = id.Text;
                    Label tpid = (Label)item.FindControl("lbltp_priceid");
                    transferpackgeid = int.Parse(tpid.Text);
                    TextBox txtbkk = (TextBox)item.FindControl("txtduedate");
                    Label tp_fromtoid = (Label)item.FindControl("lbltp_detialid");
                    serivcecartid = service_cart_id;

                    packageid = transferpackgeid;
                    packageflag = "TRANSFER";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtbkk.Text, Session["updateid"].ToString());
                    break;

                }
            }
        }

        //BANGKOK
        public void update_ss_bkk_date()
        {

           
            foreach (GridViewRow item in GridView1.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_Bkkdate");
                    TextBox txtssbkk = (TextBox)item.FindControl("txtbkkssdate");

                    serivcecartid = service_cart_id;

                    packageid = 0;
                    packageflag = "SIGHT";
                    //time = timebkk.Text;
                    //date = datebkk.Text;
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;
                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtssbkk.Text, Session["updateid"].ToString());
                    //objHotelStoreProcedure.insert_update_sight_seeing(serivcecartid, packageid, packageflag, date, time, orderstatus, userid, txtmeal.Text, pack_name, "Bangkok", 0, sicpvt_flag.Text);
                }
            }

        }

        //PATTYA
        public void update_ss_tp_pty_date()
        {
            
            foreach (GridViewRow item in GV_Result.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");

                    TextBox txtpty = (TextBox)item.FindControl("txtptyssdate");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_PtynoofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList2");

                    serivcecartid = service_cart_id;

                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtpty.Text, Session["updateid"].ToString());
                }
            }


        }

        //PHUKET
        public void update_ss_tp_phu_date()
        {
           
            foreach (GridViewRow item in GridView2.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList3");
                    TextBox txtpty = (TextBox)item.FindControl("txtphussdate");
                    serivcecartid = service_cart_id;

                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;
                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtpty.Text, Session["updateid"].ToString());

                }


            }
        }

        //BKV
        public void update_ss_tp_kbv_date()
        {
           
            foreach (GridViewRow item in GridView3.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList4");
                    TextBox txtpty = (TextBox)item.FindControl("txtkbvssdate");

                    serivcecartid = service_cart_id;
                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;
                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtpty.Text, Session["updateid"].ToString());

                }

            }
        }

        //USM
        public void update_ss_tp_usm_date()
        {
          
            foreach (GridViewRow item in GridView4.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_usm_date");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList5");
                    TextBox txtpty = (TextBox)item.FindControl("txtusmssdate");
                    serivcecartid = service_cart_id;
                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;
                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtpty.Text, Session["updateid"].ToString());
                }
            }
        }

        //CNX
        public void update_ss_tp_cnx_date()
        {
           
            foreach (GridViewRow item in GridView5.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList6");
                    TextBox txtpty = (TextBox)item.FindControl("txtcnxssdate");

                    serivcecartid = service_cart_id;
                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;
                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtpty.Text, Session["updateid"].ToString());
                }

            }
        }

        //ETC
        public void update_ss_tp_etc_date()
        {

           
            foreach (GridViewRow item in GridView6.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList7");
                    TextBox txtpty = (TextBox)item.FindControl("txtetcssdate");

                    serivcecartid = service_cart_id;

                    packageid = 0;
                    packageflag = "SIGHT";

                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtpty.Text, Session["updateid"].ToString());
                }
            }
        }

        //SS
        public void update_ss_tp_s_date()
        {
           
            foreach (GridViewRow item in GridView7.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList8");
                    TextBox txtpty = (TextBox)item.FindControl("txtssssdate");
                    serivcecartid = service_cart_id;

                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtpty.Text, Session["updateid"].ToString());
                }
            }

        }

        //SPS
        public void update_ss_tp_sps_date()
        {
            

            foreach (GridViewRow item in GridView8.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList9");
                    TextBox txtpty = (TextBox)item.FindControl("txtspsssdate");
                    serivcecartid = service_cart_id;

                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtpty.Text, Session["updateid"].ToString());
                }
            }

        }

        //ZZ
        public void update_ss_tp_zz_date()
        {
           
            foreach (GridViewRow item in GridView9.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList10");
                    TextBox txtpty = (TextBox)item.FindControl("txtzzssdate");
                    serivcecartid = service_cart_id;

                    packageid = 0;
                    packageflag = "SIGHT";
                    orderstatus = Session["orderstatus"].ToString();
                    userid = int.Parse(usrid);
                    pack_name = packagename.Text;

                    objHotelStoreProcedure.updatetransferpackagefordate(packageflag, userid, txtpty.Text, Session["updateid"].ToString());

                }
            }


        }

        #endregion

        

        #region     ROOM TYPE VALIDAION
        /* Pattaya*/
        public void ddrpty_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Pattaya", ddrpty_HotelName.Text, ddrpty_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddrpty_HotelName.Text + " " + "for" + " " + ddrpty_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }

            if (flag == false)
            {
                ddrpty_RoomType.Text = "";
                upHotelPty.Update();
            }


        }

        /* Bangok*/
        public void ddrbkk_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Bangkok", ddrbkk_HotelName.Text, ddrbkk_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddrbkk_HotelName.Text + " " + "for" + " " + ddrbkk_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }

            if (flag == false)
            {
                ddrbkk_RoomType.Text = "";
                uphotelBkk.Update();
            }


        }

        /* Phuket*/
        public void ddrphu_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Phuket", ddrphu_HotelName.Text, ddrphu_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddrphu_HotelName.Text + " " + "for" + " " + ddrphu_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }

           

            if (flag == false)
            {
                ddrphu_RoomType.Text = "";
                upHotelPhuket.Update();
            }

        }

        /* Krabi*/
        public void ddrkbv_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Krabi", ddrkbv_HotelName.Text, ddrkbv_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddrkbv_HotelName.Text + " " + "for" + " " + ddrkbv_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }

         
            if (flag == false)
            {
                ddrkbv_RoomType.Text = "";
                upHotelkBV.Update();
            }


        }

        /*Samui*/
        public void ddrusm_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Samui", ddrusm_HotelName.Text, ddrusm_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddrusm_HotelName.Text + " " + "for" + " " + ddrusm_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }


            if (flag == false)
            {
                ddrusm_RoomType.Text = "";
                upHotelUsm.Update();
            }


        }

        /* Chiangmai */
        public void ddrcnx_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Chiangmai", ddrcnx_HotelName.Text, ddrcnx_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddrcnx_HotelName.Text + " " + "for" + " " + ddrcnx_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }

           
            if (flag == false)
            {
                ddrcnx_RoomType.Text = "";
                uphotelCnx.Update();
            }


        }

        /* Hua Hin */
        public void ddretc_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Hua Hin", ddretc_HotelName.Text, ddretc_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddretc_HotelName.Text + " " + "for" + " " + ddretc_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }

            if (flag == false)
            {
                ddretc_RoomType.Text = "";
                uphotelEtc.Update();
            }


        }

        /* Kanchanburi */
        public void ddrss_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Kanchanburi", ddrss_HotelName.Text, ddrss_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddrss_HotelName.Text + " " + "for" + " " + ddrss_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }

            if (flag == false)
            {
                ddrss_RoomType.Text = "";
                upHotelSS.Update();
            }


        }

        /* Chingrai */
        public void ddrsps_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Chingrai", ddrsps_HotelName.Text, ddrsps_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddrsps_HotelName.Text + " " + "for" + " " + ddrsps_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }

            if (flag == false)
            {
                ddrsps_RoomType.Text = "";
                upHotelSS.Update();
            }


        }

        /*Phi Phi IsLand*/
        public void ddrzz_RoomType_SelectedIndexChanged(Object sender, EventArgs e)
        {
            bool flag = true;
            DataSet ds = objHotelStoreProcedure.get_hotel_price("FETCH_ROOM_TYPE_FOR_FIT_HOTEL_WISE_VALIDATION", "Phi Phi Island", ddrzz_HotelName.Text, ddrzz_RoomType.Text, Session["fromdate"].ToString(), Session["todate"].ToString());

            if (Session["tripleroom"].ToString() != "")
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["TRIPLE_ROOM_RATE"].ToString() == null)
                    {
                        if (ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == "0.00" || ds.Tables[0].Rows[i]["EXTRA_ADULT_RATE"].ToString() == null)
                        {
                            string error_msg = "Triple room is not available in this" + " " + ddrzz_HotelName.Text + " " + "for" + " " + ddrzz_RoomType.Text + " " + " room type";
                            Master.DisplayMessage(error_msg, "successMessage", 5000);
                            flag = false;
                            break;
                        }
                    }
                }
            }

            if (flag == false)
            {
                ddrzz_RoomType.Text = "";
                uphotelZZ.Update();
            }


        }

        #endregion

        #region Additional Services

        #region hide show

        protected void btnadd2_Click(object sender, EventArgs e)
        {
            row2.Attributes.Add("style", "display");
            btnadd2.Attributes.Add("style", "display:none");
            btnadd3.Attributes.Add("style", "display");
            btnremove2.Attributes.Add("style", "display");
            UpdateAdditional.Update();
        }

        protected void btnadd3_Click(object sender, EventArgs e)
        {
            row3.Attributes.Add("style", "display");
            btnadd3.Attributes.Add("style", "display:none");
            btnremove2.Attributes.Add("style", "display:none");
            btnadd4.Attributes.Add("style", "display");
            btnremove3.Attributes.Add("style", "display");
            UpdateAdditional.Update();
        }

        protected void btnadd4_Click(object sender, EventArgs e)
        {

            row4.Attributes.Add("style", "display");
            btnadd4.Attributes.Add("style", "display:none");
            btnremove3.Attributes.Add("style", "display:none");
            btnadd5.Attributes.Add("style", "display");
            btnremove4.Attributes.Add("style", "display");
            UpdateAdditional.Update();
        }

        protected void btnadd5_Click(object sender, EventArgs e)
        {

            row5.Attributes.Add("style", "display");
            btnadd5.Attributes.Add("style", "display:none");
            btnremove4.Attributes.Add("style", "display:none");
            btnadd6.Attributes.Add("style", "display");
            btnremove5.Attributes.Add("style", "display");
            UpdateAdditional.Update();
        }

        protected void btnadd6_Click(object sender, EventArgs e)
        {
            row6.Attributes.Add("style", "display");
            btnadd6.Attributes.Add("style", "display:none");
            btnremove5.Attributes.Add("style", "display:none");
            btnadd7.Attributes.Add("style", "display");
            btnremove6.Attributes.Add("style", "display");
            UpdateAdditional.Update();
        }

        protected void btnadd7_Click(object sender, EventArgs e)
        {
            row7.Attributes.Add("style", "display");
            btnadd7.Attributes.Add("style", "display:none");
            btnremove6.Attributes.Add("style", "display:none");
            btnadd8.Attributes.Add("style", "display");
            btnremove7.Attributes.Add("style", "display");
            UpdateAdditional.Update();
        }

        protected void btnadd8_Click(object sender, EventArgs e)
        {

            row8.Attributes.Add("style", "display");
            btnadd8.Attributes.Add("style", "display:none");
            btnremove7.Attributes.Add("style", "display:none");
            btnadd9.Attributes.Add("style", "display");
            btnremove8.Attributes.Add("style", "display");
            UpdateAdditional.Update();
        }

        protected void btnadd9_Click(object sender, EventArgs e)
        {
            row9.Attributes.Add("style", "display");
            btnadd9.Attributes.Add("style", "display:none");
            btnremove8.Attributes.Add("style", "display:none");
            btnadd10.Attributes.Add("style", "display");
            btnremove9.Attributes.Add("style", "display");
            UpdateAdditional.Update();
        }

        protected void btnadd10_Click(object sender, EventArgs e)
        {
            row10.Attributes.Add("style", "display");
            btnremove9.Attributes.Add("style", "display:none");
            btnadd10.Attributes.Add("style", "display:none");
            btnremove10.Attributes.Add("style", "display");
            UpdateAdditional.Update();
        }


        protected void btnremove2_Click(object sender, EventArgs e)
        {
            row2.Attributes.Add("style", "display:none");
            btnadd2.Attributes.Add("style", "display");
            Row2_clear();
            btnadd3.Attributes.Add("style", "display:none");
            btnremove2.Attributes.Add("style", "display:none");
            UpdateAdditional.Update();
        }

        protected void btnremove3_Click(object sender, EventArgs e)
        {
            row3.Attributes.Add("style", "display:none");
            btnadd3.Attributes.Add("style", "display");
            btnadd4.Attributes.Add("style", "display:none");
            btnremove3.Attributes.Add("style", "display:none");
            btnremove2.Attributes.Add("style", "display");
            Row3_clear();
            UpdateAdditional.Update();
        }

        protected void btnremove4_Click(object sender, EventArgs e)
        {

            row4.Attributes.Add("style", "display:none");
            btnadd4.Attributes.Add("style", "display");
            btnadd5.Attributes.Add("style", "display:none");
            btnremove4.Attributes.Add("style", "display:none");
            btnremove3.Attributes.Add("style", "display");
            Row4_clear();
            UpdateAdditional.Update();
        }

        protected void btnremove5_Click(object sender, EventArgs e)
        {

            row5.Attributes.Add("style", "display:none");
            btnadd5.Attributes.Add("style", "display");
            btnadd6.Attributes.Add("style", "display:none");
            btnremove5.Attributes.Add("style", "display:none");
            btnremove4.Attributes.Add("style", "display");
            Row5_clear();
            UpdateAdditional.Update();
        }

        protected void btnremove6_Click(object sender, EventArgs e)
        {
            row6.Attributes.Add("style", "display:none");
            btnadd6.Attributes.Add("style", "display");
            btnadd7.Attributes.Add("style", "display:none");
            btnremove6.Attributes.Add("style", "display:none");
            btnremove5.Attributes.Add("style", "display");
            Row6_clear();
            UpdateAdditional.Update();
        }

        protected void btnremove7_Click(object sender, EventArgs e)
        {
            row7.Attributes.Add("style", "display:none");
            btnadd7.Attributes.Add("style", "display");
            btnadd8.Attributes.Add("style", "display:none");
            btnremove7.Attributes.Add("style", "display:none");
            btnremove6.Attributes.Add("style", "display");
            Row7_clear();
            UpdateAdditional.Update();
        }

        protected void btnremove8_Click(object sender, EventArgs e)
        {

            row8.Attributes.Add("style", "display:none");
            btnadd8.Attributes.Add("style", "display");
            btnadd9.Attributes.Add("style", "display:none");
            btnremove8.Attributes.Add("style", "display:none");
            btnremove7.Attributes.Add("style", "display");
            Row8_clear();
            UpdateAdditional.Update();
        }

        protected void btnremove9_Click(object sender, EventArgs e)
        {
            row9.Attributes.Add("style", "display:none");
            btnadd9.Attributes.Add("style", "display");
            btnadd10.Attributes.Add("style", "display:none");
            btnremove9.Attributes.Add("style", "display:none");
            btnremove8.Attributes.Add("style", "display");
            Row9_clear();
            UpdateAdditional.Update();
        }

        protected void btnremove10_Click(object sender, EventArgs e)
        {
            row10.Attributes.Add("style", "display:none");
            btnadd10.Attributes.Add("style", "display");
            btnremove10.Attributes.Add("style", "display:none");
            btnremove9.Attributes.Add("style", "display");
            Row10_clear();
            UpdateAdditional.Update();
        }

        #endregion

        protected void insert_update_additional_service(int tid, int qid)
        {
            if (DropDownList11.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox42.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox5.Text, DropDownList11.Text, TextBox42.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox43.Text, true, TextBox44.Text, TextBox45.Text, TextBox46.Text, TextBox47.Text, DropDownList2.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }

            }
            if (DropDownList12.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox7.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox6.Text, DropDownList12.Text, TextBox7.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox24.Text, true, TextBox25.Text, TextBox48.Text, TextBox49.Text, TextBox50.Text, DropDownList21.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }
            }
            if (DropDownList13.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox9.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox8.Text, DropDownList13.Text, TextBox9.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox26.Text, true, TextBox27.Text, TextBox51.Text, TextBox52.Text, TextBox53.Text, DropDownList22.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }
            }
            if (DropDownList14.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox11.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox10.Text, DropDownList14.Text, TextBox11.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox28.Text, true, TextBox29.Text, TextBox54.Text, TextBox55.Text, TextBox56.Text, DropDownList23.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }
            }
            if (DropDownList15.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox13.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox12.Text, DropDownList15.Text, TextBox13.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox30.Text, true, TextBox31.Text, TextBox57.Text, TextBox58.Text, TextBox59.Text, DropDownList24.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }
            }
            if (DropDownList16.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox15.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox14.Text, DropDownList16.Text, TextBox15.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox32.Text, true, TextBox33.Text, TextBox60.Text, TextBox61.Text, TextBox62.Text, DropDownList25.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }
            }
            if (DropDownList17.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox17.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox16.Text, DropDownList17.Text, TextBox17.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox34.Text, true, TextBox35.Text, TextBox63.Text, TextBox64.Text, TextBox65.Text, DropDownList26.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }
            }
            if (DropDownList18.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox19.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox18.Text, DropDownList18.Text, TextBox19.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox36.Text, true, TextBox37.Text, TextBox66.Text, TextBox67.Text, TextBox68.Text, DropDownList27.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }
            }
            if (DropDownList19.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox21.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox20.Text, DropDownList19.Text, TextBox21.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox38.Text, true, TextBox39.Text, TextBox69.Text, TextBox70.Text, TextBox71.Text, DropDownList28.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }
            }
            if (DropDownList20.Text != "")
            {
                try
                {
                    System.DateTime today = DateTime.ParseExact(TextBox23.Text, "dd/MM/yyyy", null);
                    objHotelStoreProcedure.insertupdate_Additional_Services_details(service_id, TextBox22.Text, DropDownList20.Text, TextBox23.Text, tid, qid, "Quoted", int.Parse(usrid), TextBox40.Text, true, TextBox41.Text, TextBox72.Text, TextBox73.Text, TextBox74.Text, DropDownList29.Text);
                }
                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                }
            }
        }

        #region ADDITIONAL SERVICE ROW CLEAR
        protected void Row2_clear()
        {
            TextBox6.Text = "";
            DropDownList12.Text = "";
            TextBox7.Text = "";
            TextBox24.Text = "";
            TextBox25.Text = "";
            TextBox48.Text = "";
            TextBox49.Text = "";
            TextBox50.Text = "";
        }

        protected void Row3_clear()
        {
            TextBox8.Text = "";
            DropDownList13.Text = "";
            TextBox9.Text = "";
            TextBox26.Text = "";
            TextBox27.Text = "";
            TextBox51.Text = "";
            TextBox52.Text = "";
            TextBox53.Text = "";
        }

        protected void Row4_clear()
        {
            TextBox10.Text = "";
            DropDownList14.Text = "";
            TextBox11.Text = "";
            TextBox28.Text = "";
            TextBox29.Text = "";
            TextBox54.Text = "";
            TextBox55.Text = "";
            TextBox56.Text = "";
        }

        protected void Row5_clear()
        {
            TextBox12.Text = "";
            DropDownList15.Text = "";
            TextBox13.Text = "";
            TextBox30.Text = "";
            TextBox31.Text = "";
            TextBox57.Text = "";
            TextBox59.Text = "";
            TextBox58.Text = "";
        }

        protected void Row6_clear()
        {
            TextBox14.Text = "";
            DropDownList16.Text = "";
            TextBox15.Text = "";
            TextBox32.Text = "";
            TextBox33.Text = "";
            TextBox60.Text = "";
            TextBox62.Text = "";
            TextBox61.Text = "";
        }

        protected void Row7_clear()
        {
            TextBox16.Text = "";
            DropDownList17.Text = "";
            TextBox17.Text = "";
            TextBox34.Text = "";
            TextBox35.Text = "";
            TextBox63.Text = "";
            TextBox65.Text = "";
            TextBox64.Text = "";
        }

        protected void Row8_clear()
        {
            TextBox18.Text = "";
            DropDownList18.Text = "";
            TextBox19.Text = "";
            TextBox36.Text = "";
            TextBox37.Text = "";
            TextBox66.Text = "";
            TextBox68.Text = "";
            TextBox67.Text = "";
        }

        protected void Row9_clear()
        {
            TextBox20.Text = "";
            DropDownList19.Text = "";
            TextBox21.Text = "";
            TextBox38.Text = "";
            TextBox39.Text = "";
            TextBox69.Text = "";
            TextBox71.Text = "";
            TextBox70.Text = "";
        }

        protected void Row10_clear()
        {
            TextBox22.Text = "";
            DropDownList20.Text = "";
            TextBox23.Text = "";
            TextBox40.Text = "";
            TextBox41.Text = "";
            TextBox72.Text = "";
            TextBox73.Text = "";
            TextBox74.Text = "";

        }
        #endregion

        #region date validation

        protected void TextBox42_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox42.Text, "dd/MM/yyyy", null);
                if (TextBox42.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox42.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox42.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {

                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }

        protected void TextBox7_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox7.Text, "dd/MM/yyyy", null);
                if (TextBox7.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox7.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox7.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {

                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }

        protected void TextBox9_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox9.Text, "dd/MM/yyyy", null);
                if (TextBox42.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox42.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox42.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {

                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }

        protected void TextBox11_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox11.Text, "dd/MM/yyyy", null);
                if (TextBox11.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox11.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox11.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {

                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }

        protected void TextBox13_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox13.Text, "dd/MM/yyyy", null);
                if (TextBox13.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox13.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox13.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {
                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }

        protected void TextBox15_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox15.Text, "dd/MM/yyyy", null);
                if (TextBox15.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox15.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox15.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {
                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }

        protected void TextBox17_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox17.Text, "dd/MM/yyyy", null);
                if (TextBox17.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox17.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox17.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {
                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }

        protected void TextBox19_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox19.Text, "dd/MM/yyyy", null);
                if (TextBox19.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox19.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox19.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {
                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }

        protected void TextBox21_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox21.Text, "dd/MM/yyyy", null);
                if (TextBox21.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox21.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox21.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {
                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }
        protected void TextBox23_TextChanged(object sender, EventArgs e)
        {
            try
            {
                System.DateTime today = DateTime.ParseExact(TextBox23.Text, "dd/MM/yyyy", null);
                if (TextBox23.Text == "")
                {
                    Master.DisplayMessage("Check-In date is required", "successMessage", 8000);
                }
                else if ((DateTime.ParseExact(TextBox23.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(TextBox23.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                {
                    Master.DisplayMessage("Date Must be Within Hotel Check-In And Check-Out Date.", "successMessage", 8000);
                }
                else
                {
                }
            }
            catch
            {
                Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
            }
        }

        #endregion

        #endregion

        protected void Button9_click(object sender, EventArgs e)
        {
            DataSet ds_addservice = objHotelStoreProcedure.fetch_additional_service(Session["updateid"].ToString(), Session["tour"].ToString());
            int count = ds_addservice.Tables[0].Rows.Count;

            for (int i = 0; i < count; i++)
            {
                if (i == 0)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate1.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }

                if (i == 1)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate2.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }

                if (i == 2)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate3.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }

                if (i == 3)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate4.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }

                if (i == 4)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate5.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }

                if (i == 5)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate6.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }

                if (i == 6)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate7.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }

                if (i == 7)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate8.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }

                if (i == 8)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate9.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }

                if (i == 9)
                {
                    objHotelStoreProcedure.insert_payment_date_additional_services(txt_duedate10.Text, int.Parse(ds_addservice.Tables[0].Rows[i]["ADDITIONAL_SERVICE_CART_ID"].ToString()));
                }
            }
            Button9.Attributes.Add("style", "display:none");
            Master.DisplayMessage("Additional Services Confirmed Successfully.", "successMessage", 8000);
            UpdatePanel1.Update();
        }

        public void SendEmail()
        {
            // be sure to import: using System.Web.Mail;
            MailMessage msg = new MailMessage();

        }

        public static string FormatEmail(string messageToFormat, string TOURNAME, string AGENTNAME)
        {
            // replace all placeholders with the dynamic information

            messageToFormat = messageToFormat.Replace("&lt;%TOURNAME%&gt;", TOURNAME);
            messageToFormat = messageToFormat.Replace("&lt;%AGENTNAME%&gt;", AGENTNAME);
           
            return messageToFormat;
        }

      

        public MulticheckDropdown DDL1 { get; set; }

        public MulticheckDropdown DDL2 { get; set; }

        public MulticheckDropdown DDL3 { get; set; }

        public MulticheckDropdown DDL4 { get; set; }

        public MulticheckDropdown DDL5 { get; set; }

        public MulticheckDropdown DDL6 { get; set; }

        public MulticheckDropdown DDL7 { get; set; }

        public MulticheckDropdown DDL8 { get; set; }

        public MulticheckDropdown DDL9 { get; set; }

        public MulticheckDropdown DDL10 { get; set; }

        #region Site Seeing Validaton For MultiCheck Dropdown

        protected void SiteSeeingValidatonForMultiCheckDropdown()
        {
            foreach (GridViewRow item in GridView1.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_Bkkdate");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_Bkk_noofMeals");
                    DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                    Label meal = (Label)item.FindControl("lblbkk_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC1.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');

                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }

                    }
                }
            }

            foreach (GridViewRow item in GV_Result.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");

                    TextBox datebkk = (TextBox)item.FindControl("txtSS_Ptydate");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_PtynoofMeals");
                    DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                    Label meal = (Label)item.FindControl("lblpty_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC2.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');
                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }

                    }
                }
            }



            foreach (GridViewRow item in GridView2.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_phuketdate");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList3");
                    DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                    Label meal = (Label)item.FindControl("lblphu_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC3.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');
                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }

                    }
                }
            }


            foreach (GridViewRow item in GridView3.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_kbv_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList4");
                    DDL4 = (MulticheckDropdown)item.FindControl("DDL4");
                    Label meal = (Label)item.FindControl("lblkbv_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC4.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');
                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }

                    }
                }
            }


            foreach (GridViewRow item in GridView4.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_usm_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_usm_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList5");
                    DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                    Label meal = (Label)item.FindControl("lblusm_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC5.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');
                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }

                    }
                }
            }

            foreach (GridViewRow item in GridView5.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_cnx_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList6");
                    DDL6 = (MulticheckDropdown)item.FindControl("DDL6");

                    Label meal = (Label)item.FindControl("lblcnx_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC6.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');
                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }

                    }
                }
            }


            foreach (GridViewRow item in GridView6.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_etc_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList7");
                    DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                    Label meal = (Label)item.FindControl("lbletc_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC7.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');
                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }
                    }
                }

            }
            foreach (GridViewRow item in GridView7.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_s_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList8");
                    DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                    Label meal = (Label)item.FindControl("lblss_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC8.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');
                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }

                    }
                }
            }
            foreach (GridViewRow item in GridView8.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_sps_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList9");
                    DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                    Label meal = (Label)item.FindControl("lblsps_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC9.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');
                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }

                    }
                }
            }
            foreach (GridViewRow item in GridView9.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_zz_date");
                    DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
                    DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList10");
                    DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                    Label meal = (Label)item.FindControl("lblzz_meal");
                    if (meal.Text == "0" || meal.Text == "" || meal.Text == "False")
                    { }
                    else
                    {
                        if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str1 = DDC10.GetCheckBoxValues(); ;
                            string[] words = str1.Split(',');
                            if (words[0].ToString() == "")
                            {
                                if (words.Length != int.Parse(txtmeal.Text))
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }
                            else
                            {
                                if (words.Length != int.Parse(txtmeal.Text) - 1)
                                {
                                    int dates = int.Parse(txtmeal.Text) - 1;
                                    dropdown_flag = false;
                                    ViewState["errormessage"] = "Select " + dates + " Meal dates for " + packagename.Text;
                                }
                            }

                        }

                    }
                }
            }
        }

        protected void SiteSeeing_LunchDinner_Validation()
        {
            // -------------------------------------- Bangkok ---------------------------------------------------

            #region Bangkok Meal validation

            foreach (GridViewRow item in GridView1.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_Bkkdate");
                    DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                    string str1 = DDC1.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView1.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_bkk_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_Bkk_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_Bkkdate");
                            DDL1 = (MulticheckDropdown)item1.FindControl("DDL1");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    DDL1 = (MulticheckDropdown)item1.FindControl("DDL1");
                                    string str = DDC1.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView1.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_bkk_select");
                            Label id1 = (Label)item1.FindControl("lbltp_priceid");
                            Label packagename1 = (Label)item1.FindControl("lblSS_Bkk_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_Bkkdate");
                            DDL1 = (MulticheckDropdown)item1.FindControl("DDL1");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    DDL1 = (MulticheckDropdown)item1.FindControl("DDL1");
                                    string str = DDC1.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            // -------------------------------------- Pattaya ---------------------------------------------------

            #region Pattaya Meal validation

            foreach (GridViewRow item in GV_Result.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_Ptydate");
                    DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                    string str1 = DDC2.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GV_Result.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_pty_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_PtypackageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_Ptydate");
                            DDL2 = (MulticheckDropdown)item1.FindControl("DDL2");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    DDL2 = (MulticheckDropdown)item1.FindControl("DDL2");
                                    string str = DDC2.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GV_Result.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_pty_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_PtypackageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_Ptydate");
                            DDL2 = (MulticheckDropdown)item1.FindControl("DDL2");

                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    DDL2 = (MulticheckDropdown)item1.FindControl("DDL2");
                                    string str = DDC2.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            // -------------------------------------- Phuket ----------------------------------------------------

            #region Phuket Meal validation

            foreach (GridViewRow item in GridView2.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_phuketdate");
                    DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                    string str1 = DDC3.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView2.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_phu_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_phuketpackageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_phuketdate");
                            DDL3 = (MulticheckDropdown)item1.FindControl("DDL3");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    string str = DDC3.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView2.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_phu_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_phuketpackageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_phuketdate");
                            DDL3 = (MulticheckDropdown)item1.FindControl("DDL3");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    string str = DDC3.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            //--------------------------------------- kbv -------------------------------------------------------

            #region Kbv Meal validation

            foreach (GridViewRow item in GridView3.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_kbv_date");
                    DDL4 = (MulticheckDropdown)item.FindControl("DDL4");
                    string str1 = DDC4.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView3.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_kbv_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_kbv_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_kbv_date");
                            DDL4 = (MulticheckDropdown)item1.FindControl("DDL4");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    string str = DDC4.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView3.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_kbv_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_kbv_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_kbv_date");
                            DDL4 = (MulticheckDropdown)item1.FindControl("DDL4");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    string str = DDC4.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            //--------------------------------------- Samui -----------------------------------------------------

            #region Samui Meal validation

            foreach (GridViewRow item in GridView4.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_usm_date");
                    DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                    string str1 = DDC5.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView4.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_usm_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_usm_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_usm_date");
                            DDL5 = (MulticheckDropdown)item1.FindControl("DDL5");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    string str = DDC5.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView4.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_usm_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_usm_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_usm_date");
                            DDL5 = (MulticheckDropdown)item1.FindControl("DDL5");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    string str = DDC5.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            //--------------------------------------- Cnx --------------------------------------------------------

            #region Cnx Meal validation

            foreach (GridViewRow item in GridView5.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_cnx_date");
                    DDL6 = (MulticheckDropdown)item.FindControl("DDL6");
                    string str1 = DDC6.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView5.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_cnx_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_cnx_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_cnx_date");
                            DDL6 = (MulticheckDropdown)item1.FindControl("DDL6");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    DDL6 = (MulticheckDropdown)item1.FindControl("DDL6");
                                    string str = DDC6.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView5.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_cnx_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_cnx_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_cnx_date");
                            DDL6 = (MulticheckDropdown)item1.FindControl("DDL6");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    DDL6 = (MulticheckDropdown)item1.FindControl("DDL6");
                                    string str = DDC6.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            //--------------------------------------- etc --------------------------------------------------------

            #region Etc Meal validation

            foreach (GridViewRow item in GridView6.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_etc_date");
                    DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                    string str1 = DDC7.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView6.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_etc_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_etc_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_etc_date");
                            DDL7 = (MulticheckDropdown)item1.FindControl("DDL7");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    string str = DDC7.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView6.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_etc_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_etc_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_etc_date");
                            DDL7 = (MulticheckDropdown)item1.FindControl("DDL7");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    string str = DDC7.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            //--------------------------------------- ss ---------------------------------------------------------

            #region Ss Meal validation

            foreach (GridViewRow item in GridView7.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_s_date");
                    DDL8 = (MulticheckDropdown)item.FindControl("DDL8");
                    string str1 = DDC8.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView7.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_s_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_s_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_s_date");
                            DDL8 = (MulticheckDropdown)item1.FindControl("DDL8");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    string str = DDC8.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView7.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_s_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_s_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_s_date");
                            DDL8 = (MulticheckDropdown)item1.FindControl("DDL8");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    string str = DDC8.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            //--------------------------------------- Sps --------------------------------------------------------

            #region Sps Meal validation

            foreach (GridViewRow item in GridView8.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_sps_date");
                    DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                    string str1 = DDC9.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView8.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_sps_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_sps_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_sps_date");
                            DDL9 = (MulticheckDropdown)item1.FindControl("DDL9");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    string str = DDC9.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView8.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_sps_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_sps_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_sps_date");
                            DDL9 = (MulticheckDropdown)item1.FindControl("DDL9");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    string str = DDC9.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            //--------------------------------------- Zz ---------------------------------------------------------

            #region ZZ

            foreach (GridViewRow item in GridView9.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                    TextBox t1 = (TextBox)item.FindControl("txtSS_zz_date");
                    DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                    string str1 = DDC10.GetCheckBoxValues();
                    string[] words = str1.Split(',');
                    if (packagename.Text == "Dinner at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView9.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_zz_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_zz_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_zz_date");
                            DDL10 = (MulticheckDropdown)item1.FindControl("DDL10");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Dinner at Indian Restaurant without transfers")
                                {
                                    string str = DDC10.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (packagename.Text == "Lunch at Indian Restaurant with transfers")
                    {
                        foreach (GridViewRow item1 in GridView9.Rows)
                        {
                            CheckBox rbtn1 = (CheckBox)item1.FindControl("cb_zz_select");
                            Label packagename1 = (Label)item1.FindControl("lblSS_zz_packageDetails");
                            TextBox time1 = (TextBox)item1.FindControl("txtSS_zz_date");
                            DDL10 = (MulticheckDropdown)item1.FindControl("DDL10");
                            if (rbtn1.Checked)
                            {
                                if (packagename1.Text == "Lunch at Indian Restaurant without transfers")
                                {
                                    string str = DDC10.GetCheckBoxValues();
                                    string[] words1 = str.Split(',');
                                    for (int i = 0; i < words1.Length; i++)
                                    {
                                        if (t1.Text == time1.Text)
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else if (t1.Text == words1[i])
                                        {
                                            dropdown_flag = false;
                                            ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                            break;
                                        }
                                        else
                                        {
                                            for (int j = 0; j < words.Length; j++)
                                            {
                                                if (time1.Text == words[j].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                                else if (words[j].ToString() == words1[i].ToString())
                                                {
                                                    dropdown_flag = false;
                                                    ViewState["errormessage"] = "Dates should not be Same for " + packagename1.Text + " & " + packagename.Text;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion
        }

        #endregion

        public void checkboxes_of_hotels()
        {
            try
            {
                DataTable dt = objHotelStoreProcedure.fetchpacageid(package_id);
                if (dt.Rows.Count > 1 &&  (Session["orderstatus"].ToString() == "Quoted" || Session["orderstatus"].ToString() == "In Process"))
                {
                    DataSet ds_fit_pack_type = objBookingFitStoreProcedure.fetchComboData("FETCH_FIT_PACKAGE_TYPE");
                    if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[0]["AutoSearchResult"].ToString())
                    {
                        Td1.Attributes.Add("style", "display");
                        Td2.Attributes.Add("style", "display");
                        Td3.Attributes.Add("style", "display");
                        Td4.Attributes.Add("style", "display");
                        Td5.Attributes.Add("style", "display");
                        Td6.Attributes.Add("style", "display");
                        Td7.Attributes.Add("style", "display");
                        Td8.Attributes.Add("style", "display");
                        Td9.Attributes.Add("style", "display");
                        Td10.Attributes.Add("style", "display");
                        Td11.Attributes.Add("style", "display");
                        Td12.Attributes.Add("style", "display");
                        Td13.Attributes.Add("style", "display");
                        Td14.Attributes.Add("style", "display");
                        Td15.Attributes.Add("style", "display");
                        Td16.Attributes.Add("style", "display");
                        Td17.Attributes.Add("style", "display");
                        Td18.Attributes.Add("style", "display");
                        Td19.Attributes.Add("style", "display");
                        Td20.Attributes.Add("style", "display");
                    }
                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[1]["AutoSearchResult"].ToString())
                    {
                        Td1.Attributes.Add("style", "display");
                        Td2.Attributes.Add("style", "display");
                        Td3.Attributes.Add("style", "display");
                        Td4.Attributes.Add("style", "display");
                        Td5.Attributes.Add("style", "display");
                        Td6.Attributes.Add("style", "display");
                        Td7.Attributes.Add("style", "display");
                        Td8.Attributes.Add("style", "display");
                        Td9.Attributes.Add("style", "display");
                        Td10.Attributes.Add("style", "display");
                        Td11.Attributes.Add("style", "display");
                        Td12.Attributes.Add("style", "display");
                        Td13.Attributes.Add("style", "display");
                        Td14.Attributes.Add("style", "display");
                        Td15.Attributes.Add("style", "display");
                        Td16.Attributes.Add("style", "display");
                        Td17.Attributes.Add("style", "display");
                        Td18.Attributes.Add("style", "display");
                        Td19.Attributes.Add("style", "display");
                        Td20.Attributes.Add("style", "display");
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[2]["AutoSearchResult"].ToString())
                    {

                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[3]["AutoSearchResult"].ToString())
                    {

                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[4]["AutoSearchResult"].ToString())
                    {
                        Td1.Attributes.Add("style", "display");
                        Td2.Attributes.Add("style", "display");
                        Td3.Attributes.Add("style", "display");
                        Td4.Attributes.Add("style", "display");
                        Td5.Attributes.Add("style", "display");
                        Td6.Attributes.Add("style", "display");
                        Td7.Attributes.Add("style", "display");
                        Td8.Attributes.Add("style", "display");
                        Td9.Attributes.Add("style", "display");
                        Td10.Attributes.Add("style", "display");
                        Td11.Attributes.Add("style", "display");
                        Td12.Attributes.Add("style", "display");
                        Td13.Attributes.Add("style", "display");
                        Td14.Attributes.Add("style", "display");
                        Td15.Attributes.Add("style", "display");
                        Td16.Attributes.Add("style", "display");
                        Td17.Attributes.Add("style", "display");
                        Td18.Attributes.Add("style", "display");
                        Td19.Attributes.Add("style", "display");
                        Td20.Attributes.Add("style", "display");
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[5]["AutoSearchResult"].ToString())
                    {
                        Td1.Attributes.Add("style", "display");
                        Td2.Attributes.Add("style", "display");
                        Td3.Attributes.Add("style", "display");
                        Td4.Attributes.Add("style", "display");
                        Td5.Attributes.Add("style", "display");
                        Td6.Attributes.Add("style", "display");
                        Td7.Attributes.Add("style", "display");
                        Td8.Attributes.Add("style", "display");
                        Td9.Attributes.Add("style", "display");
                        Td10.Attributes.Add("style", "display");
                        Td11.Attributes.Add("style", "display");
                        Td12.Attributes.Add("style", "display");
                        Td13.Attributes.Add("style", "display");
                        Td14.Attributes.Add("style", "display");
                        Td15.Attributes.Add("style", "display");
                        Td16.Attributes.Add("style", "display");
                        Td17.Attributes.Add("style", "display");
                        Td18.Attributes.Add("style", "display");
                        Td19.Attributes.Add("style", "display");
                        Td20.Attributes.Add("style", "display");
                    }

                    else if (Session["fit_select_type"].ToString() == ds_fit_pack_type.Tables[0].Rows[6]["AutoSearchResult"].ToString())
                    {

                    }

                }
            }
            catch
            {

            }
            finally
            {
                uphotelBkk.Update();
                uphotelCnx.Update();
                uphotelEtc.Update();
                upHotelkBV.Update();
                upHotelPhuket.Update();
                upHotelPty.Update();
                uphotelsps.Update();
                upHotelSS.Update();
                upHotelUsm.Update();
                uphotelZZ.Update();
            }

        }

        protected void roomValidation_onDate_Conflicts()
        {
            cityname = "";
            DataSet ds_fit_pack_type = objBookingFitStoreProcedure.fetchComboData("FETCH_FIT_PACKAGE_TYPE");
            DataTable dt = objHotelStoreProcedure.fetchpacageid(package_id);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                cityname += "," + dt.Rows[i]["CITY_NAME"].ToString();
            }



            string str1 = cityname;
            string[] words = str1.Split(',');

            foreach (string word in words)
            {
                // BANGKOK
                if (word == "Bangkok")
                {
                    if (ddrbkk_HotelName.Text != "" && ddrbkk_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtbkk_CheckIn.Text;
                        string txtperiod_stay_to = txtbkk_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddrbkk_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddrbkk_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddrbkk_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "on" + " " + ddrbkk_HotelName.Text + " " + "Hotel";
                                break;
                            }
                        }
                    }
                }

                // PATTAYA
                if (word == "Pattaya")
                {
                    if (ddrpty_HotelName.Text != "" && ddrpty_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtpty_CheckIn.Text;
                        string txtperiod_stay_to = txtpty_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddrpty_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddrpty_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddrpty_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "on" + " " + ddrpty_HotelName.Text + " " + "Hotel";
                                break;
                            }
                        }
                    }
                }

                // PHUKET
                if (word == "Phuket")
                {
                    if (ddrphu_HotelName.Text != "" && ddrphu_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtphu_CheckIn.Text;
                        string txtperiod_stay_to = txtphu_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddrphu_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddrphu_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddrphu_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "on" + " " + ddrphu_HotelName.Text + " " + "Hotel";
                                break;
                            }
                        }
                    }
                }

                // KRABI
                if (word == "Krabi")
                {
                    if (ddrkbv_HotelName.Text != "" && ddrkbv_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtkbv_CheckIn.Text;
                        string txtperiod_stay_to = txtkbv_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddrkbv_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddrkbv_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddrkbv_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "on" + " " + ddrkbv_HotelName.Text + " " + "Hotel";
                                break;
                            }
                        }
                    }
                }

                // SAMUI
                if (word == "Samui")
                {
                    if (ddrusm_HotelName.Text != "" && ddrusm_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtusm_CheckIn.Text;
                        string txtperiod_stay_to = txtusm_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddrusm_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddrusm_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddrusm_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "on" + " " + ddrusm_HotelName.Text + " " + "Hotel";
                                break;
                            }
                        }
                    }
                }

                // CHIANGMAI
                if (word == "Chiangmai")
                {
                    if (ddrcnx_HotelName.Text != "" && ddrcnx_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtcnx_CheckIn.Text;
                        string txtperiod_stay_to = txtcnx_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddrcnx_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddrcnx_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddrcnx_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "on" + " " + ddrcnx_HotelName.Text + " " + "Hotel";
                                break;
                            }
                        }
                    }
                }

                // HUA HIN
                if (word == "Hua Hin")
                {
                    if (ddretc_HotelName.Text != "" && ddretc_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtetc_CheckIn.Text;
                        string txtperiod_stay_to = txtetc_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddretc_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddretc_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddretc_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "on" + " " + ddretc_HotelName.Text + " " + "Hotel";
                                break;
                            }
                        }
                    }
                }

                // KANCHANBURI
                if (word == "Kanchanburi")
                {
                    if (ddrss_HotelName.Text != "" && ddrss_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtss_CheckIn.Text;
                        string txtperiod_stay_to = txtss_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddrss_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddrss_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddrss_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "on" + " " + ddrss_HotelName.Text + " " + "Hotel";
                                break;
                            }
                        }
                    }
                }

                // CHINGRAI
                if (word == "Chingrai")
                {
                    if (ddrsps_HotelName.Text != "" && ddrsps_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtsps_CheckIn.Text;
                        string txtperiod_stay_to = txtsps_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddrsps_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddrsps_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddrsps_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "of" + " " + ddrsps_HotelName.Text;
                                break;
                            }
                        }
                    }
                }

                // PHI PHI ISLAND
                if (word == "Phi Phi Island")
                {
                    if (ddrzz_HotelName.Text != "" && ddrzz_RoomType.Text != "")
                    {
                        string txtperiod_stay_from = txtzz_CheckIn.Text;
                        string txtperiod_stay_to = txtzz_CheckOut.Text;
                        DateTime date1 = DateTime.ParseExact(txtperiod_stay_from, "dd/MM/yyyy", null);
                        DateTime date2 = DateTime.ParseExact(txtperiod_stay_to, "dd/MM/yyyy", null);
                        TimeSpan ts;
                        ts = date2.Subtract(date1.Date);
                        string txtno_of_nights = ts.TotalDays.ToString();

                        for (int night = 0; night < int.Parse(txtno_of_nights) + 1; night++)
                        {
                            DateTime dat = DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null);
                            dat = dat.AddDays(night);
                            string date = dat.ToString("dd/MM/yyyy");

                            DataSet ds_RoomTypes = objHotelStoreProcedure.fetch_RoomTypeValidation(ddrzz_HotelName.Text, date);

                            for (int i = 0; i < ds_RoomTypes.Tables[0].Rows.Count; i++)
                            {
                                if (ddrzz_RoomType.Text == ds_RoomTypes.Tables[0].Rows[i]["AutoSearchResult"].ToString())
                                {


                                    room_flag_conflict = true;
                                    break;
                                }
                                else
                                {
                                    room_flag_conflict = false;
                                }
                            }

                            if (room_flag_conflict == false)
                            {
                                ViewState["errormessage_conflict"] = "Room Type" + " " + ddrzz_RoomType.Text + " " + "is not available for dates" + " " + date + " " + "of" + " " + ddrzz_HotelName.Text;
                                break;
                            }
                        }
                    }
                }
            }
        }

        protected void btnRemoveTp_Click(object sender, EventArgs e)
        {
            foreach (GridViewRow item in GridView10.Rows)
            {
                RadioButton rb = (RadioButton)item.FindControl("rbtnTPselect");
                if (rb.Checked)
                {
                    rb.Checked = false;
                }
            }
            Session["valid"] = null;
            uptransferPackage.Update();
        }

        /*5th November :- Change of dates....*/
        protected void DateChange()
        {
            string str1 = cityname;
            string[] words = str1.Split(',');

            foreach (string word in words)
            {
                if (word == "Pattaya")
                {

                    if (package_id == 6)
                    {
                        txtpty_CheckOut.Text = Session["todate"].ToString();

                        txtpty_CheckIn.Enabled = false;
                        txtpty_CheckOut.Enabled = false;
                    }
                    else
                    {
                        txtpty_CheckIn.Text = Session["fromdate"].ToString();
                        txtpty_CheckOut.Text = Session["todate"].ToString();

                        txtpty_CheckIn.Enabled = false;
                        txtpty_CheckOut.Enabled = false;
                    }
                    UpdatePanelsUpdate();


                }

                if (word == "Phuket")
                {
                    if (package_id == 33 || package_id == 34)
                    {
                        txtphu_CheckOut.Text = Session["todate"].ToString();

                        txtpty_CheckIn.Enabled = false;
                        txtpty_CheckOut.Enabled = false;
                    }
                    else if (txtpty_CheckIn.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = Session["todate"].ToString();
                      
                    }
                    else
                    {
                        txtphu_CheckIn.Text = Session["fromdate"].ToString();
                        txtphu_CheckOut.Text = Session["todate"].ToString();

                    }
                    UpdatePanelsUpdate();

                }

                if (word == "Krabi")
                {

                    if (package_id == 33)
                    {
                        txtkbv_CheckIn.Text = Session["fromdate"].ToString();

                        txtkbv_CheckIn.Enabled = false;

                    }
                    else if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                       
                        txtkbv_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtkbv_CheckIn.Text = Session["fromdate"].ToString();
                        txtkbv_CheckOut.Text = Session["todate"].ToString();

                        txtkbv_CheckIn.Enabled = false;
                        txtkbv_CheckOut.Enabled = false;
                    }
                    UpdatePanelsUpdate();

                }

                if (word == "Samui")
                {
                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";


                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtusm_CheckIn.Text = Session["fromdate"].ToString();
                        txtusm_CheckOut.Text = Session["todate"].ToString();

                        txtusm_CheckIn.Enabled = false;
                        txtusm_CheckOut.Enabled = false;
                    }
                    UpdatePanelsUpdate();

                }

                if (word == "Chiangmai")
                {

                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                       
                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtcnx_CheckIn.Text = Session["fromdate"].ToString();
                        txtcnx_CheckOut.Text = Session["todate"].ToString();

                        txtcnx_CheckIn.Enabled = false;
                        txtcnx_CheckOut.Enabled = false;
                    }

                    UpdatePanelsUpdate();

                }

                if (word == "Hua Hin")
                {
                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                       
                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = "";
                        txtetc_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtetc_CheckIn.Text = Session["fromdate"].ToString();
                        txtetc_CheckOut.Text = Session["todate"].ToString();

                        txtetc_CheckIn.Enabled = false;
                        txtetc_CheckOut.Enabled = false;
                    }
                    UpdatePanelsUpdate();
                }

                if (word == "Kanchanburi")
                {
                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "" || txtetc_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                       
                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = "";
                        txtetc_CheckOut.Text = "";
                        txtss_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtss_CheckIn.Text = Session["fromdate"].ToString();
                        txtss_CheckOut.Text = Session["todate"].ToString();

                        txtss_CheckIn.Enabled = false;
                        txtss_CheckOut.Enabled = false;
                    }
                    UpdatePanelsUpdate();
                }

                if (word == "Chingrai")
                {

                    if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "" || txtetc_CheckOut.Text != "" || txtss_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                        
                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = "";
                        txtetc_CheckOut.Text = "";
                        txtss_CheckOut.Text = "";
                        txtsps_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtsps_CheckIn.Text = Session["fromdate"].ToString();
                        txtsps_CheckOut.Text = Session["todate"].ToString();

                        txtsps_CheckIn.Enabled = false;
                        txtsps_CheckOut.Enabled = false;
                    }
                    UpdatePanelsUpdate();
                }

                if (word == "Phi Phi Island")
                {
                    if (package_id == 34)
                    {
                        txtzz_CheckIn.Text = Session["fromdate"].ToString();
                        txtzz_CheckIn.Enabled = false;
                    }
                    else if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "" || txtetc_CheckOut.Text != "" || txtss_CheckOut.Text != "" || txtsps_CheckOut.Text != "")
                    {
                        txtpty_CheckOut.Text = "";
                        txtphu_CheckOut.Text = "";

                        
                        txtkbv_CheckOut.Text = "";
                        txtusm_CheckOut.Text = "";
                        txtcnx_CheckOut.Text = "";
                        txtetc_CheckOut.Text = "";
                        txtss_CheckOut.Text = "";
                        txtsps_CheckOut.Text = "";
                        txtzz_CheckOut.Text = Session["todate"].ToString();

                    }
                    else
                    {
                        txtzz_CheckIn.Text = Session["fromdate"].ToString();
                        txtzz_CheckOut.Text = Session["todate"].ToString();
                    }
                    UpdatePanelsUpdate();
                }
                if (word == "Bangkok")
                {
                    if (package_id == 6)
                    {
                        txtbkk_CheckIn.Text = Session["fromdate"].ToString();
                        txtbkk_CheckIn.Enabled = false;
                    }
                    else
                    {
                        if (txtpty_CheckIn.Text != "" || txtphu_CheckIn.Text != "" || txtkbv_CheckOut.Text != "" || txtusm_CheckOut.Text != "" || txtcnx_CheckOut.Text != "" || txtetc_CheckOut.Text != "" || txtss_CheckOut.Text != "" || txtsps_CheckOut.Text != "" || txtzz_CheckIn.Text != "")
                        {
                            txtpty_CheckOut.Text = "";
                            txtpty_CheckOut.Enabled = true;
                            txtphu_CheckOut.Text = "";

                           
                            txtkbv_CheckOut.Text = "";
                            txtusm_CheckOut.Text = "";
                            txtcnx_CheckOut.Text = "";
                            txtetc_CheckOut.Text = "";
                            txtss_CheckOut.Text = "";
                            txtsps_CheckOut.Text = "";
                            txtzz_CheckOut.Text = "";
                            txtbkk_CheckIn.Text = "";
                            txtbkk_CheckOut.Text = Session["todate"].ToString();
                            txtbkk_CheckIn.Enabled = false;
                            txtbkk_CheckOut.Enabled = false;
                        }
                        else
                        {
                            txtbkk_CheckIn.Text = Session["fromdate"].ToString();
                            txtbkk_CheckOut.Text = Session["todate"].ToString();

                            txtbkk_CheckIn.Enabled = false;
                            txtbkk_CheckOut.Enabled = false;
                        }
                    }
                    UpdatePanelsUpdate();
                }

            }

        }

        protected void UpdatePanelsUpdate()
        {
            upHotelPty.Update();
            upHotelPhuket.Update();
            upHotelkBV.Update();
            uphotelCnx.Update();
            uphotelEtc.Update();
            upHotelUsm.Update();
            upHotelSS.Update();
            uphotelsps.Update();
            uphotelZZ.Update();
            uphotelBkk.Update();

        }

        protected void updateSiteSeeing()
        {
            cityname = "";
            DataTable dt = objHotelStoreProcedure.fetchpacageid(package_id);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                cityname += "," + dt.Rows[i]["CITY_NAME"].ToString();
            }

            string str1 = cityname;
            string[] words = str1.Split(',');

            foreach (string word in words)
            {
                if (word == "Bangkok")
                {

                    foreach (GridViewRow item in GridView1.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_Bkkdate");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                            TextBox txtmeal = (TextBox)item.FindControl("txtSS_Bkk_noofMeals");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList1");

                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Bangkok", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }
                if (word == "Pattaya")
                {

                    foreach (GridViewRow item in GV_Result.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList2");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_Ptydate");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");
                            


                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Pattaya", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }
                if (word == "Phuket")
                {

                    foreach (GridViewRow item in GridView2.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList3");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_phuketdate");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");



                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Phuket", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }
                if (word == "Krabi")
                {

                    foreach (GridViewRow item in GridView3.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList4");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_kbv_date");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");


                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Krabi", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }
                if (word == "Samui")
                {

                    foreach (GridViewRow item in GridView4.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList5");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_usm_date");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");

                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Samui", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }
                if (word == "Chiangmai")
                {

                    foreach (GridViewRow item in GridView5.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList6");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_cnx_date");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");

                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Chiangmai", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }
                if (word == "Hua Hin")
                {

                    foreach (GridViewRow item in GridView6.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList7");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_etc_date");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");

                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Hua Hin", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }
                if (word == "Kanchanburi")
                {

                    foreach (GridViewRow item in GridView7.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList8");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_s_date");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");

                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Kanchanburi", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }
                if (word == "Chingrai")
                {

                    foreach (GridViewRow item in GridView8.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList9");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_sps_date");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");


                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Chingrai", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }
                if (word == "Phi Phi Island")
                {

                    foreach (GridViewRow item in GridView9.Rows)
                    {

                        CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                        if (rbtn.Checked)
                        {
                            Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                            DropDownList sicpvt_flag = (DropDownList)item.FindControl("DropDownList10");
                            TextBox datebkk = (TextBox)item.FindControl("txtSS_zz_date");
                            DropDownList timebkk = (DropDownList)item.FindControl("drp_ss_time");

                            objHotelStoreProcedure.updateSitetime(packagename.Text, "Phi Phi Island", int.Parse(Request.QueryString["QUOTEID"].ToString()), datebkk.Text, timebkk.Text);
                        }
                    }
                }

            }
        }

       


        #region SITE SEE VALIDATION RELATED TO TRANSFER PACKAGE

        protected bool SightSeeValidationonBook()
        {
            bool flag = true;
            string From_date = getFromdate();



            /*BANGKOK*/
            foreach (GridViewRow item in GridView1.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_bkk_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_Bkk_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_Bkkdate");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_Bkktime");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_Bkk_noofMeals");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList1");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DDL1 = (MulticheckDropdown)item.FindControl("DDL1");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Bangkok for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC1.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');

                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Bangkok for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Bangkok for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC1.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');

                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Bangkok for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }



                }
            }



            /*PATTAYA*/
            foreach (GridViewRow item in GV_Result.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_pty_select");
                if (rbtn.Checked)
                {

                    Label packagename = (Label)item.FindControl("lblSS_PtypackageDetails");

                    TextBox datebkk = (TextBox)item.FindControl("txtSS_Ptydate");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_Ptytime");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_PtynoofMeals");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList2");
                    DDL2 = (MulticheckDropdown)item.FindControl("DDL2");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;

                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null)))
                        {

                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Pattaya for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC2.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Pattaya for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null)))
                        {

                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Pattaya for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC2.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Pattaya for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                }


            }

            /*PHUKET*/
            foreach (GridViewRow item in GridView2.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_phu_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_phuketpackageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_phuketdate");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_phukettime");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_phuketnoofMeals");

                    DropDownList drp = (DropDownList)item.FindControl("DropDownList3");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");

                    DDL3 = (MulticheckDropdown)item.FindControl("DDL3");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phuket for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC3.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phuket for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }

                            }
                        }

                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phuket for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC3.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phuket for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }

                            }
                        }
                    }


                }
            }


            /*KRABI*/
            foreach (GridViewRow item in GridView3.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_kbv_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_kbv_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_kbv_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_kbv_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_kbv_noofMeals");

                    DropDownList drp = (DropDownList)item.FindControl("DropDownList4");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DDL4 = (MulticheckDropdown)item.FindControl("DDL4");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Krabi for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC4.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Krabi for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Krabi for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC4.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Krabi for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /*SAMUI*/
            foreach (GridViewRow item in GridView4.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_usm_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_usm_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_usm_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_usm_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_usm_noofMeals");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList5");
                    DDL5 = (MulticheckDropdown)item.FindControl("DDL5");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Samui for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC5.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Samui for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }


                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Samui for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC5.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Samui for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

            }

            /*CHIANGMAI*/
            foreach (GridViewRow item in GridView5.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_cnx_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_cnx_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_cnx_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_cnx_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_cnx_noofMeals");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList6");
                    DDL6 = (MulticheckDropdown)item.FindControl("DDL6");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chiangmai for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC6.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chiangmai for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chiangmai for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC6.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chiangmai for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /*HUA HIN*/
            foreach (GridViewRow item in GridView6.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_etc_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_etc_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_etc_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_etc_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_etc_noofMeals");
                    DDL7 = (MulticheckDropdown)item.FindControl("DDL7");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList7");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Hua Hin for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC7.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Hua Hin for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Hua Hin for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC7.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Hua Hin for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /*KANCHANBURI*/
            foreach (GridViewRow item in GridView7.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_s_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_s_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_s_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_s_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_s_noofMeals");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList8");
                    DDL8 = (MulticheckDropdown)item.FindControl("DDL8");

                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Kanchanburi for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC8.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Kanchanburi for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Kanchanburi for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC8.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Kanchanburi for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }


            }

            /*CHIANGRAI*/
            foreach (GridViewRow item in GridView8.Rows)
            {
                CheckBox rbtn = (CheckBox)item.FindControl("cb_sps_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_sps_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_sps_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_sps_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_sps_noofMeals");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList9");
                    DDL9 = (MulticheckDropdown)item.FindControl("DDL9");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chingrai for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }


                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC9.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chingrai for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chingrai for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }


                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC9.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Chingrai for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

            }


            /*PHI PHI ISLAND*/
            foreach (GridViewRow item in GridView9.Rows)
            {

                CheckBox rbtn = (CheckBox)item.FindControl("cb_zz_select");
                if (rbtn.Checked)
                {
                    Label packagename = (Label)item.FindControl("lblSS_zz_packageDetails");
                    TextBox datebkk = (TextBox)item.FindControl("txtSS_zz_date");
                    TextBox timebkk = (TextBox)item.FindControl("txtSS_zz_time");
                    TextBox txtmeal = (TextBox)item.FindControl("txtSS_zz_noofMeals");
                    DropDownList drp = (DropDownList)item.FindControl("DropDownList10");
                    DDL10 = (MulticheckDropdown)item.FindControl("DDL10");
                    DropDownList drpTime = (DropDownList)item.FindControl("drp_ss_time");
                    if (datebkk.Text == "")
                    {
                        ViewState["errormessage"] = "Date is Required " + "for" + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drpTime.Text == "")
                    {
                        ViewState["errormessage"] = "Please select Time for " + packagename.Text;
                        flag = false;
                        break;
                    }
                    else if (drp.Text == "")
                    {
                        ViewState["errormessage"] = "Please select at one transfer type SIC or PVT for " + packagename.Text;
                        flag = false;
                        break;
                    }

                    if ((DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)))
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phi Phi Island for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC10.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(From_date, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phi Phi Island for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if ((DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null)))
                        {
                            ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phi Phi Island for" + " " + packagename.Text;
                            flag = false;
                            break;
                        }

                        else if (int.Parse(txtmeal.Text) > 1)
                        {
                            string str11 = DDC10.GetCheckBoxValues(); ;
                            string[] words11 = str11.Split(',');
                            if (int.Parse(txtmeal.Text) - 1 != words11.Length)
                            {
                                ViewState["errormessage"] = "Selection of dates not same as enter no of Meals for" + " " + packagename.Text;
                                flag = false;
                                break;
                            }
                            else
                            {
                                for (int k = 0; k < int.Parse(txtmeal.Text) - 1; k++)
                                {

                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) < DateTime.ParseExact(txtzz_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) > DateTime.ParseExact(txtzz_CheckOut.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Date must be with in check-in & check-out dates" + " " + "of" + " " + "Phi Phi Island for" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                    if ((DateTime.ParseExact(words11[k].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(datebkk.Text, "dd/MM/yyyy", null)))
                                    {
                                        ViewState["errormessage"] = "Same date selected for meals in" + " " + packagename.Text;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }


            }

            if (flag == true)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        #endregion

        public string getFromdate()
        {
            string date = "";
            foreach (GridViewRow item in GridView10.Rows)
            {

                RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                Label flag = (Label)item.FindControl("lbltp_flag");
                TextBox txtdate = (TextBox)item.FindControl("txtTPdate");

                if (rbtn.Checked)
                {
                    if (flag.Text == "A")
                    {
                        date = txtdate.Text;
                        break;
                    }

                }
                else
                {
                    date = Session["fromdate"].ToString();
                }
            }
            return date;
        }

        public string getTodate()
        {
            string date = "";
            string tpid = "";
            foreach (GridViewRow item in GridView10.Rows)
            {

                RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                Label flag = (Label)item.FindControl("lbltp_flag");
                TextBox txtdate = (TextBox)item.FindControl("txtTPdate");

                Label id = (Label)item.FindControl("lbltp_priceid");

                if (rbtn.Checked)
                {
                    tpid = id.Text;
                    if (flag.Text == "D")
                    {
                        date = txtdate.Text;
                        break;
                    }

                }
                else if (tpid == id.Text)
                {
                    if (flag.Text == "D")
                    {
                        date = txtdate.Text;
                        break;
                    }
                    else
                    {
                        date = Session["todate"].ToString();
                    }
                }
                else
                {
                    date = Session["todate"].ToString();
                }
            }
            return date;
        }

        #region UPDATE TRANSFER PACKAGE

        protected void updateTransferpackagedoingBook()
        {
            DataTable dttra = new DataTable();

            if (Request["TOURID"] != null && !string.IsNullOrEmpty(Request["TOURID"].ToString()) && Request["QUOTEID"] != null && !string.IsNullOrEmpty(Request["QUOTEID"].ToString()))
            {
                if (Session["updateid"] == null)
                {
                    dttra = objHotelStoreProcedure.fetchTransferPackageforedit("FETCH_ALL_DATA_FOR_TRANSFERPACKAGE_EDIT_NEW", Request["QUOTEID"].ToString());
                }
                else
                {
                    dttra = objHotelStoreProcedure.fetchTransferPackageforedit("FETCH_ALL_DATA_FOR_TRANSFERPACKAGE_EDIT_NEW", Session["updateid"].ToString());
                }
            }
            else
            {
                dttra = objHotelStoreProcedure.fetchTransferPackageforedit("FETCH_ALL_DATA_FOR_TRANSFERPACKAGE_EDIT_NEW", Session["updateid"].ToString());
            }





            string arrivalTime = "";
            string departureTime = "";

            string arrivalDate = "";
            string departureDate = "";

            string arrivalFlag = "";
            string departureflag = "";

            foreach (GridViewRow item in GridView10.Rows)
            {

                RadioButton rbtn = (RadioButton)item.FindControl("rbtnTPselect");
                Label flag = (Label)item.FindControl("lbltp_flag");
                TextBox txtdate = (TextBox)item.FindControl("txtTPdate");
                Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                Label id = (Label)item.FindControl("lbltp_priceid");

                DropDownList drptransferSicPvt = (DropDownList)item.FindControl("drptransfer");

                if (rbtn.Checked)
                {
                    tpid = id.Text;
                    if (flag.Text == "A")
                    {
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");

                        arrivalDate = txtdate.Text;
                        arrivalFlag = drptransferSicPvt.Text;
                        arrivalTime = drp_list.Text;
                    }

                }
                else if (tpid == id.Text)
                {
                    if (flag.Text == "D")
                    {
                        DropDownList drp_list = (DropDownList)item.FindControl("tpdrp_time");
                        departureDate = txtdate.Text;
                        departureflag = drptransferSicPvt.Text;
                        departureTime = drp_list.Text;
                    }

                }
                for (int i = 0; i < dttra.Rows.Count; i++)
                {
                    if (dttra.Rows[i]["FLAG"].ToString() == "A")
                    {
                        objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), arrivalTime, arrivalFlag, arrivalDate);
                    }
                    else if (dttra.Rows[i]["FLAG"].ToString() == "D")
                    {
                        objHotelStoreProcedure.updateTransferOnBook(int.Parse(dttra.Rows[i]["SERVICE_CART_ID"].ToString()), departureTime, departureflag, departureDate);
                    }
                }
            }

        }
        #endregion

        /* OLD UNUSABLE CODE */

        #region TRANSFER PACKAGE TIME DROP DOWN SELECTED INDEX CHANFGE EVENT 
        public void tpdrp_time_SelectedIndexChanged(Object sender, EventArgs e)
        {

            
            DateTimeFormatInfo info = new DateTimeFormatInfo();
            CultureInfo culture;
            culture = CultureInfo.CreateSpecificCulture("en-US");
            info.ShortDatePattern = "dd/MM/yyyy";



            foreach (GridViewRow item in GridView10.Rows)
            {
                DataTable dttp = objHotelStoreProcedure.fetchTransferPackage(Session["fromdate"].ToString(), Session["todate"].ToString(), Session["arrivaltime"].ToString(), Session["departuretime"].ToString(), package_id.ToString());
                int i = item.DataItemIndex;
                string cityname = dttp.Rows[i]["CITY_NAME"].ToString();
                Label chk = (Label)item.FindControl("lbltp_flag");
                Label tp_fromto_id = (Label)item.FindControl("lbltp_detialid");
                DropDownList ddl = (DropDownList)item.FindControl("drptransfer");
                DropDownList drp_time = (DropDownList)item.FindControl("tpdrp_time");
                TextBox datebox = (TextBox)item.FindControl("txtTPdate");
                try
                {
                    if (datebox.Text == "")
                    {
                    }
                    else
                    {
                        System.DateTime today = DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null);
                    }
                    if (chk.Text == " " || chk.Text == "")
                    {
                        if (datebox.Text == "")
                        {
                        }

                        else if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) <= DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                        {
                            Master.DisplayMessage("Date must be within tour date", "successMessage", 8000);
                            break;
                        }
                    }
                    else if (chk.Text == "S")
                    {
                        foreach (GridViewRow item1 in GridView10.Rows)
                        {
                            TextBox datebkk1 = (TextBox)item.FindControl("txtTPdate");
                            TextBox temp = (TextBox)item1.FindControl("txtTPdate"); ;
                            int index1 = item1.DataItemIndex;
                            DropDownList drrpold = (DropDownList)item1.FindControl("tpdrp_time");
                            if (temp.Text != "")
                            {
                                if (i == index1)
                                {

                                }
                            }
                            if (datebox.Text != "")
                            {
                                if (cityname == "Pattaya")
                                {
                                    if (txtsps_CheckIn.Text != "" && txtbkk_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtpty_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtpty_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of pattaya.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Phuket")
                                {
                                    if (txtphu_CheckIn.Text != "" && txtphu_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtphu_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtphu_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Phuket.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Krabi")
                                {
                                    if (txtkbv_CheckIn.Text != "" && txtkbv_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtkbv_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtkbv_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Krabi.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }

                                else if (cityname == "Samui")
                                {
                                    if (txtusm_CheckIn.Text != "" && txtusm_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtusm_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtusm_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Samui.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Chiangmai")
                                {
                                    if (txtcnx_CheckIn.Text != "" && txtcnx_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtcnx_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtcnx_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Chiangmai.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Hua Hin")
                                {
                                    if (txtetc_CheckIn.Text != "" && txtetc_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtetc_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtetc_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Hua Hin.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Kanchanburi")
                                {
                                    if (txtss_CheckIn.Text != "" && txtss_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtss_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtss_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Kanchanburi.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Chingrai")
                                {
                                    if (txtsps_CheckIn.Text != "" && txtsps_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtsps_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtsps_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Chingrai.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }
                                else if (cityname == "Bangkok")
                                {
                                    if (txtbkk_CheckIn.Text != "" && txtbkk_CheckOut.Text != "")
                                    {
                                        if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(txtbkk_CheckIn.Text, "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) > DateTime.ParseExact(txtbkk_CheckOut.Text, "dd/MM/yyyy", null)))
                                        {
                                            Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates of Bangkok.", "successMessage", 8000);
                                            break;
                                        }
                                    }
                                }


                            }

                            if (datebox.Text != "")
                            {
                                if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) < DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null)) || (DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) >= DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null)))
                                {
                                    Master.DisplayMessage("Transfer Package dates should be within Check-in and Check-out dates.", "successMessage", 8000);
                                    break;
                                }
                                else
                                {
                                    if (temp.Text != "")
                                    {
                                        if (i != index1)
                                        {
                                            if (datebox.Text == "")
                                            {
                                            }
                                            else
                                            {

                                                if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) == DateTime.ParseExact(temp.Text, "dd/MM/yyyy", null)))
                                                {
                                                    DropDownList drrp = (DropDownList)item.FindControl("tpdrp_time");
                                                    DropDownList ddlfill = (DropDownList)item.FindControl("drptransfer");
                                                    Label chkfill = (Label)item.FindControl("lbltp_flag");
                                                    Label tp_fromto_idfill = (Label)item.FindControl("lbltp_detialid");

                                                    if (ddlfill.Text == "SIC")
                                                    {
                                                        drrp.Items.Clear();
                                                        DataSet ds0 = objHotelStoreProcedure.transfer_gettime_from_other_time("FETCH_TRANSFER_PACKAGE_TIME_ON_OTHER_TIME", int.Parse(tp_fromto_idfill.Text), chkfill.Text, "SIC", drrpold.Text);
                                                        binddropdownlist(drrp, ds0);
                                                        uptransferPackage.Update();
                                                    }
                                                    else if (ddlfill.Text == "PVT")
                                                    {
                                                        drrp.Items.Clear();
                                                        DataSet ds0 = objHotelStoreProcedure.transfer_gettime_from_other_time("FETCH_TRANSFER_PACKAGE_TIME_ON_OTHER_TIME", int.Parse(tp_fromto_idfill.Text), chkfill.Text, "PVT", drrpold.Text);
                                                        binddropdownlist(drrp, ds0);
                                                        uptransferPackage.Update();
                                                    }
                                                    else if (ddlfill.Text == "")
                                                    {
                                                        drrp.Items.Clear();
                                                        uptransferPackage.Update();
                                                    }
                                                    break;
                                                }
                                                else if ((DateTime.ParseExact(datebox.Text, "dd/MM/yyyy", null) != DateTime.ParseExact(temp.Text, "dd/MM/yyyy", null)))
                                                {
                                                    DropDownList drrp = (DropDownList)item.FindControl("tpdrp_time");
                                                    DropDownList ddlfill = (DropDownList)item.FindControl("drptransfer");
                                                    Label chkfill = (Label)item.FindControl("lbltp_flag");
                                                    Label tp_fromto_idfill = (Label)item.FindControl("lbltp_detialid");

                                                    if (drp_time.SelectedIndex == 0)
                                                    {
                                                        if (ddlfill.Text == "SIC")
                                                        {
                                                            DataSet ds0 = objHotelStoreProcedure.transfer_gettime("FETCH_TRANSFER_PACKAGE_TIME", int.Parse(tp_fromto_idfill.Text), chkfill.Text, "SIC");
                                                            binddropdownlist(drrp, ds0);
                                                            uptransferPackage.Update();
                                                        }
                                                        else if (ddlfill.Text == "PVT")
                                                        {
                                                            DataSet ds0 = objHotelStoreProcedure.transfer_gettime("FETCH_TRANSFER_PACKAGE_TIME", int.Parse(tp_fromto_idfill.Text), chkfill.Text, "PVT");
                                                            binddropdownlist(drrp, ds0);
                                                            uptransferPackage.Update();
                                                        }
                                                        else if (ddlfill.Text == "")
                                                        {
                                                            drp_time.Items.Clear();
                                                            uptransferPackage.Update();
                                                        }

                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                }

                catch
                {
                    Master.DisplayMessage("Date is not in correct format", "successMessage", 8000);
                    datebox.Text = "";
                    uptransferPackage.Update();
                    break;
                }
                finally
                {
                }



            }
        }

        /* 30-01-2013 Site Seeing date validation with transfer package */

        protected void btnArrivalDate_Click(object sender, EventArgs e)
        {
            try
            {
                foreach (GridViewRow item in GridView10.Rows)
                {
                    Label flag = (Label)item.FindControl("lbltp_flag");

                    if (flag.Text == "A")
                    {
                        TextBox txtDate = (TextBox)item.FindControl("txtTPdate");

                        if (DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", null))
                        {
                            System.DateTime today = DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", null);
                            today.ToString("MM-dd-yyyy");

                            System.DateTime answer1 = today.AddDays(double.Parse("1"));


                            txtDate.Text = answer1.ToString("dd/MM/yyyy");
                        }
                        else if (DateTime.ParseExact(Session["fromdate"].ToString(), "dd/MM/yyyy", null) != DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", null))
                        {
                            txtDate.Text = Session["fromdate"].ToString();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                uptransferPackage.Update();
            }
        }

        protected void btnDepartureDate_Click(object sender, EventArgs e)
        {
            try
            {
                foreach (GridViewRow item in GridView10.Rows)
                {
                    Label flag = (Label)item.FindControl("lbltp_flag");

                    if (flag.Text == "D")
                    {
                        TextBox txtDate = (TextBox)item.FindControl("txtTPdate");

                        if (DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null) == DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", null))
                        {
                            System.DateTime today = DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", null);
                            today.ToString("MM-dd-yyyy");

                            System.DateTime answer1 = today.AddDays(double.Parse("1"));


                            txtDate.Text = answer1.ToString("dd/MM/yyyy");
                        }
                        else if (DateTime.ParseExact(Session["todate"].ToString(), "dd/MM/yyyy", null) != DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", null))
                        {
                            txtDate.Text = Session["todate"].ToString();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                uptransferPackage.Update();
            }
        }
        #endregion

      
    }
}